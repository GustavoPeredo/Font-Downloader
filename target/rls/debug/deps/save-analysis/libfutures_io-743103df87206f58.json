{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18","program":"/home/gustavo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_io","--edition=2018","/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=743103df87206f58","-C","extra-filename=-743103df87206f58","--out-dir","/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps","-L","dependency=/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gustavo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps/libfutures_io-743103df87206f58.rmeta"},"prelude":{"crate_id":{"name":"futures_io","disambiguator":[8571746155735635933,0]},"crate_root":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src","external_crates":[{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}}],"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":0,"byte_end":22642,"line_start":1,"line_end":603,"column_start":1,"column_end":25}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":22640,"byte_end":22641,"line_start":603,"line_end":603,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":0,"byte_end":22642,"line_start":1,"line_end":603,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":95}],"decl_id":null,"docs":" Asynchronous I/O","sig":null,"attributes":[{"value":"/ Asynchronous I/O","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":21,"byte_end":24,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate contains the `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":25,"byte_end":96,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ `AsyncBufRead` traits, the asynchronous analogs to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":97,"byte_end":151,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/ `std::io::{Read, Write, Seek, BufRead}`. The primary difference is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":152,"byte_end":222,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ that these traits integrate with the asynchronous task system.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":223,"byte_end":289,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":290,"byte_end":293,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ All items of this library are only available when the `std` feature of this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":294,"byte_end":373,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":374,"byte_end":431,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":568,"byte_end":656,"line_start":13,"line_end":13,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":2333,"byte_end":2342,"line_start":53,"line_end":53,"column_start":15,"column_end":24},"name":"AsyncRead","qualname":"::if_std::AsyncRead","value":"AsyncRead","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":1941,"byte_end":1971,"line_start":46,"line_end":46,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":1976,"byte_end":1979,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Read` trait, but integrates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":1984,"byte_end":2056,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_read`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":2061,"byte_end":2130,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Read::read`, will automatically queue the current task","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":2135,"byte_end":2209,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":2214,"byte_end":2290,"line_start":51,"line_end":51,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":2295,"byte_end":2318,"line_start":52,"line_end":52,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3902,"byte_end":3911,"line_start":90,"line_end":90,"column_start":12,"column_end":21},"name":"poll_read","qualname":"::if_std::AsyncRead::poll_read","value":"pub fn poll_read(Pin<&mut Self>, &mut Context, &mut [u8])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `buf`.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `buf`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3169,"byte_end":3221,"line_start":75,"line_end":75,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3230,"byte_end":3233,"line_start":76,"line_end":76,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3242,"byte_end":3300,"line_start":77,"line_end":77,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3309,"byte_end":3312,"line_start":78,"line_end":78,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3321,"byte_end":3380,"line_start":79,"line_end":79,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3389,"byte_end":3447,"line_start":80,"line_end":80,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3456,"byte_end":3537,"line_start":81,"line_end":81,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3546,"byte_end":3572,"line_start":82,"line_end":82,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3581,"byte_end":3584,"line_start":83,"line_end":83,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3593,"byte_end":3613,"line_start":84,"line_end":84,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3622,"byte_end":3625,"line_start":85,"line_end":85,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3634,"byte_end":3697,"line_start":86,"line_end":86,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3706,"byte_end":3772,"line_start":87,"line_end":87,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3781,"byte_end":3839,"line_start":88,"line_end":88,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":3848,"byte_end":3890,"line_start":89,"line_end":89,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5203,"byte_end":5221,"line_start":118,"line_end":118,"column_start":12,"column_end":30},"name":"poll_read_vectored","qualname":"::if_std::AsyncRead::poll_read_vectored","value":"pub fn poll_read_vectored(Pin<&mut Self>, &mut Context, &mut [IoSliceMut])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `bufs` using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `bufs` using vectored","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4052,"byte_end":4119,"line_start":96,"line_end":96,"column_start":9,"column_end":76}},{"value":"/ IO operations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4128,"byte_end":4146,"line_start":97,"line_end":97,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4155,"byte_end":4158,"line_start":98,"line_end":98,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_read`, but allows data to be read","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4167,"byte_end":4236,"line_start":99,"line_end":99,"column_start":9,"column_end":78}},{"value":"/ into multiple buffers using a single operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4245,"byte_end":4296,"line_start":100,"line_end":100,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4305,"byte_end":4308,"line_start":101,"line_end":101,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4317,"byte_end":4375,"line_start":102,"line_end":102,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4384,"byte_end":4387,"line_start":103,"line_end":103,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4396,"byte_end":4455,"line_start":104,"line_end":104,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4464,"byte_end":4522,"line_start":105,"line_end":105,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4531,"byte_end":4612,"line_start":106,"line_end":106,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4621,"byte_end":4647,"line_start":107,"line_end":107,"column_start":9,"column_end":35}},{"value":"/ By default, this method delegates to using `poll_read` on the first","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4656,"byte_end":4727,"line_start":108,"line_end":108,"column_start":9,"column_end":80}},{"value":"/ nonempty buffer in `bufs`, or an empty one if none exists. Objects which","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4736,"byte_end":4812,"line_start":109,"line_end":109,"column_start":9,"column_end":85}},{"value":"/ support vectored IO should override this method.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4821,"byte_end":4873,"line_start":110,"line_end":110,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4882,"byte_end":4885,"line_start":111,"line_end":111,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4894,"byte_end":4914,"line_start":112,"line_end":112,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4923,"byte_end":4926,"line_start":113,"line_end":113,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":4935,"byte_end":4998,"line_start":114,"line_end":114,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5007,"byte_end":5073,"line_start":115,"line_end":115,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5082,"byte_end":5140,"line_start":116,"line_end":116,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5149,"byte_end":5191,"line_start":117,"line_end":117,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5978,"byte_end":5988,"line_start":140,"line_end":140,"column_start":15,"column_end":25},"name":"AsyncWrite","qualname":"::if_std::AsyncWrite","value":"AsyncWrite","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Write bytes asynchronously.","sig":null,"attributes":[{"value":"/ Write bytes asynchronously.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5574,"byte_end":5605,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5610,"byte_end":5613,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Write` trait, but integrates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5618,"byte_end":5691,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/ with the asynchronous task system. In particular, the `poll_write`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5696,"byte_end":5766,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ method, unlike `Write::write`, will automatically queue the current task","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5771,"byte_end":5847,"line_start":137,"line_end":137,"column_start":5,"column_end":81}},{"value":"/ for wakeup and return if the writer cannot take more data, rather than blocking","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5852,"byte_end":5935,"line_start":138,"line_end":138,"column_start":5,"column_end":88}},{"value":"/ the calling thread.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5940,"byte_end":5963,"line_start":139,"line_end":139,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6922,"byte_end":6932,"line_start":159,"line_end":159,"column_start":12,"column_end":22},"name":"poll_write","qualname":"::if_std::AsyncWrite::poll_write","value":"pub fn poll_write(Pin<&mut Self>, &mut Context, &[u8]) -> Poll<Result<usize>>","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `buf` into the object.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `buf` into the object.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":5999,"byte_end":6053,"line_start":141,"line_end":141,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6062,"byte_end":6065,"line_start":142,"line_end":142,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6074,"byte_end":6135,"line_start":143,"line_end":143,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6144,"byte_end":6147,"line_start":144,"line_end":144,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6156,"byte_end":6218,"line_start":145,"line_end":145,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6227,"byte_end":6285,"line_start":146,"line_end":146,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6294,"byte_end":6375,"line_start":147,"line_end":147,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6384,"byte_end":6410,"line_start":148,"line_end":148,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6419,"byte_end":6422,"line_start":149,"line_end":149,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6431,"byte_end":6451,"line_start":150,"line_end":150,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6460,"byte_end":6463,"line_start":151,"line_end":151,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6472,"byte_end":6535,"line_start":152,"line_end":152,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6544,"byte_end":6610,"line_start":153,"line_end":153,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6619,"byte_end":6677,"line_start":154,"line_end":154,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6686,"byte_end":6728,"line_start":155,"line_end":155,"column_start":9,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6737,"byte_end":6740,"line_start":156,"line_end":156,"column_start":9,"column_end":12}},{"value":"/ `poll_write` must try to make progress by flushing the underlying object if","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6749,"byte_end":6828,"line_start":157,"line_end":157,"column_start":9,"column_end":88}},{"value":"/ that is the only way the underlying object can become writable again.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":6837,"byte_end":6910,"line_start":158,"line_end":158,"column_start":9,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8245,"byte_end":8264,"line_start":188,"line_end":188,"column_start":12,"column_end":31},"name":"poll_write_vectored","qualname":"::if_std::AsyncWrite::poll_write_vectored","value":"pub fn poll_write_vectored(Pin<&mut Self>, &mut Context, &[IoSlice])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `bufs` into the object using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `bufs` into the object using vectored","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7069,"byte_end":7138,"line_start":165,"line_end":165,"column_start":9,"column_end":78}},{"value":"/ IO operations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7147,"byte_end":7165,"line_start":166,"line_end":166,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7174,"byte_end":7177,"line_start":167,"line_end":167,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_write`, but allows data from multiple buffers to be written","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7186,"byte_end":7281,"line_start":168,"line_end":168,"column_start":9,"column_end":104}},{"value":"/ using a single operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7290,"byte_end":7319,"line_start":169,"line_end":169,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7328,"byte_end":7331,"line_start":170,"line_end":170,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7340,"byte_end":7401,"line_start":171,"line_end":171,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7410,"byte_end":7413,"line_start":172,"line_end":172,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7422,"byte_end":7484,"line_start":173,"line_end":173,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7493,"byte_end":7551,"line_start":174,"line_end":174,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7560,"byte_end":7641,"line_start":175,"line_end":175,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7650,"byte_end":7676,"line_start":176,"line_end":176,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7685,"byte_end":7688,"line_start":177,"line_end":177,"column_start":9,"column_end":12}},{"value":"/ By default, this method delegates to using `poll_write` on the first","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7697,"byte_end":7769,"line_start":178,"line_end":178,"column_start":9,"column_end":81}},{"value":"/ nonempty buffer in `bufs`, or an empty one if none exists. Objects which","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7778,"byte_end":7854,"line_start":179,"line_end":179,"column_start":9,"column_end":85}},{"value":"/ support vectored IO should override this method.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7863,"byte_end":7915,"line_start":180,"line_end":180,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7924,"byte_end":7927,"line_start":181,"line_end":181,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7936,"byte_end":7956,"line_start":182,"line_end":182,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7965,"byte_end":7968,"line_start":183,"line_end":183,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":7977,"byte_end":8040,"line_start":184,"line_end":184,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8049,"byte_end":8115,"line_start":185,"line_end":185,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8124,"byte_end":8182,"line_start":186,"line_end":186,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8191,"byte_end":8233,"line_start":187,"line_end":187,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9479,"byte_end":9489,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"poll_flush","qualname":"::if_std::AsyncWrite::poll_flush","value":"pub fn poll_flush(Pin<&mut Self>, &mut Context) -> Poll<Result<()>>","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempt to flush the object, ensuring that any buffered data reach\n their destination.","sig":null,"attributes":[{"value":"/ Attempt to flush the object, ensuring that any buffered data reach","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8606,"byte_end":8676,"line_start":202,"line_end":202,"column_start":9,"column_end":79}},{"value":"/ their destination.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8685,"byte_end":8707,"line_start":203,"line_end":203,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8716,"byte_end":8719,"line_start":204,"line_end":204,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8728,"byte_end":8774,"line_start":205,"line_end":205,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8783,"byte_end":8786,"line_start":206,"line_end":206,"column_start":9,"column_end":12}},{"value":"/ If flushing cannot immediately complete, this method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8795,"byte_end":8859,"line_start":207,"line_end":207,"column_start":9,"column_end":73}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8868,"byte_end":8926,"line_start":208,"line_end":208,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":8935,"byte_end":9017,"line_start":209,"line_end":209,"column_start":9,"column_end":91}},{"value":"/ progress towards flushing.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9026,"byte_end":9056,"line_start":210,"line_end":210,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9065,"byte_end":9068,"line_start":211,"line_end":211,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9077,"byte_end":9097,"line_start":212,"line_end":212,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9106,"byte_end":9109,"line_start":213,"line_end":213,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9118,"byte_end":9181,"line_start":214,"line_end":214,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9190,"byte_end":9256,"line_start":215,"line_end":215,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9265,"byte_end":9323,"line_start":216,"line_end":216,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9332,"byte_end":9374,"line_start":217,"line_end":217,"column_start":9,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9383,"byte_end":9386,"line_start":218,"line_end":218,"column_start":9,"column_end":12}},{"value":"/ It only makes sense to do anything here if you actually buffer data.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9395,"byte_end":9467,"line_start":219,"line_end":219,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10275,"byte_end":10285,"line_start":237,"line_end":237,"column_start":12,"column_end":22},"name":"poll_close","qualname":"::if_std::AsyncWrite::poll_close","value":"pub fn poll_close(Pin<&mut Self>, &mut Context) -> Poll<Result<()>>","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempt to close the object.","sig":null,"attributes":[{"value":"/ Attempt to close the object.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9564,"byte_end":9596,"line_start":222,"line_end":222,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9605,"byte_end":9608,"line_start":223,"line_end":223,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9617,"byte_end":9663,"line_start":224,"line_end":224,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9672,"byte_end":9675,"line_start":225,"line_end":225,"column_start":9,"column_end":12}},{"value":"/ If closing cannot immediately complete, this function returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9684,"byte_end":9749,"line_start":226,"line_end":226,"column_start":9,"column_end":74}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9758,"byte_end":9816,"line_start":227,"line_end":227,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9825,"byte_end":9907,"line_start":228,"line_end":228,"column_start":9,"column_end":91}},{"value":"/ progress towards closing.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9916,"byte_end":9945,"line_start":229,"line_end":229,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9954,"byte_end":9957,"line_start":230,"line_end":230,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9966,"byte_end":9986,"line_start":231,"line_end":231,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":9995,"byte_end":9998,"line_start":232,"line_end":232,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10007,"byte_end":10070,"line_start":233,"line_end":233,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10079,"byte_end":10145,"line_start":234,"line_end":234,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10154,"byte_end":10212,"line_start":235,"line_end":235,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10221,"byte_end":10263,"line_start":236,"line_end":236,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10754,"byte_end":10763,"line_start":247,"line_end":247,"column_start":15,"column_end":24},"name":"AsyncSeek","qualname":"::if_std::AsyncSeek","value":"AsyncSeek","parent":null,"children":[{"krate":0,"index":48}],"decl_id":null,"docs":" Seek bytes asynchronously.","sig":null,"attributes":[{"value":"/ Seek bytes asynchronously.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10362,"byte_end":10392,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10397,"byte_end":10400,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Seek` trait, but integrates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10405,"byte_end":10477,"line_start":242,"line_end":242,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_seek`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10482,"byte_end":10551,"line_start":243,"line_end":243,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Seek::seek`, will automatically queue the current task","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10556,"byte_end":10630,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10635,"byte_end":10711,"line_start":245,"line_end":245,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10716,"byte_end":10739,"line_start":246,"line_end":246,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11618,"byte_end":11627,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"name":"poll_seek","qualname":"::if_std::AsyncSeek::poll_seek","value":"pub fn poll_seek(Pin<&mut Self>, &mut Context, SeekFrom) -> Poll<Result<u64>>","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Attempt to seek to an offset, in bytes, in a stream.","sig":null,"attributes":[{"value":"/ Attempt to seek to an offset, in bytes, in a stream.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10774,"byte_end":10830,"line_start":248,"line_end":248,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10839,"byte_end":10842,"line_start":249,"line_end":249,"column_start":9,"column_end":12}},{"value":"/ A seek beyond the end of a stream is allowed, but behavior is defined","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10851,"byte_end":10924,"line_start":250,"line_end":250,"column_start":9,"column_end":82}},{"value":"/ by the implementation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10933,"byte_end":10959,"line_start":251,"line_end":251,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10968,"byte_end":10971,"line_start":252,"line_end":252,"column_start":9,"column_end":12}},{"value":"/ If the seek operation completed successfully,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":10980,"byte_end":11029,"line_start":253,"line_end":253,"column_start":9,"column_end":58}},{"value":"/ this method returns the new position from the start of the stream.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11038,"byte_end":11108,"line_start":254,"line_end":254,"column_start":9,"column_end":79}},{"value":"/ That position can be used later with [`SeekFrom::Start`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11117,"byte_end":11178,"line_start":255,"line_end":255,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11187,"byte_end":11190,"line_start":256,"line_end":256,"column_start":9,"column_end":12}},{"value":"/ # Errors","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11199,"byte_end":11211,"line_start":257,"line_end":257,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11220,"byte_end":11223,"line_start":258,"line_end":258,"column_start":9,"column_end":12}},{"value":"/ Seeking to a negative offset is considered an error.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11232,"byte_end":11288,"line_start":259,"line_end":259,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11297,"byte_end":11300,"line_start":260,"line_end":260,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11309,"byte_end":11329,"line_start":261,"line_end":261,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11338,"byte_end":11341,"line_start":262,"line_end":262,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11350,"byte_end":11413,"line_start":263,"line_end":263,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11422,"byte_end":11488,"line_start":264,"line_end":264,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11497,"byte_end":11555,"line_start":265,"line_end":265,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11564,"byte_end":11606,"line_start":266,"line_end":266,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12173,"byte_end":12185,"line_start":281,"line_end":281,"column_start":15,"column_end":27},"name":"AsyncBufRead","qualname":"::if_std::AsyncBufRead","value":"AsyncBufRead: AsyncRead","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11767,"byte_end":11797,"line_start":274,"line_end":274,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11802,"byte_end":11805,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::BufRead` trait, but integrates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11810,"byte_end":11885,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/ with the asynchronous task system. In particular, the `poll_fill_buf`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11890,"byte_end":11963,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/ method, unlike `BufRead::fill_buf`, will automatically queue the current task","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":11968,"byte_end":12049,"line_start":278,"line_end":278,"column_start":5,"column_end":86}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12054,"byte_end":12130,"line_start":279,"line_end":279,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12135,"byte_end":12158,"line_start":280,"line_end":280,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13688,"byte_end":13701,"line_start":310,"line_end":310,"column_start":12,"column_end":25},"name":"poll_fill_buf","qualname":"::if_std::AsyncBufRead::poll_fill_buf","value":"pub fn poll_fill_buf(Pin<&mut Self>, &mut Context) -> Poll<Result<&[u8]>>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Attempt to return the contents of the internal buffer, filling it with more data\n from the inner reader if it is empty.","sig":null,"attributes":[{"value":"/ Attempt to return the contents of the internal buffer, filling it with more data","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12207,"byte_end":12291,"line_start":282,"line_end":282,"column_start":9,"column_end":93}},{"value":"/ from the inner reader if it is empty.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12300,"byte_end":12341,"line_start":283,"line_end":283,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12350,"byte_end":12353,"line_start":284,"line_end":284,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(buf))`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12362,"byte_end":12409,"line_start":285,"line_end":285,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12418,"byte_end":12421,"line_start":286,"line_end":286,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12430,"byte_end":12489,"line_start":287,"line_end":287,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12498,"byte_end":12556,"line_start":288,"line_end":288,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12565,"byte_end":12646,"line_start":289,"line_end":289,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12655,"byte_end":12681,"line_start":290,"line_end":290,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12690,"byte_end":12693,"line_start":291,"line_end":291,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12702,"byte_end":12773,"line_start":292,"line_end":292,"column_start":9,"column_end":80}},{"value":"/ [`consume`] method to function properly. When calling this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12782,"byte_end":12844,"line_start":293,"line_end":293,"column_start":9,"column_end":71}},{"value":"/ method, none of the contents will be \"read\" in the sense that later","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12853,"byte_end":12924,"line_start":294,"line_end":294,"column_start":9,"column_end":80}},{"value":"/ calling [`poll_read`] may return the same contents. As such, [`consume`] must","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12933,"byte_end":13014,"line_start":295,"line_end":295,"column_start":9,"column_end":90}},{"value":"/ be called with the number of bytes that are consumed from this buffer to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13023,"byte_end":13099,"line_start":296,"line_end":296,"column_start":9,"column_end":85}},{"value":"/ ensure that the bytes are never returned twice.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13108,"byte_end":13159,"line_start":297,"line_end":297,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13168,"byte_end":13171,"line_start":298,"line_end":298,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13180,"byte_end":13219,"line_start":299,"line_end":299,"column_start":9,"column_end":48}},{"value":"/ [`consume`]: AsyncBufRead::consume","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13228,"byte_end":13266,"line_start":300,"line_end":300,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13275,"byte_end":13278,"line_start":301,"line_end":301,"column_start":9,"column_end":12}},{"value":"/ An empty buffer returned indicates that the stream has reached EOF.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13287,"byte_end":13358,"line_start":302,"line_end":302,"column_start":9,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13367,"byte_end":13370,"line_start":303,"line_end":303,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13379,"byte_end":13399,"line_start":304,"line_end":304,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13408,"byte_end":13411,"line_start":305,"line_end":305,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13420,"byte_end":13483,"line_start":306,"line_end":306,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13492,"byte_end":13558,"line_start":307,"line_end":307,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13567,"byte_end":13625,"line_start":308,"line_end":308,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13634,"byte_end":13676,"line_start":309,"line_end":309,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14664,"byte_end":14671,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"consume","qualname":"::if_std::AsyncBufRead::consume","value":"pub fn consume(Pin<&mut Self>, usize)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Tells this buffer that `amt` bytes have been consumed from the buffer,\n so they should no longer be returned in calls to [`poll_read`].","sig":null,"attributes":[{"value":"/ Tells this buffer that `amt` bytes have been consumed from the buffer,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13779,"byte_end":13853,"line_start":312,"line_end":312,"column_start":9,"column_end":83}},{"value":"/ so they should no longer be returned in calls to [`poll_read`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13862,"byte_end":13929,"line_start":313,"line_end":313,"column_start":9,"column_end":76}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13938,"byte_end":13941,"line_start":314,"line_end":314,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":13950,"byte_end":14021,"line_start":315,"line_end":315,"column_start":9,"column_end":80}},{"value":"/ [`poll_fill_buf`] method to function properly. This function does","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14030,"byte_end":14099,"line_start":316,"line_end":316,"column_start":9,"column_end":78}},{"value":"/ not perform any I/O, it simply informs this object that some amount of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14108,"byte_end":14182,"line_start":317,"line_end":317,"column_start":9,"column_end":83}},{"value":"/ its buffer, returned from [`poll_fill_buf`], has been consumed and should","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14191,"byte_end":14268,"line_start":318,"line_end":318,"column_start":9,"column_end":86}},{"value":"/ no longer be returned. As such, this function may do odd things if","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14277,"byte_end":14347,"line_start":319,"line_end":319,"column_start":9,"column_end":79}},{"value":"/ [`poll_fill_buf`] isn't called before calling it.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14356,"byte_end":14409,"line_start":320,"line_end":320,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14418,"byte_end":14421,"line_start":321,"line_end":321,"column_start":9,"column_end":12}},{"value":"/ The `amt` must be `<=` the number of bytes in the buffer returned by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14430,"byte_end":14502,"line_start":322,"line_end":322,"column_start":9,"column_end":81}},{"value":"/ [`poll_fill_buf`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14511,"byte_end":14533,"line_start":323,"line_end":323,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14542,"byte_end":14545,"line_start":324,"line_end":324,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14554,"byte_end":14593,"line_start":325,"line_end":325,"column_start":9,"column_end":48}},{"value":"/ [`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":14602,"byte_end":14652,"line_start":326,"line_end":326,"column_start":9,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":15528,"byte_end":15531,"line_start":355,"line_end":355,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":15698,"byte_end":15701,"line_start":363,"line_end":363,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":18240,"byte_end":18243,"line_start":447,"line_end":447,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":18415,"byte_end":18418,"line_start":455,"line_end":455,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20215,"byte_end":20218,"line_start":513,"line_end":513,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20643,"byte_end":20646,"line_start":529,"line_end":529,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20813,"byte_end":20816,"line_start":537,"line_end":537,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":21558,"byte_end":21561,"line_start":563,"line_end":563,"column_start":61,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":21745,"byte_end":21748,"line_start":571,"line_end":571,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":12187,"byte_end":12196,"line_start":281,"line_end":281,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":39},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":15528,"byte_end":15531,"line_start":355,"line_end":355,"column_start":55,"column_end":58},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":15698,"byte_end":15701,"line_start":363,"line_end":363,"column_start":27,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":43300},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":18240,"byte_end":18243,"line_start":447,"line_end":447,"column_start":57,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":18415,"byte_end":18418,"line_start":455,"line_end":455,"column_start":28,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":43300},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20215,"byte_end":20218,"line_start":513,"line_end":513,"column_start":25,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":7014},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20643,"byte_end":20646,"line_start":529,"line_end":529,"column_start":55,"column_end":58},"kind":{"Impl":{"id":5}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":20813,"byte_end":20816,"line_start":537,"line_end":537,"column_start":27,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":43300},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":21558,"byte_end":21561,"line_start":563,"line_end":563,"column_start":61,"column_end":64},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.18/src/lib.rs","byte_start":21745,"byte_end":21748,"line_start":571,"line_end":571,"column_start":30,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":43300},"to":{"krate":0,"index":49}}]}