{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1","program":"/home/gustavo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","itertools","--edition=2018","/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_alloc\"","--cfg","feature=\"use_std\"","-C","metadata=6296d81e7c37d008","-C","extra-filename=-6296d81e7c37d008","--out-dir","/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps","-L","dependency=/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps","--extern","either=/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps/libeither-593bad13d6541ca1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gustavo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gustavo/Projekte/Font-Downloader/target/rls/debug/deps/libitertools-6296d81e7c37d008.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[2366884915652591602,0]},"crate_root":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src","external_crates":[{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}},{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","num":20,"id":{"name":"either","disambiguator":[17436103925369173174,0]}}],"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":0,"byte_end":120637,"line_start":1,"line_end":3539,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":181},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1436,"byte_end":1442,"line_start":60,"line_end":60,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":4698},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2004,"byte_end":2008,"line_start":84,"line_end":84,"column_start":14,"column_end":18},"alias_span":null,"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2115,"byte_end":2120,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2130,"byte_end":2137,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"alias_span":null,"name":"DedupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2147,"byte_end":2161,"line_start":91,"line_end":91,"column_start":9,"column_end":23},"alias_span":null,"name":"DedupWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2171,"byte_end":2187,"line_start":92,"line_end":92,"column_start":9,"column_end":25},"alias_span":null,"name":"DedupByWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2841},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2197,"byte_end":2207,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2855},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2217,"byte_end":2235,"line_start":94,"line_end":94,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2245,"byte_end":2256,"line_start":95,"line_end":95,"column_start":9,"column_end":20},"alias_span":null,"name":"FilterMapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3260},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2266,"byte_end":2274,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"alias_span":null,"name":"FilterOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2879},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2284,"byte_end":2291,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2869},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2301,"byte_end":2308,"line_start":98,"line_end":98,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2894},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2318,"byte_end":2326,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":475},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2336,"byte_end":2343,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2353,"byte_end":2358,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2368,"byte_end":2373,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":660},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2383,"byte_end":2390,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":695},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2400,"byte_end":2412,"line_start":104,"line_end":104,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2921},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2422,"byte_end":2431,"line_start":105,"line_end":105,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2441,"byte_end":2449,"line_start":106,"line_end":106,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2930},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2459,"byte_end":2476,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3269},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2486,"byte_end":2495,"line_start":108,"line_end":108,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3279},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2505,"byte_end":2511,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2575,"byte_end":2585,"line_start":112,"line_end":112,"column_start":31,"column_end":41},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2904},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2587,"byte_end":2591,"line_start":112,"line_end":112,"column_start":43,"column_end":47},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2816},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2657,"byte_end":2669,"line_start":114,"line_end":114,"column_start":30,"column_end":42},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1012},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2738,"byte_end":2750,"line_start":116,"line_end":116,"column_start":34,"column_end":46},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3630},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2836,"byte_end":2863,"line_start":118,"line_end":118,"column_start":51,"column_end":78},"alias_span":null,"name":"CombinationsWithReplacement","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3619},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2902,"byte_end":2912,"line_start":119,"line_end":119,"column_start":38,"column_end":48},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3639},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2950,"byte_end":2965,"line_start":120,"line_end":120,"column_start":37,"column_end":52},"alias_span":null,"name":"ExactlyOneError","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3659},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2995,"byte_end":3001,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3648},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3003,"byte_end":3013,"line_start":121,"line_end":121,"column_start":37,"column_end":47},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3047,"byte_end":3056,"line_start":122,"line_end":122,"column_start":32,"column_end":41},"alias_span":null,"name":"FlattenOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3718},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3124,"byte_end":3135,"line_start":124,"line_end":124,"column_start":35,"column_end":46},"alias_span":null,"name":"GroupingMap","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3137,"byte_end":3150,"line_start":124,"line_end":124,"column_start":48,"column_end":61},"alias_span":null,"name":"GroupingMapBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1457},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3220,"byte_end":3230,"line_start":126,"line_end":126,"column_start":34,"column_end":44},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3232,"byte_end":3237,"line_start":126,"line_end":126,"column_start":46,"column_end":51},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3239,"byte_end":3245,"line_start":126,"line_end":126,"column_start":53,"column_end":59},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3247,"byte_end":3254,"line_start":126,"line_end":126,"column_start":61,"column_end":68},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1434},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3256,"byte_end":3261,"line_start":126,"line_end":126,"column_start":70,"column_end":75},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1420},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3263,"byte_end":3269,"line_start":126,"line_end":126,"column_start":77,"column_end":83},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3305,"byte_end":3316,"line_start":127,"line_end":127,"column_start":34,"column_end":45},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3743},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3318,"byte_end":3333,"line_start":127,"line_end":127,"column_start":47,"column_end":62},"alias_span":null,"name":"IntersperseWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1581},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3403,"byte_end":3409,"line_start":129,"line_end":129,"column_start":34,"column_end":40},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1595},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3411,"byte_end":3419,"line_start":129,"line_end":129,"column_start":42,"column_end":50},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1664},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3453,"byte_end":3464,"line_start":130,"line_end":130,"column_start":32,"column_end":43},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3809},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3535,"byte_end":3544,"line_start":132,"line_end":132,"column_start":36,"column_end":45},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3831},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3609,"byte_end":3616,"line_start":134,"line_end":134,"column_start":30,"column_end":37},"alias_span":null,"name":"PeekNth","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3820},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3647,"byte_end":3655,"line_start":135,"line_end":135,"column_start":30,"column_end":38},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1818},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3696,"byte_end":3712,"line_start":136,"line_end":136,"column_start":40,"column_end":56},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1848},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3781,"byte_end":3793,"line_start":138,"line_end":138,"column_start":34,"column_end":46},"alias_span":null,"name":"Permutations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3916},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3836,"byte_end":3850,"line_start":139,"line_end":139,"column_start":42,"column_end":56},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3915,"byte_end":3923,"line_start":141,"line_end":141,"column_start":30,"column_end":38},"alias_span":null,"name":"Powerset","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3927},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":3995,"byte_end":4003,"line_start":143,"line_end":143,"column_start":37,"column_end":45},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3937},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4071,"byte_end":4077,"line_start":145,"line_end":145,"column_start":33,"column_end":39},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3944},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4107,"byte_end":4114,"line_start":146,"line_end":146,"column_start":29,"column_end":36},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3954},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4170,"byte_end":4180,"line_start":148,"line_end":148,"column_start":30,"column_end":40},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3962},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4182,"byte_end":4188,"line_start":148,"line_end":148,"column_start":42,"column_end":48},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3971},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4190,"byte_end":4197,"line_start":148,"line_end":148,"column_start":50,"column_end":57},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3991},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4258,"byte_end":4261,"line_start":150,"line_end":150,"column_start":25,"column_end":28},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3998},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4295,"byte_end":4306,"line_start":151,"line_end":151,"column_start":33,"column_end":44},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4017},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4308,"byte_end":4320,"line_start":151,"line_end":151,"column_start":46,"column_end":58},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4030},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4322,"byte_end":4342,"line_start":151,"line_end":151,"column_start":60,"column_end":80},"alias_span":null,"name":"CircularTupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4008},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4344,"byte_end":4350,"line_start":151,"line_end":151,"column_start":82,"column_end":88},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4422,"byte_end":4432,"line_start":153,"line_end":153,"column_start":38,"column_end":48},"alias_span":null,"name":"Duplicates","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2274},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4434,"byte_end":4446,"line_start":153,"line_end":153,"column_start":50,"column_end":62},"alias_span":null,"name":"DuplicatesBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4254},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4514,"byte_end":4520,"line_start":155,"line_end":155,"column_start":34,"column_end":40},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4241},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4522,"byte_end":4530,"line_start":155,"line_end":155,"column_start":42,"column_end":50},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2359},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4567,"byte_end":4579,"line_start":156,"line_end":156,"column_start":35,"column_end":47},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4290},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4613,"byte_end":4618,"line_start":157,"line_end":157,"column_start":33,"column_end":38},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4303},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4652,"byte_end":4662,"line_start":158,"line_end":158,"column_start":33,"column_end":43},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4316},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4693,"byte_end":4696,"line_start":159,"line_end":159,"column_start":30,"column_end":33},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2122},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4827,"byte_end":4843,"line_start":164,"line_end":164,"column_start":32,"column_end":48},"alias_span":null,"name":"HomogeneousTuple","value":"","parent":{"krate":0,"index":276}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4893,"byte_end":4894,"line_start":168,"line_end":168,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"FormatWith, ZipEq, CombinationsWithReplacement, TupleWindows, Tee, MapOk, PutBack, FilterMapOk, DedupByWithCount, Dedup, PeekingTakeWhile, TakeWhileRef, TupleCombinations, Powerset, MultiPeek, GroupBy, IntoChunks, GroupingMap, ExactlyOneError, WithPosition, Unique, Step, CircularTupleWindows, Duplicates, Merge, Batching, FilterOk, Interleave, DedupBy, WhileSome, Combinations, PadUsing, MergeJoinBy, KMerge, Intersperse, Positions, GroupingMapBy, FlattenOk, ZipLongest, Format, UniqueBy, MultiProduct, Tuples, Coalesce, MergeBy, MapInto, Product, InterleaveShortest, PutBackN, DedupWithCount, DuplicatesBy, Permutations, Update, KMergeBy, IntersperseWith","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":988},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4924,"byte_end":4930,"line_start":169,"line_end":169,"column_start":29,"column_end":35},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":996},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4965,"byte_end":4976,"line_start":170,"line_end":170,"column_start":34,"column_end":45},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1132},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4999,"byte_end":5008,"line_start":171,"line_end":171,"column_start":22,"column_end":31},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1116},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5031,"byte_end":5035,"line_start":172,"line_end":172,"column_start":22,"column_end":26},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1603},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5096,"byte_end":5105,"line_start":174,"line_end":174,"column_start":30,"column_end":39},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3784},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5131,"byte_end":5143,"line_start":175,"line_end":175,"column_start":24,"column_end":36},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1803},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5180,"byte_end":5191,"line_start":176,"line_end":176,"column_start":36,"column_end":47},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1939},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5230,"byte_end":5245,"line_start":177,"line_end":177,"column_start":38,"column_end":53},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2004},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5271,"byte_end":5279,"line_start":178,"line_end":178,"column_start":25,"column_end":33},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5327,"byte_end":5338,"line_start":180,"line_end":180,"column_start":26,"column_end":37},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2059},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5340,"byte_end":5346,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2081},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5348,"byte_end":5355,"line_start":180,"line_end":180,"column_start":47,"column_end":54},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4262},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5388,"byte_end":5396,"line_start":181,"line_end":181,"column_start":31,"column_end":39},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2442},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5423,"byte_end":5431,"line_start":182,"line_end":182,"column_start":26,"column_end":34},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3288},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5498,"byte_end":5510,"line_start":185,"line_end":185,"column_start":32,"column_end":44},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":564},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173936,"byte_end":173946,"line_start":21,"line_end":21,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":657},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173952,"byte_end":173957,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173963,"byte_end":173971,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1953},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174038,"byte_end":174048,"line_start":26,"line_end":26,"column_start":33,"column_end":43},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1711},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174111,"byte_end":174120,"line_start":28,"line_end":28,"column_start":32,"column_end":41},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1774},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174177,"byte_end":174185,"line_start":30,"line_end":30,"column_start":26,"column_end":34},"alias_span":null,"name":"peek_nth","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1593},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174245,"byte_end":174251,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174281,"byte_end":174287,"line_start":33,"line_end":33,"column_start":29,"column_end":35},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1660},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174316,"byte_end":174329,"line_start":34,"line_end":34,"column_start":28,"column_end":41},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":0,"index":1978},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174389,"byte_end":174395,"line_start":36,"line_end":36,"column_start":29,"column_end":35},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":900}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5577,"byte_end":5578,"line_start":189,"line_end":189,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"interleave, merge_join_by, merge, kmerge, zip_eq","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":0,"byte_end":120637,"line_start":1,"line_end":3539,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":852},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":991},{"krate":0,"index":999},{"krate":0,"index":1036},{"krate":0,"index":1063},{"krate":0,"index":1109},{"krate":0,"index":1137},{"krate":0,"index":1189},{"krate":0,"index":1216},{"krate":0,"index":1308},{"krate":0,"index":1329},{"krate":0,"index":1496},{"krate":0,"index":1537},{"krate":0,"index":1548},{"krate":0,"index":1622},{"krate":0,"index":1640},{"krate":0,"index":1689},{"krate":0,"index":1698},{"krate":0,"index":1731},{"krate":0,"index":1761},{"krate":0,"index":1793},{"krate":0,"index":1835},{"krate":0,"index":1889},{"krate":0,"index":1930},{"krate":0,"index":1946},{"krate":0,"index":1964},{"krate":0,"index":2000},{"krate":0,"index":2018},{"krate":0,"index":2041},{"krate":0,"index":2084},{"krate":0,"index":2106},{"krate":0,"index":2183},{"krate":0,"index":2286},{"krate":0,"index":2348},{"krate":0,"index":2379},{"krate":0,"index":2395},{"krate":0,"index":2438},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":2761},{"krate":0,"index":2764},{"krate":0,"index":4745},{"krate":0,"index":4753},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":4761},{"krate":0,"index":4763},{"krate":0,"index":4766},{"krate":0,"index":4768},{"krate":0,"index":2769}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ Extra iterator adaptors, functions and macros.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ To extend [`Iterator`] with methods in this crate, import","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":153,"byte_end":214,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ the [`Itertools`] trait:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":215,"byte_end":243,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":244,"byte_end":247,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":248,"byte_end":255,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":256,"byte_end":285,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":286,"byte_end":293,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":294,"byte_end":297,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Now, new methods like [`interleave`](Itertools::interleave)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":298,"byte_end":361,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ are available on all iterators:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":362,"byte_end":397,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":398,"byte_end":401,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":402,"byte_end":409,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":410,"byte_end":439,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":440,"byte_end":443,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let it = (1..3).interleave(vec![-1, -2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":444,"byte_end":489,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":490,"byte_end":542,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":543,"byte_end":550,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":551,"byte_end":554,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Most iterator methods are also provided as functions (with the benefit","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":555,"byte_end":629,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ that they convert parameters using [`IntoIterator`]):","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":630,"byte_end":687,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":688,"byte_end":691,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":692,"byte_end":699,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":700,"byte_end":730,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":731,"byte_end":734,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":735,"byte_end":786,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":787,"byte_end":810,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":811,"byte_end":816,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":817,"byte_end":824,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":825,"byte_end":828,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":829,"byte_end":850,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":851,"byte_end":854,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - `use_std`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":855,"byte_end":870,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/   - Enabled by default.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":871,"byte_end":898,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/   - Disable to compile itertools using `#![no_std]`. This disables","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":899,"byte_end":969,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/     any items that depend on collections (like `group_by`, `unique`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":970,"byte_end":1042,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/     `kmerge`, `join` and many more).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1043,"byte_end":1083,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1084,"byte_end":1087,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1088,"byte_end":1107,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1108,"byte_end":1111,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.32 or later.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":1112,"byte_end":1170,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2066,"byte_end":2073,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":2025,"byte_end":2057,"line_start":86,"line_end":86,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":276},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4787,"byte_end":4793,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"name":"traits","qualname":"::traits","value":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":277}],"decl_id":null,"docs":" Traits helpful for using certain `Itertools` methods in generic contexts.\n","sig":null,"attributes":[{"value":"/ Traits helpful for using certain `Itertools` methods in generic contexts.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":4701,"byte_end":4778,"line_start":162,"line_end":162,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":151849,"byte_end":151859,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"CoalesceBy","qualname":"::adaptors::coalesce::CoalesceBy","value":"CoalesceBy {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152228,"byte_end":152245,"line_start":30,"line_end":30,"column_start":11,"column_end":28},"name":"CoalescePredicate","qualname":"::adaptors::coalesce::CoalescePredicate","value":"CoalescePredicate<Item, T>","parent":null,"children":[{"krate":0,"index":354}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152264,"byte_end":152277,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"coalesce_pair","qualname":"::adaptors::coalesce::CoalescePredicate::coalesce_pair","value":"pub fn coalesce_pair(&mut Self, T, Item) -> Result<T, (T, T)>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154136,"byte_end":154144,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"name":"Coalesce","qualname":"::adaptors::coalesce::Coalesce","value":"CoalesceBy<I, F, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":153909,"byte_end":153974,"line_start":86,"line_end":86,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":153975,"byte_end":153978,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](crate::Itertools::coalesce) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":153979,"byte_end":154052,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154053,"byte_end":154126,"line_start":89,"line_end":89,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":383},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154900,"byte_end":154907,"line_start":117,"line_end":117,"column_start":10,"column_end":17},"name":"DedupBy","qualname":"::adaptors::coalesce::DedupBy","value":"CoalesceBy<I, DedupPred2CoalescePred<Pred>, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154590,"byte_end":154697,"line_start":113,"line_end":113,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154698,"byte_end":154701,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by()`](crate::Itertools::dedup_by) or [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154702,"byte_end":154816,"line_start":115,"line_end":115,"column_start":1,"column_end":115}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154817,"byte_end":154890,"line_start":116,"line_end":116,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2775},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155016,"byte_end":155038,"line_start":120,"line_end":120,"column_start":12,"column_end":34},"name":"DedupPred2CoalescePred","qualname":"::adaptors::coalesce::DedupPred2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":386},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155059,"byte_end":155073,"line_start":122,"line_end":122,"column_start":11,"column_end":25},"name":"DedupPredicate","qualname":"::adaptors::coalesce::DedupPredicate","value":"DedupPredicate<T>","parent":null,"children":[{"krate":0,"index":388}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155148,"byte_end":155158,"line_start":124,"line_end":124,"column_start":8,"column_end":18},"name":"dedup_pair","qualname":"::adaptors::coalesce::DedupPredicate::dedup_pair","value":"pub fn dedup_pair(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2782},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155519,"byte_end":155526,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"DedupEq","qualname":"::adaptors::coalesce::DedupEq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":403},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156177,"byte_end":156182,"line_start":170,"line_end":170,"column_start":10,"column_end":15},"name":"Dedup","qualname":"::adaptors::coalesce::Dedup","value":"DedupBy<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156038,"byte_end":156095,"line_start":167,"line_end":167,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156096,"byte_end":156099,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156100,"byte_end":156167,"line_start":169,"line_end":169,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156765,"byte_end":156781,"line_start":186,"line_end":186,"column_start":10,"column_end":26},"name":"DedupByWithCount","qualname":"::adaptors::coalesce::DedupByWithCount","value":"CoalesceBy<I, DedupPredWithCount2CoalescePred<Pred>,\n           (usize, <I as Iterator>::Item)>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present. This will determine equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156329,"byte_end":156420,"line_start":180,"line_end":180,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present. This will determine equality using a comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156421,"byte_end":156514,"line_start":181,"line_end":181,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156515,"byte_end":156518,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by_with_count()`](crate::Itertools::dedup_by_with_count) or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156519,"byte_end":156595,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156596,"byte_end":156681,"line_start":184,"line_end":184,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156682,"byte_end":156755,"line_start":185,"line_end":185,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2786},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":156912,"byte_end":156943,"line_start":190,"line_end":190,"column_start":12,"column_end":43},"name":"DedupPredWithCount2CoalescePred","qualname":"::adaptors::coalesce::DedupPredWithCount2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":414},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157589,"byte_end":157603,"line_start":213,"line_end":213,"column_start":10,"column_end":24},"name":"DedupWithCount","qualname":"::adaptors::coalesce::DedupWithCount","value":"DedupByWithCount<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157358,"byte_end":157449,"line_start":209,"line_end":209,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157450,"byte_end":157485,"line_start":210,"line_end":210,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157486,"byte_end":157489,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157490,"byte_end":157579,"line_start":212,"line_end":212,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2793},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158264,"byte_end":158278,"line_start":6,"line_end":6,"column_start":12,"column_end":26},"name":"MapSpecialCase","qualname":"::adaptors::map::MapSpecialCase","value":"MapSpecialCase {  }","parent":null,"children":[{"krate":0,"index":2796},{"krate":0,"index":2797}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158179,"byte_end":158252,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":429},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158323,"byte_end":158339,"line_start":11,"line_end":11,"column_start":11,"column_end":27},"name":"MapSpecialCaseFn","qualname":"::adaptors::map::MapSpecialCaseFn","value":"MapSpecialCaseFn<T>","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":431},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158354,"byte_end":158357,"line_start":12,"line_end":12,"column_start":10,"column_end":13},"name":"Out","qualname":"::adaptors::map::MapSpecialCaseFn::Out","value":"type Out;","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158366,"byte_end":158370,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"call","qualname":"::adaptors::map::MapSpecialCaseFn::call","value":"pub fn call(&mut Self, T) -> Self::Out","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":455},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159654,"byte_end":159659,"line_start":68,"line_end":68,"column_start":10,"column_end":15},"name":"MapOk","qualname":"::adaptors::map::MapOk","value":"MapSpecialCase<I, MapSpecialCaseFnOk<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result::Ok`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159491,"byte_end":159570,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159571,"byte_end":159574,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ See [`.map_ok()`](crate::Itertools::map_ok) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159575,"byte_end":159644,"line_start":67,"line_end":67,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159799,"byte_end":159809,"line_start":72,"line_end":72,"column_start":10,"column_end":20},"name":"MapResults","qualname":"::adaptors::map::MapResults","value":"MapOk<I, F>","parent":null,"children":[],"decl_id":null,"docs":" See [`MapOk`].\n","sig":null,"attributes":[{"value":"/ See [`MapOk`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159711,"byte_end":159729,"line_start":70,"line_end":70,"column_start":1,"column_end":19}},{"value":"deprecated(note = \"Use MapOk instead\", since = \"0.10.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159730,"byte_end":159789,"line_start":71,"line_end":71,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2802},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160086,"byte_end":160104,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"MapSpecialCaseFnOk","qualname":"::adaptors::map::MapSpecialCaseFnOk","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":475},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160508,"byte_end":160515,"line_start":102,"line_end":102,"column_start":10,"column_end":17},"name":"MapInto","qualname":"::adaptors::map::MapInto","value":"MapSpecialCase<I, MapSpecialCaseFnInto<R>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply `Into` conversion to each element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160353,"byte_end":160420,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160421,"byte_end":160424,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ See [`.map_into()`](crate::Itertools::map_into) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160425,"byte_end":160498,"line_start":101,"line_end":101,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2809},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160755,"byte_end":160775,"line_start":112,"line_end":112,"column_start":12,"column_end":32},"name":"MapSpecialCaseFnInto","qualname":"::adaptors::map::MapSpecialCaseFnInto","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2816},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161439,"byte_end":161451,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161092,"byte_end":161159,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ multiple iterators of type `I`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161160,"byte_end":161195,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161196,"byte_end":161199,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An iterator element type is `Vec<I>`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161200,"byte_end":161241,"line_start":12,"line_end":12,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161242,"byte_end":161245,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.multi_cartesian_product()`](crate::Itertools::multi_cartesian_product)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161246,"byte_end":161327,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161328,"byte_end":161353,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":161354,"byte_end":161427,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2841},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122254,"byte_end":122264,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":121937,"byte_end":122015,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122016,"byte_end":122028,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122029,"byte_end":122032,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122033,"byte_end":122062,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122063,"byte_end":122066,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](crate::Itertools::interleave) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122067,"byte_end":122144,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122169,"byte_end":122242,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122541,"byte_end":122551,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"pub fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122324,"byte_end":122388,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122389,"byte_end":122392,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of `i.interleave(j)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122393,"byte_end":122451,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122452,"byte_end":122455,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](crate::Itertools::interleave) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122456,"byte_end":122533,"line_start":40,"line_end":40,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2855},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123917,"byte_end":123935,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123566,"byte_end":123643,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123644,"byte_end":123669,"line_start":84,"line_end":84,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123670,"byte_end":123673,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123674,"byte_end":123703,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123704,"byte_end":123707,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](crate::Itertools::interleave_shortest)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123708,"byte_end":123781,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123782,"byte_end":123807,"line_start":89,"line_end":89,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123832,"byte_end":123905,"line_start":91,"line_end":91,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2869},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126207,"byte_end":126214,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126055,"byte_end":126112,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126113,"byte_end":126151,"line_start":172,"line_end":172,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126152,"byte_end":126155,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126156,"byte_end":126195,"line_start":174,"line_end":174,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126351,"byte_end":126359,"line_start":183,"line_end":183,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"pub fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126284,"byte_end":126343,"line_start":182,"line_end":182,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126608,"byte_end":126618,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"pub fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126553,"byte_end":126596,"line_start":195,"line_end":195,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126774,"byte_end":126784,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"pub fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126709,"byte_end":126748,"line_start":201,"line_end":201,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126753,"byte_end":126762,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":127049,"byte_end":127057,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126887,"byte_end":126944,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126949,"byte_end":126952,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126957,"byte_end":127023,"line_start":210,"line_end":210,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":127028,"byte_end":127037,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2879},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":129048,"byte_end":129055,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2885}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128693,"byte_end":128760,"line_start":279,"line_end":279,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128761,"byte_end":128811,"line_start":280,"line_end":280,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128812,"byte_end":128815,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128816,"byte_end":128866,"line_start":282,"line_end":282,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128867,"byte_end":128870,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](crate::Itertools::cartesian_product) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128871,"byte_end":128962,"line_start":284,"line_end":284,"column_start":1,"column_end":92}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":128963,"byte_end":129036,"line_start":285,"line_end":285,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2894},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132010,"byte_end":132018,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":2897},{"krate":0,"index":2898}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131575,"byte_end":131658,"line_start":380,"line_end":380,"column_start":1,"column_end":80}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131659,"byte_end":131747,"line_start":381,"line_end":381,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131748,"byte_end":131751,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131752,"byte_end":131829,"line_start":383,"line_end":383,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131830,"byte_end":131833,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](crate::Itertools::batching) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131834,"byte_end":131907,"line_start":385,"line_end":385,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131925,"byte_end":131998,"line_start":387,"line_end":387,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2904},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132992,"byte_end":132996,"line_start":424,"line_end":424,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":2906},{"krate":0,"index":2907}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132508,"byte_end":132581,"line_start":413,"line_end":413,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132582,"byte_end":132605,"line_start":414,"line_end":414,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132606,"byte_end":132609,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132610,"byte_end":132685,"line_start":416,"line_end":416,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132686,"byte_end":132727,"line_start":417,"line_end":417,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132728,"byte_end":132731,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](crate::Itertools::step) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132732,"byte_end":132797,"line_start":419,"line_end":419,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132798,"byte_end":132861,"line_start":420,"line_end":420,"column_start":1,"column_end":64}},{"value":"allow(deprecated)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132862,"byte_end":132882,"line_start":421,"line_end":421,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132907,"byte_end":132980,"line_start":423,"line_end":423,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":648},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134017,"byte_end":134031,"line_start":476,"line_end":476,"column_start":11,"column_end":25},"name":"MergePredicate","qualname":"::adaptors::MergePredicate","value":"MergePredicate<T>","parent":null,"children":[{"krate":0,"index":650}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134044,"byte_end":134054,"line_start":477,"line_end":477,"column_start":8,"column_end":18},"name":"merge_pred","qualname":"::adaptors::MergePredicate::merge_pred","value":"pub fn merge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2914},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134120,"byte_end":134128,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"MergeLte","qualname":"::adaptors::MergeLte","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":654},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134615,"byte_end":134620,"line_start":496,"line_end":496,"column_start":10,"column_end":15},"name":"Merge","qualname":"::adaptors::Merge","value":"MergeBy<I, J, MergeLte>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134261,"byte_end":134339,"line_start":489,"line_end":489,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134340,"byte_end":134412,"line_start":490,"line_end":490,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134413,"byte_end":134416,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134417,"byte_end":134456,"line_start":492,"line_end":492,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134457,"byte_end":134460,"line_start":493,"line_end":493,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134461,"byte_end":134531,"line_start":494,"line_end":494,"column_start":1,"column_end":71}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134532,"byte_end":134605,"line_start":495,"line_end":495,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134940,"byte_end":134945,"line_start":509,"line_end":509,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"pub fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134655,"byte_end":134714,"line_start":498,"line_end":498,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134715,"byte_end":134718,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::merge`](crate::Itertools::merge).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134719,"byte_end":134805,"line_start":500,"line_end":500,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134806,"byte_end":134809,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134810,"byte_end":134817,"line_start":502,"line_end":502,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134818,"byte_end":134843,"line_start":503,"line_end":503,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134844,"byte_end":134847,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134848,"byte_end":134894,"line_start":505,"line_end":505,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134895,"byte_end":134918,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134919,"byte_end":134924,"line_start":507,"line_end":507,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134925,"byte_end":134932,"line_start":508,"line_end":508,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":660},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135532,"byte_end":135539,"line_start":524,"line_end":524,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135173,"byte_end":135251,"line_start":517,"line_end":517,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135252,"byte_end":135324,"line_start":518,"line_end":518,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135325,"byte_end":135328,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135329,"byte_end":135368,"line_start":520,"line_end":520,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135369,"byte_end":135372,"line_start":521,"line_end":521,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135373,"byte_end":135446,"line_start":522,"line_end":522,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135447,"byte_end":135520,"line_start":523,"line_end":523,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138124,"byte_end":138136,"line_start":618,"line_end":618,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137817,"byte_end":137882,"line_start":613,"line_end":613,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137883,"byte_end":137948,"line_start":614,"line_end":614,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137949,"byte_end":137952,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](crate::Itertools::take_while_ref) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137953,"byte_end":138038,"line_start":616,"line_end":616,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138039,"byte_end":138112,"line_start":617,"line_end":617,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2921},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139466,"byte_end":139475,"line_start":668,"line_end":668,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":2923}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139147,"byte_end":139213,"line_start":662,"line_end":662,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139214,"byte_end":139274,"line_start":663,"line_end":663,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139275,"byte_end":139278,"line_start":664,"line_end":664,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](crate::Itertools::while_some) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139279,"byte_end":139356,"line_start":665,"line_end":665,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139381,"byte_end":139454,"line_start":667,"line_end":667,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2930},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140302,"byte_end":140319,"line_start":701,"line_end":701,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":2933},{"krate":0,"index":2934}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139967,"byte_end":140066,"line_start":694,"line_end":694,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140067,"byte_end":140090,"line_start":695,"line_end":695,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140091,"byte_end":140094,"line_start":696,"line_end":696,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](crate::Itertools::tuple_combinations) for more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140095,"byte_end":140175,"line_start":697,"line_end":697,"column_start":1,"column_end":81}},{"value":"/ information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140176,"byte_end":140192,"line_start":698,"line_end":698,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140217,"byte_end":140290,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":723},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140446,"byte_end":140460,"line_start":709,"line_end":709,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":725}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":725},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140482,"byte_end":140493,"line_start":710,"line_end":710,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2943},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141212,"byte_end":141229,"line_start":742,"line_end":742,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":2945}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2969},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":143756,"byte_end":143773,"line_start":830,"line_end":830,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2973}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2997},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":143821,"byte_end":143838,"line_start":831,"line_end":831,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3025},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":143888,"byte_end":143905,"line_start":832,"line_end":832,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":3029}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3053},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":143957,"byte_end":143974,"line_start":833,"line_end":833,"column_start":25,"column_end":42},"name":"Tuple5Combination","qualname":"::adaptors::Tuple5Combination","value":"Tuple5Combination {  }","parent":null,"children":[{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3057}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3081},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144028,"byte_end":144045,"line_start":834,"line_end":834,"column_start":25,"column_end":42},"name":"Tuple6Combination","qualname":"::adaptors::Tuple6Combination","value":"Tuple6Combination {  }","parent":null,"children":[{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":3085}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3109},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144101,"byte_end":144118,"line_start":835,"line_end":835,"column_start":25,"column_end":42},"name":"Tuple7Combination","qualname":"::adaptors::Tuple7Combination","value":"Tuple7Combination {  }","parent":null,"children":[{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3113}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3137},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144176,"byte_end":144193,"line_start":836,"line_end":836,"column_start":25,"column_end":42},"name":"Tuple8Combination","qualname":"::adaptors::Tuple8Combination","value":"Tuple8Combination {  }","parent":null,"children":[{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3165},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144253,"byte_end":144270,"line_start":837,"line_end":837,"column_start":25,"column_end":42},"name":"Tuple9Combination","qualname":"::adaptors::Tuple9Combination","value":"Tuple9Combination {  }","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3193},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144332,"byte_end":144350,"line_start":838,"line_end":838,"column_start":25,"column_end":43},"name":"Tuple10Combination","qualname":"::adaptors::Tuple10Combination","value":"Tuple10Combination {  }","parent":null,"children":[{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3197}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3221},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144414,"byte_end":144432,"line_start":839,"line_end":839,"column_start":25,"column_end":43},"name":"Tuple11Combination","qualname":"::adaptors::Tuple11Combination","value":"Tuple11Combination {  }","parent":null,"children":[{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3225}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3249},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144499,"byte_end":144517,"line_start":840,"line_end":840,"column_start":25,"column_end":43},"name":"Tuple12Combination","qualname":"::adaptors::Tuple12Combination","value":"Tuple12Combination {  }","parent":null,"children":[{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3253}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3260},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144816,"byte_end":144824,"line_start":847,"line_end":847,"column_start":12,"column_end":20},"name":"FilterOk","qualname":"::adaptors::FilterOk","value":"FilterOk {  }","parent":null,"children":[{"krate":0,"index":3263},{"krate":0,"index":3264}],"decl_id":null,"docs":" An iterator adapter to filter values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter values within a nested `Result::Ok`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144563,"byte_end":144633,"line_start":842,"line_end":842,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144634,"byte_end":144637,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_ok()`](crate::Itertools::filter_ok) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144638,"byte_end":144713,"line_start":844,"line_end":844,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":144731,"byte_end":144804,"line_start":846,"line_end":846,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146602,"byte_end":146613,"line_start":915,"line_end":915,"column_start":12,"column_end":23},"name":"FilterMapOk","qualname":"::adaptors::FilterMapOk","value":"FilterMapOk {  }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"decl_id":null,"docs":" An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146328,"byte_end":146428,"line_start":911,"line_end":911,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146429,"byte_end":146432,"line_start":912,"line_end":912,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_map_ok()`](crate::Itertools::filter_map_ok) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146433,"byte_end":146516,"line_start":913,"line_end":913,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146517,"byte_end":146590,"line_start":914,"line_end":914,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3269},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148634,"byte_end":148643,"line_start":992,"line_end":992,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3273},{"krate":0,"index":3274}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148365,"byte_end":148451,"line_start":987,"line_end":987,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148452,"byte_end":148455,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](crate::Itertools::positions) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148456,"byte_end":148531,"line_start":989,"line_end":989,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148549,"byte_end":148622,"line_start":991,"line_end":991,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3279},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":150168,"byte_end":150174,"line_start":1056,"line_end":1056,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":3282},{"krate":0,"index":3283}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a mutating function to each element before yielding it.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149903,"byte_end":149991,"line_start":1051,"line_end":1051,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149992,"byte_end":149995,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ See [`.update()`](crate::Itertools::update) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149996,"byte_end":150065,"line_start":1053,"line_end":1053,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":150083,"byte_end":150156,"line_start":1055,"line_end":1055,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3291},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167445,"byte_end":167449,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":3288},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[{"value":"/ Both values are present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167412,"byte_end":167440,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3295},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167513,"byte_end":167517,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":3288},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[{"value":"/ Only the left value of type `A` is present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167461,"byte_end":167508,"line_start":10,"line_end":10,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3298},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167579,"byte_end":167584,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":3288},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[{"value":"/ Only the right value of type `B` is present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167526,"byte_end":167574,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3288},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167387,"byte_end":167399,"line_start":7,"line_end":7,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"pub enum EitherOrBoth<A, B> { Both(A, B), Left(A), Right(B), }","parent":null,"children":[{"krate":0,"index":3291},{"krate":0,"index":3295},{"krate":0,"index":3298}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"/ Value that either holds a single A or B, or both.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167279,"byte_end":167332,"line_start":5,"line_end":5,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167703,"byte_end":167711,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"pub fn has_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167628,"byte_end":167691,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167855,"byte_end":167864,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"pub fn has_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167779,"byte_end":167843,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168061,"byte_end":168068,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_left","qualname":"<EitherOrBoth<A, B>>::is_left","value":"pub fn is_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Left, return true otherwise, return false.\n Exclusive version of [`has_left`](EitherOrBoth::has_left).\n","sig":null,"attributes":[{"value":"/ If Left, return true otherwise, return false.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167933,"byte_end":167982,"line_start":27,"line_end":27,"column_start":5,"column_end":54}},{"value":"/ Exclusive version of [`has_left`](EitherOrBoth::has_left).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167987,"byte_end":168049,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168313,"byte_end":168321,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_right","qualname":"<EitherOrBoth<A, B>>::is_right","value":"pub fn is_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Exclusive version of [`has_right`](EitherOrBoth::has_right).\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168182,"byte_end":168232,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/ Exclusive version of [`has_right`](EitherOrBoth::has_right).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168237,"byte_end":168301,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168554,"byte_end":168561,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_both","qualname":"<EitherOrBoth<A, B>>::is_both","value":"pub fn is_both(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Equivalent to `self.as_ref().both().is_some()`.\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168436,"byte_end":168486,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"/ Equivalent to `self.as_ref().both().is_some()`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168491,"byte_end":168542,"line_start":46,"line_end":46,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168727,"byte_end":168731,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"pub fn left(Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168629,"byte_end":168715,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168972,"byte_end":168977,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"pub fn right(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":168872,"byte_end":168960,"line_start":59,"line_end":59,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169193,"byte_end":169197,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"both","qualname":"<EitherOrBoth<A, B>>::both","value":"pub fn both(Self) -> Option<(A, B)>","parent":null,"children":[],"decl_id":null,"docs":" If Both, return `Some` tuple containing left and right.\n","sig":null,"attributes":[{"value":"/ If Both, return `Some` tuple containing left and right.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169122,"byte_end":169181,"line_start":67,"line_end":67,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169407,"byte_end":169413,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"pub fn as_ref(&Self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169329,"byte_end":169395,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169728,"byte_end":169734,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"pub fn as_mut(&mut Self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169638,"byte_end":169716,"line_start":84,"line_end":84,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170056,"byte_end":170060,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"flip","qualname":"<EitherOrBoth<A, B>>::flip","value":"pub fn flip(Self) -> EitherOrBoth<B, A>","parent":null,"children":[],"decl_id":null,"docs":" Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.\n","sig":null,"attributes":[{"value":"/ Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":169987,"byte_end":170044,"line_start":93,"line_end":93,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170408,"byte_end":170416,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"map_left","qualname":"<EitherOrBoth<A, B>>::map_left","value":"pub fn map_left<F, M>(Self, F) -> EitherOrBoth<M, B> where F: FnOnce(A) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is\n present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170237,"byte_end":170328,"line_start":102,"line_end":102,"column_start":5,"column_end":96}},{"value":"/ present rewrapping the result in `self`'s original variant.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170333,"byte_end":170396,"line_start":103,"line_end":103,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170824,"byte_end":170833,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"map_right","qualname":"<EitherOrBoth<A, B>>::map_right","value":"pub fn map_right<F, M>(Self, F) -> EitherOrBoth<A, M> where F: FnOnce(B) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.\n If it is present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170652,"byte_end":170735,"line_start":115,"line_end":115,"column_start":5,"column_end":88}},{"value":"/ If it is present rewrapping the result in `self`'s original variant.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":170740,"byte_end":170812,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171280,"byte_end":171287,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"map_any","qualname":"<EitherOrBoth<A, B>>::map_any","value":"pub fn map_any<F, L, G, R>(Self, F, G) -> EitherOrBoth<L, R> where\nF: FnOnce(A) -> L, G: FnOnce(B) -> R","parent":null,"children":[],"decl_id":null,"docs":" Apply the functions `f` and `g` on the value `a` and `b` respectively;\n found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.\n The Result is rewrapped `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the functions `f` and `g` on the value `a` and `b` respectively;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171069,"byte_end":171143,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171148,"byte_end":171209,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"/ The Result is rewrapped `self`'s original variant.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171214,"byte_end":171268,"line_start":130,"line_end":130,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171687,"byte_end":171700,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<EitherOrBoth<A, B>>::left_and_then","value":"pub fn left_and_then<F, L>(Self, F) -> EitherOrBoth<L, B> where F: FnOnce(A)\n-> EitherOrBoth<L, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is\n present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171568,"byte_end":171658,"line_start":143,"line_end":143,"column_start":5,"column_end":95}},{"value":"/ present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171663,"byte_end":171675,"line_start":144,"line_end":144,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172039,"byte_end":172053,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<EitherOrBoth<A, B>>::right_and_then","value":"pub fn right_and_then<F, R>(Self, F) -> EitherOrBoth<A, R> where F: FnOnce(B)\n-> EitherOrBoth<A, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b`\n in `Right(b)` or `Both(_, b)` variants if it is present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171919,"byte_end":171962,"line_start":155,"line_end":155,"column_start":5,"column_end":48}},{"value":"/ in `Right(b)` or `Both(_, b)` variants if it is present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":171967,"byte_end":172027,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172492,"byte_end":172502,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"or_default","qualname":"<EitherOrBoth<A, B>>::or_default","value":"pub fn or_default(Self) -> (A, B) where A: Default, B: Default","parent":null,"children":[],"decl_id":null,"docs":" Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.\n Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)\n for the other.\n","sig":null,"attributes":[{"value":"/ Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172271,"byte_end":172349,"line_start":167,"line_end":167,"column_start":5,"column_end":83}},{"value":"/ Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172354,"byte_end":172457,"line_start":168,"line_end":168,"column_start":5,"column_end":108}},{"value":"/ for the other.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172462,"byte_end":172480,"line_start":169,"line_end":169,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172916,"byte_end":172922,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"reduce","qualname":"<EitherOrBoth<T, T>>::reduce","value":"pub fn reduce<F>(Self, F) -> T where F: FnOnce(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return either value of left, right, or the product of `f` applied where `Both` are present.\n","sig":null,"attributes":[{"value":"/ Return either value of left, right, or the product of `f` applied where `Both` are present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172809,"byte_end":172904,"line_start":184,"line_end":184,"column_start":5,"column_end":100}}]},{"kind":"Mod","id":{"krate":0,"index":900},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":965},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173409,"byte_end":173483,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173484,"byte_end":173487,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any [`IntoIterator`] as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173488,"byte_end":173565,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":173566,"byte_end":173624,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":951},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174647,"byte_end":174656,"line_start":49,"line_end":49,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"pub fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174398,"byte_end":174442,"line_start":38,"line_end":38,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174443,"byte_end":174446,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::enumerate`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174447,"byte_end":174511,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174512,"byte_end":174515,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174516,"byte_end":174523,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174524,"byte_end":174553,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174554,"byte_end":174557,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174558,"byte_end":174601,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174602,"byte_end":174625,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174626,"byte_end":174631,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174632,"byte_end":174639,"line_start":48,"line_end":48,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":953},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174989,"byte_end":174992,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"pub fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174773,"byte_end":174807,"line_start":55,"line_end":55,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174808,"byte_end":174811,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::rev`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174812,"byte_end":174870,"line_start":57,"line_end":57,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174871,"byte_end":174874,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174875,"byte_end":174882,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174883,"byte_end":174906,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174907,"byte_end":174910,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174911,"byte_end":174943,"line_start":62,"line_end":62,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174944,"byte_end":174967,"line_start":63,"line_end":63,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174968,"byte_end":174973,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":174974,"byte_end":174981,"line_start":65,"line_end":65,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":955},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175402,"byte_end":175405,"line_start":85,"line_end":85,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"pub fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175141,"byte_end":175178,"line_start":73,"line_end":73,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175179,"byte_end":175182,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::zip`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175183,"byte_end":175241,"line_start":75,"line_end":75,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175242,"byte_end":175245,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175246,"byte_end":175253,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175254,"byte_end":175277,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175278,"byte_end":175281,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175282,"byte_end":175313,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip(&data, &data[1..]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175314,"byte_end":175356,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175357,"byte_end":175380,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175381,"byte_end":175386,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175387,"byte_end":175394,"line_start":84,"line_end":84,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":958},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175794,"byte_end":175799,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"pub fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that first iterates `i` and then `j`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175540,"byte_end":175600,"line_start":92,"line_end":92,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175601,"byte_end":175604,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::chain`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175605,"byte_end":175665,"line_start":94,"line_end":94,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175666,"byte_end":175669,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175670,"byte_end":175677,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175678,"byte_end":175703,"line_start":97,"line_end":97,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175704,"byte_end":175707,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ for elt in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175708,"byte_end":175748,"line_start":99,"line_end":99,"column_start":1,"column_end":41}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175749,"byte_end":175772,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175773,"byte_end":175778,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175779,"byte_end":175786,"line_start":102,"line_end":102,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":961},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176232,"byte_end":176238,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"pub fn cloned<'a, I, T: 'a>(I) -> iter::Cloned<I::IntoIter> where\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":175996,"byte_end":176056,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176057,"byte_end":176060,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::cloned`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176061,"byte_end":176122,"line_start":112,"line_end":112,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176123,"byte_end":176126,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176127,"byte_end":176134,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176135,"byte_end":176161,"line_start":115,"line_end":115,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176162,"byte_end":176165,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176166,"byte_end":176216,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176217,"byte_end":176224,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":965},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176630,"byte_end":176634,"line_start":135,"line_end":135,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"pub fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item)\n-> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176393,"byte_end":176440,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176441,"byte_end":176444,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::fold`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176445,"byte_end":176504,"line_start":128,"line_end":128,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176505,"byte_end":176508,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176509,"byte_end":176516,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176517,"byte_end":176541,"line_start":131,"line_end":131,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176542,"byte_end":176545,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176546,"byte_end":176614,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176615,"byte_end":176622,"line_start":134,"line_end":134,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":969},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177019,"byte_end":177022,"line_start":151,"line_end":151,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"pub fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176784,"byte_end":176854,"line_start":142,"line_end":142,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176855,"byte_end":176858,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::all`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176859,"byte_end":176917,"line_start":144,"line_end":144,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176918,"byte_end":176921,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176922,"byte_end":176929,"line_start":146,"line_end":146,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176930,"byte_end":176953,"line_start":147,"line_end":147,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176954,"byte_end":176957,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":176958,"byte_end":177003,"line_start":149,"line_end":149,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177004,"byte_end":177011,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":972},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177392,"byte_end":177395,"line_start":167,"line_end":167,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"pub fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177156,"byte_end":177226,"line_start":158,"line_end":158,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177227,"byte_end":177230,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::any`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177231,"byte_end":177289,"line_start":160,"line_end":160,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177290,"byte_end":177293,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177294,"byte_end":177301,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177302,"byte_end":177325,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177326,"byte_end":177329,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177330,"byte_end":177376,"line_start":165,"line_end":165,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177377,"byte_end":177384,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177730,"byte_end":177733,"line_start":183,"line_end":183,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"pub fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177529,"byte_end":177574,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177575,"byte_end":177578,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::max`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177579,"byte_end":177637,"line_start":176,"line_end":176,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177638,"byte_end":177641,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177642,"byte_end":177649,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177650,"byte_end":177673,"line_start":179,"line_end":179,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177674,"byte_end":177677,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177678,"byte_end":177714,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177715,"byte_end":177722,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":977},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178056,"byte_end":178059,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"pub fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177855,"byte_end":177900,"line_start":190,"line_end":190,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177901,"byte_end":177904,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::min`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177905,"byte_end":177963,"line_start":192,"line_end":192,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177964,"byte_end":177967,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177968,"byte_end":177975,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":177976,"byte_end":177999,"line_start":195,"line_end":195,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178000,"byte_end":178003,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178004,"byte_end":178040,"line_start":197,"line_end":197,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178041,"byte_end":178048,"line_start":198,"line_end":198,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":979},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178455,"byte_end":178459,"line_start":217,"line_end":217,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"pub fn join<I>(I, &str) -> String where I: IntoIterator, I::Item: Display","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, seperated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178182,"byte_end":178252,"line_start":207,"line_end":207,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178253,"byte_end":178256,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::join`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178257,"byte_end":178317,"line_start":209,"line_end":209,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178318,"byte_end":178321,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178322,"byte_end":178329,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ use itertools::join;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178330,"byte_end":178354,"line_start":212,"line_end":212,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178355,"byte_end":178358,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178359,"byte_end":178409,"line_start":214,"line_end":214,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178410,"byte_end":178417,"line_start":215,"line_end":215,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178418,"byte_end":178447,"line_start":216,"line_end":216,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":981},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178908,"byte_end":178914,"line_start":235,"line_end":235,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"pub fn sorted<I>(I) -> VecIntoIter<I::Item> where I: IntoIterator,\nI::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178591,"byte_end":178661,"line_start":224,"line_end":224,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178662,"byte_end":178665,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::sorted`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178666,"byte_end":178728,"line_start":226,"line_end":226,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178729,"byte_end":178732,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178733,"byte_end":178740,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"/ use itertools::sorted;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178741,"byte_end":178767,"line_start":229,"line_end":229,"column_start":1,"column_end":27}},{"value":"/ use itertools::assert_equal;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178768,"byte_end":178800,"line_start":230,"line_end":230,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178801,"byte_end":178804,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ assert_equal(sorted(\"rust\".chars()), \"rstu\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178805,"byte_end":178862,"line_start":232,"line_end":232,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178863,"byte_end":178870,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/free.rs","byte_start":178871,"byte_end":178900,"line_start":234,"line_end":234,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":988},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179569,"byte_end":179575,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"pub fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179068,"byte_end":179144,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179145,"byte_end":179148,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`]-enabled version of [`Itertools::concat`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179149,"byte_end":179211,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179212,"byte_end":179215,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179216,"byte_end":179291,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179292,"byte_end":179365,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179366,"byte_end":179392,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179393,"byte_end":179396,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179397,"byte_end":179408,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179409,"byte_end":179435,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179436,"byte_end":179440,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179441,"byte_end":179498,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179499,"byte_end":179553,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/concat_impl.rs","byte_start":179554,"byte_end":179561,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3619},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181358,"byte_end":181368,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":3622}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181113,"byte_end":181165,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181166,"byte_end":181214,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181215,"byte_end":181218,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181219,"byte_end":181255,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181256,"byte_end":181329,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":996},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181630,"byte_end":181641,"line_start":60,"line_end":60,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"pub fn cons_tuples<I, J>(I) -> ConsTuples<I::IntoIter, J> where\nI: IntoIterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181531,"byte_end":181588,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181589,"byte_end":181622,"line_start":59,"line_end":59,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1012},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182133,"byte_end":182145,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016}],"decl_id":null,"docs":" An iterator to iterate through all the `k`-length combinations in an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `k`-length combinations in an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":181879,"byte_end":181961,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":181962,"byte_end":181965,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations()`](crate::Itertools::combinations) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":181966,"byte_end":182047,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182048,"byte_end":182121,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182975,"byte_end":182976,"line_start":48,"line_end":48,"column_start":12,"column_end":13},"name":"k","qualname":"<Combinations<I>>::k","value":"pub fn k(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of a combination produced by this iterator.\n","sig":null,"attributes":[{"value":"/ Returns the length of a combination produced by this iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182883,"byte_end":182949,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182954,"byte_end":182963,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":183220,"byte_end":183221,"line_start":53,"line_end":53,"column_start":12,"column_end":13},"name":"n","qualname":"<Combinations<I>>::n","value":"pub fn n(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the (current) length of the pool from which combination elements are\n selected. This value can change between invocations of [`next`](Combinations::next).\n","sig":null,"attributes":[{"value":"/ Returns the (current) length of the pool from which combination elements are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":183021,"byte_end":183101,"line_start":50,"line_end":50,"column_start":5,"column_end":85}},{"value":"/ selected. This value can change between invocations of [`next`](Combinations::next).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":183106,"byte_end":183194,"line_start":51,"line_end":51,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":183199,"byte_end":183208,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3630},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":185908,"byte_end":185935,"line_start":12,"line_end":12,"column_start":12,"column_end":39},"name":"CombinationsWithReplacement","qualname":"::combinations_with_replacement::CombinationsWithReplacement","value":"CombinationsWithReplacement {  }","parent":null,"children":[{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":185655,"byte_end":185755,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":185756,"byte_end":185759,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations_with_replacement()`](crate::Itertools::combinations_with_replacement)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":185760,"byte_end":185853,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":185854,"byte_end":185879,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3639},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189302,"byte_end":189317,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"ExactlyOneError","qualname":"::exactly_one_err::ExactlyOneError","value":"ExactlyOneError {  }","parent":null,"children":[{"krate":0,"index":3641},{"krate":0,"index":3643}],"decl_id":null,"docs":" Iterator returned for the error case of `IterTools::exactly_one()`\n This iterator yields exactly the same elements as the input iterator.","sig":null,"attributes":[{"value":"/ Iterator returned for the error case of `IterTools::exactly_one()`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":188840,"byte_end":188910,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ This iterator yields exactly the same elements as the input iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":188911,"byte_end":188984,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":188985,"byte_end":188988,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ During the execution of exactly_one the iterator must be mutated.  This wrapper","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":188989,"byte_end":189072,"line_start":14,"line_end":14,"column_start":1,"column_end":84}},{"value":"/ effectively \"restores\" the state of the input iterator when it's handed back.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189073,"byte_end":189154,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189155,"byte_end":189158,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is very similar to PutBackN except this iterator only supports 0-2 elements and does not","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189159,"byte_end":189256,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ use a `Vec`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189257,"byte_end":189273,"line_start":18,"line_end":18,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1119},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192490,"byte_end":192503,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192349,"byte_end":192442,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192447,"byte_end":192485,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192636,"byte_end":192643,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192540,"byte_end":192631,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1128},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192764,"byte_end":192770,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192668,"byte_end":192759,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1116},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192287,"byte_end":192291,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"pub enum Diff<I, J> where I: Iterator, J: Iterator {\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n    Shorter(usize, PutBack<I>),\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1124},{"krate":0,"index":1128}],"decl_id":null,"docs":" A type returned by the [`diff_with`] function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`] function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192110,"byte_end":192160,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192161,"byte_end":192164,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192165,"byte_end":192259,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192260,"byte_end":192277,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1132},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193521,"byte_end":193530,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"pub fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>>\nwhere I: IntoIterator, J: IntoIterator, F: Fn(&I::Item, &J::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a [`Diff`] which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192794,"byte_end":192889,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a [`Diff`] which describes how `j` differs from `i`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192890,"byte_end":192954,"line_start":29,"line_end":29,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192955,"byte_end":192958,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":192959,"byte_end":193055,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193056,"byte_end":193150,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193151,"byte_end":193171,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193172,"byte_end":193175,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193176,"byte_end":193270,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193271,"byte_end":193342,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193343,"byte_end":193346,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193347,"byte_end":193446,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/diff.rs","byte_start":193447,"byte_end":193513,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194938,"byte_end":194947,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"FlattenOk","qualname":"::flatten_ok::FlattenOk","value":"FlattenOk {  }","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162}],"decl_id":null,"docs":" An iterator adaptor that flattens `Result::Ok` values and\n allows `Result::Err` values through unchanged.","sig":null,"attributes":[{"value":"/ An iterator adaptor that flattens `Result::Ok` values and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194658,"byte_end":194719,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ allows `Result::Err` values through unchanged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194720,"byte_end":194770,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194771,"byte_end":194774,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.flatten_ok()`](crate::Itertools::flatten_ok) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194775,"byte_end":194852,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":194853,"byte_end":194926,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3648},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199981,"byte_end":199991,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":3652},{"krate":0,"index":3653}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199713,"byte_end":199773,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199774,"byte_end":199777,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199778,"byte_end":199853,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199854,"byte_end":199868,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199869,"byte_end":199872,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](crate::Itertools::format_with) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":199873,"byte_end":199952,"line_start":9,"line_end":9,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3659},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200401,"byte_end":200407,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":3662},{"krate":0,"index":3663}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200139,"byte_end":200199,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200200,"byte_end":200203,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200204,"byte_end":200279,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200280,"byte_end":200294,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200295,"byte_end":200298,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](crate::Itertools::format)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200299,"byte_end":200346,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":200347,"byte_end":200372,"line_start":23,"line_end":23,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3704},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203289,"byte_end":203303,"line_start":12,"line_end":12,"column_start":12,"column_end":26},"name":"MapForGrouping","qualname":"::grouping_map::MapForGrouping","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)\n","sig":null,"attributes":[{"value":"/ A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203154,"byte_end":203253,"line_start":10,"line_end":10,"column_start":1,"column_end":100}}]},{"kind":"Type","id":{"krate":0,"index":1255},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204122,"byte_end":204135,"line_start":43,"line_end":43,"column_start":10,"column_end":23},"name":"GroupingMapBy","qualname":"::grouping_map::GroupingMapBy","value":"GroupingMap<MapForGrouping<I, F>>","parent":null,"children":[],"decl_id":null,"docs":" `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.\n \n See [`GroupingMap`] for more informations.\n","sig":null,"attributes":[{"value":"/ `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203905,"byte_end":203991,"line_start":39,"line_end":39,"column_start":1,"column_end":87}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203992,"byte_end":203996,"line_start":40,"line_end":40,"column_start":1,"column_end":5}},{"value":"/ See [`GroupingMap`] for more informations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203997,"byte_end":204043,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"must_use = \"GroupingMapBy is lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204044,"byte_end":204112,"line_start":42,"line_end":42,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":3718},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204544,"byte_end":204555,"line_start":52,"line_end":52,"column_start":12,"column_end":23},"name":"GroupingMap","qualname":"::grouping_map::GroupingMap","value":"GroupingMap {  }","parent":null,"children":[{"krate":0,"index":3720}],"decl_id":null,"docs":" `GroupingMap` is an intermediate struct for efficient group-and-fold operations.\n It groups elements by their key and at the same time fold each group\n using some aggregating operation.\n \n No method on this struct performs temporary allocations.\n","sig":null,"attributes":[{"value":"/ `GroupingMap` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204180,"byte_end":204264,"line_start":45,"line_end":45,"column_start":1,"column_end":85}},{"value":"/ It groups elements by their key and at the same time fold each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204265,"byte_end":204337,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ using some aggregating operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204338,"byte_end":204375,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204376,"byte_end":204380,"line_start":48,"line_end":48,"column_start":1,"column_end":5}},{"value":"/ No method on this struct performs temporary allocations.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204381,"byte_end":204441,"line_start":49,"line_end":49,"column_start":1,"column_end":61}},{"value":"must_use = \"GroupingMap is lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204466,"byte_end":204532,"line_start":51,"line_end":51,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206728,"byte_end":206737,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"aggregate","qualname":"<GroupingMap<I>>::aggregate","value":"pub fn aggregate<FO, R>(Self, FO) -> HashMap<K, R> where\nFO: FnMut(Option<R>, &K, V) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" This is the generic way to perform any operation on a `GroupingMap`.\n It's suggested to use this method only to implement custom operations\n when the already provided ones are not enough.\n \n Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in an `HashMap`.","sig":null,"attributes":[{"value":"/ This is the generic way to perform any operation on a `GroupingMap`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204674,"byte_end":204746,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ It's suggested to use this method only to implement custom operations","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204751,"byte_end":204824,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ when the already provided ones are not enough.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204829,"byte_end":204879,"line_start":62,"line_end":62,"column_start":5,"column_end":55}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204884,"byte_end":204888,"line_start":63,"line_end":63,"column_start":5,"column_end":9}},{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204893,"byte_end":204989,"line_start":64,"line_end":64,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204994,"byte_end":205090,"line_start":65,"line_end":65,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in an `HashMap`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205095,"byte_end":205176,"line_start":66,"line_end":66,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205181,"byte_end":205184,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The `operation` function is invoked on each element with the following parameters:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205189,"byte_end":205275,"line_start":68,"line_end":68,"column_start":5,"column_end":91}},{"value":"/  - the current value of the accumulator of the group if there is currently one;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205280,"byte_end":205363,"line_start":69,"line_end":69,"column_start":5,"column_end":88}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205368,"byte_end":205435,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being aggregated;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205440,"byte_end":205492,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205497,"byte_end":205501,"line_start":72,"line_end":72,"column_start":5,"column_end":9}},{"value":"/ If `operation` returns `Some(element)` then the accumulator is updated with `element`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205506,"byte_end":205596,"line_start":73,"line_end":73,"column_start":5,"column_end":95}},{"value":"/ otherwise the previous accumulation is discarded.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205601,"byte_end":205654,"line_start":74,"line_end":74,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205659,"byte_end":205662,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of aggregation of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205667,"byte_end":205757,"line_start":76,"line_end":76,"column_start":5,"column_end":95}},{"value":"/ that group's elements. If the aggregation of the last element of a group discards the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205762,"byte_end":205851,"line_start":77,"line_end":77,"column_start":5,"column_end":94}},{"value":"/ accumulator then there won't be an entry associated to that group's key.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205856,"byte_end":205932,"line_start":78,"line_end":78,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205937,"byte_end":205941,"line_start":79,"line_end":79,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205946,"byte_end":205953,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205958,"byte_end":205987,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":205992,"byte_end":205996,"line_start":82,"line_end":82,"column_start":5,"column_end":9}},{"value":"/ let data = vec![2, 8, 5, 7, 9, 0, 4, 10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206001,"byte_end":206046,"line_start":83,"line_end":83,"column_start":5,"column_end":50}},{"value":"/ let lookup = data.into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206051,"byte_end":206084,"line_start":84,"line_end":84,"column_start":5,"column_end":38}},{"value":"/     .into_grouping_map_by(|&n| n % 4)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206089,"byte_end":206130,"line_start":85,"line_end":85,"column_start":5,"column_end":46}},{"value":"/     .aggregate(|acc, _key, val| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206135,"byte_end":206172,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/         if val == 0 || val == 10 {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206177,"byte_end":206215,"line_start":87,"line_end":87,"column_start":5,"column_end":43}},{"value":"/             None","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206220,"byte_end":206240,"line_start":88,"line_end":88,"column_start":5,"column_end":25}},{"value":"/         } else {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206245,"byte_end":206265,"line_start":89,"line_end":89,"column_start":5,"column_end":25}},{"value":"/             Some(acc.unwrap_or(0) + val)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206270,"byte_end":206314,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/         }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206319,"byte_end":206332,"line_start":91,"line_end":91,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206337,"byte_end":206348,"line_start":92,"line_end":92,"column_start":5,"column_end":16}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206353,"byte_end":206357,"line_start":93,"line_end":93,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 4);        // 0 resets the accumulator so only 4 is summed","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206362,"byte_end":206447,"line_start":94,"line_end":94,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(lookup[&1], 5 + 9);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206452,"byte_end":206486,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.get(&2), None); // 10 resets the accumulator and nothing is summed afterward","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206491,"byte_end":206589,"line_start":96,"line_end":96,"column_start":5,"column_end":103}},{"value":"/ assert_eq!(lookup[&3], 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206594,"byte_end":206624,"line_start":97,"line_end":97,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);      // The final keys are only 0, 1 and 2","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206629,"byte_end":206704,"line_start":98,"line_end":98,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":206709,"byte_end":206716,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208348,"byte_end":208352,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"fold","qualname":"<GroupingMap<I>>::fold","value":"pub fn fold<FO, R>(Self, R, FO) -> HashMap<K, R> where R: Clone,\nFO: FnMut(R, &K, V) -> R","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207171,"byte_end":207267,"line_start":115,"line_end":115,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207272,"byte_end":207368,"line_start":116,"line_end":116,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207373,"byte_end":207451,"line_start":117,"line_end":117,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207456,"byte_end":207459,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ `init` is the value from which will be cloned the initial value of each accumulator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207464,"byte_end":207552,"line_start":119,"line_end":119,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207557,"byte_end":207560,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207565,"byte_end":207657,"line_start":121,"line_end":121,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207662,"byte_end":207719,"line_start":122,"line_end":122,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207724,"byte_end":207791,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207796,"byte_end":207849,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207854,"byte_end":207857,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207862,"byte_end":207968,"line_start":126,"line_end":126,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207973,"byte_end":207977,"line_start":127,"line_end":127,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207982,"byte_end":207989,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":207994,"byte_end":208023,"line_start":129,"line_end":129,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208028,"byte_end":208032,"line_start":130,"line_end":130,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208037,"byte_end":208061,"line_start":131,"line_end":131,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208066,"byte_end":208107,"line_start":132,"line_end":132,"column_start":5,"column_end":46}},{"value":"/     .fold(0, |acc, _key, val| acc + val);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208112,"byte_end":208157,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208162,"byte_end":208166,"line_start":134,"line_end":134,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208171,"byte_end":208205,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208210,"byte_end":208248,"line_start":136,"line_end":136,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208253,"byte_end":208287,"line_start":137,"line_end":137,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208292,"byte_end":208324,"line_start":138,"line_end":138,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208329,"byte_end":208336,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209890,"byte_end":209900,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"fold_first","qualname":"<GroupingMap<I>>::fold_first","value":"pub fn fold_first<FO>(Self, FO) -> HashMap<K, V> where FO: FnMut(V, &K, V) ->\nV","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208646,"byte_end":208742,"line_start":150,"line_end":150,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208747,"byte_end":208843,"line_start":151,"line_end":151,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208848,"byte_end":208926,"line_start":152,"line_end":152,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208931,"byte_end":208934,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This is similar to [`fold`] but the initial value of the accumulator is the first element of the group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":208939,"byte_end":209046,"line_start":154,"line_end":154,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209051,"byte_end":209054,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209059,"byte_end":209151,"line_start":156,"line_end":156,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209156,"byte_end":209213,"line_start":157,"line_end":157,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209218,"byte_end":209285,"line_start":158,"line_end":158,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209290,"byte_end":209343,"line_start":159,"line_end":159,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209348,"byte_end":209351,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209356,"byte_end":209462,"line_start":161,"line_end":161,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209467,"byte_end":209471,"line_start":162,"line_end":162,"column_start":5,"column_end":9}},{"value":"/ [`fold`]: GroupingMap::fold","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209476,"byte_end":209507,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209512,"byte_end":209516,"line_start":164,"line_end":164,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209521,"byte_end":209528,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209533,"byte_end":209562,"line_start":166,"line_end":166,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209567,"byte_end":209571,"line_start":167,"line_end":167,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209576,"byte_end":209600,"line_start":168,"line_end":168,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209605,"byte_end":209646,"line_start":169,"line_end":169,"column_start":5,"column_end":46}},{"value":"/     .fold_first(|acc, _key, val| acc + val);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209651,"byte_end":209699,"line_start":170,"line_end":170,"column_start":5,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209704,"byte_end":209708,"line_start":171,"line_end":171,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209713,"byte_end":209747,"line_start":172,"line_end":172,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209752,"byte_end":209790,"line_start":173,"line_end":173,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209795,"byte_end":209829,"line_start":174,"line_end":174,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209834,"byte_end":209866,"line_start":175,"line_end":175,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":209871,"byte_end":209878,"line_start":176,"line_end":176,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211062,"byte_end":211069,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"collect","qualname":"<GroupingMap<I>>::collect","value":"pub fn collect<C>(Self) -> HashMap<K, C> where C: Default + Extend<V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and collects the elements of each group in\n an instance of `C`. The iteration order is preserved when inserting elements. \n \n Return a `HashMap` associating the key of each group with the collection containing that group's elements.\n \n ```\n use itertools::Itertools;\n use std::collections::HashSet;\n \n let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .collect::<HashSet<_>>();\n \n assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and collects the elements of each group in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210184,"byte_end":210283,"line_start":188,"line_end":188,"column_start":5,"column_end":104}},{"value":"/ an instance of `C`. The iteration order is preserved when inserting elements. ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210288,"byte_end":210370,"line_start":189,"line_end":189,"column_start":5,"column_end":87}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210375,"byte_end":210379,"line_start":190,"line_end":190,"column_start":5,"column_end":9}},{"value":"/ Return a `HashMap` associating the key of each group with the collection containing that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210384,"byte_end":210494,"line_start":191,"line_end":191,"column_start":5,"column_end":115}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210499,"byte_end":210503,"line_start":192,"line_end":192,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210508,"byte_end":210515,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210520,"byte_end":210549,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashSet;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210554,"byte_end":210588,"line_start":195,"line_end":195,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210593,"byte_end":210597,"line_start":196,"line_end":196,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210602,"byte_end":210665,"line_start":197,"line_end":197,"column_start":5,"column_end":68}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210670,"byte_end":210711,"line_start":198,"line_end":198,"column_start":5,"column_end":46}},{"value":"/     .collect::<HashSet<_>>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210716,"byte_end":210749,"line_start":199,"line_end":199,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210754,"byte_end":210758,"line_start":200,"line_end":200,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210763,"byte_end":210841,"line_start":201,"line_end":201,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210846,"byte_end":210921,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":210926,"byte_end":211001,"line_start":203,"line_end":203,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211006,"byte_end":211038,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211043,"byte_end":211050,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212028,"byte_end":212031,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"max","qualname":"<GroupingMap<I>>::max","value":"pub fn max(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max();\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211366,"byte_end":211459,"line_start":218,"line_end":218,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211464,"byte_end":211468,"line_start":219,"line_end":219,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211473,"byte_end":211545,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211550,"byte_end":211554,"line_start":221,"line_end":221,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211559,"byte_end":211659,"line_start":222,"line_end":222,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211664,"byte_end":211668,"line_start":223,"line_end":223,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211673,"byte_end":211680,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211685,"byte_end":211714,"line_start":225,"line_end":225,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211719,"byte_end":211723,"line_start":226,"line_end":226,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211728,"byte_end":211786,"line_start":227,"line_end":227,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211791,"byte_end":211832,"line_start":228,"line_end":228,"column_start":5,"column_end":46}},{"value":"/     .max();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211837,"byte_end":211852,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211857,"byte_end":211861,"line_start":230,"line_end":230,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211866,"byte_end":211897,"line_start":231,"line_end":231,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211902,"byte_end":211932,"line_start":232,"line_end":232,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211937,"byte_end":211967,"line_start":233,"line_end":233,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":211972,"byte_end":212004,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212009,"byte_end":212016,"line_start":235,"line_end":235,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212885,"byte_end":212891,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"max_by","qualname":"<GroupingMap<I>>::max_by","value":"pub fn max_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group\n with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212142,"byte_end":212234,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212239,"byte_end":212293,"line_start":243,"line_end":243,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212298,"byte_end":212302,"line_start":244,"line_end":244,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212307,"byte_end":212379,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212384,"byte_end":212388,"line_start":246,"line_end":246,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212393,"byte_end":212493,"line_start":247,"line_end":247,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212498,"byte_end":212502,"line_start":248,"line_end":248,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212507,"byte_end":212514,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212519,"byte_end":212548,"line_start":250,"line_end":250,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212553,"byte_end":212557,"line_start":251,"line_end":251,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212562,"byte_end":212620,"line_start":252,"line_end":252,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212625,"byte_end":212666,"line_start":253,"line_end":253,"column_start":5,"column_end":46}},{"value":"/     .max_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212671,"byte_end":212710,"line_start":254,"line_end":254,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212715,"byte_end":212719,"line_start":255,"line_end":255,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212724,"byte_end":212754,"line_start":256,"line_end":256,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212759,"byte_end":212789,"line_start":257,"line_end":257,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212794,"byte_end":212824,"line_start":258,"line_end":258,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212829,"byte_end":212861,"line_start":259,"line_end":259,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":212866,"byte_end":212873,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213920,"byte_end":213930,"line_start":289,"line_end":289,"column_start":12,"column_end":22},"name":"max_by_key","qualname":"<GroupingMap<I>>::max_by_key","value":"pub fn max_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213173,"byte_end":213265,"line_start":270,"line_end":270,"column_start":5,"column_end":97}},{"value":"/ that gives the maximum from the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213270,"byte_end":213325,"line_start":271,"line_end":271,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213330,"byte_end":213334,"line_start":272,"line_end":272,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213339,"byte_end":213411,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213416,"byte_end":213420,"line_start":274,"line_end":274,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213425,"byte_end":213525,"line_start":275,"line_end":275,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213530,"byte_end":213534,"line_start":276,"line_end":276,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213539,"byte_end":213546,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213551,"byte_end":213580,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213585,"byte_end":213589,"line_start":279,"line_end":279,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213594,"byte_end":213652,"line_start":280,"line_end":280,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213657,"byte_end":213698,"line_start":281,"line_end":281,"column_start":5,"column_end":46}},{"value":"/     .max_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213703,"byte_end":213745,"line_start":282,"line_end":282,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213750,"byte_end":213754,"line_start":283,"line_end":283,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213759,"byte_end":213789,"line_start":284,"line_end":284,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213794,"byte_end":213824,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213829,"byte_end":213859,"line_start":286,"line_end":286,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213864,"byte_end":213896,"line_start":287,"line_end":287,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":213901,"byte_end":213908,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214776,"byte_end":214779,"line_start":314,"line_end":314,"column_start":12,"column_end":15},"name":"min","qualname":"<GroupingMap<I>>::min","value":"pub fn min(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min();\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214114,"byte_end":214207,"line_start":296,"line_end":296,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214212,"byte_end":214216,"line_start":297,"line_end":297,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214221,"byte_end":214294,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214299,"byte_end":214303,"line_start":299,"line_end":299,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214308,"byte_end":214408,"line_start":300,"line_end":300,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214413,"byte_end":214417,"line_start":301,"line_end":301,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214422,"byte_end":214429,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214434,"byte_end":214463,"line_start":303,"line_end":303,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214468,"byte_end":214472,"line_start":304,"line_end":304,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214477,"byte_end":214535,"line_start":305,"line_end":305,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214540,"byte_end":214581,"line_start":306,"line_end":306,"column_start":5,"column_end":46}},{"value":"/     .min();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214586,"byte_end":214601,"line_start":307,"line_end":307,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214606,"byte_end":214610,"line_start":308,"line_end":308,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214615,"byte_end":214645,"line_start":309,"line_end":309,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214650,"byte_end":214680,"line_start":310,"line_end":310,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214685,"byte_end":214715,"line_start":311,"line_end":311,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214720,"byte_end":214752,"line_start":312,"line_end":312,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214757,"byte_end":214764,"line_start":313,"line_end":313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215635,"byte_end":215641,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"min_by","qualname":"<GroupingMap<I>>::min_by","value":"pub fn min_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group\n with respect to the specified comparison function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214890,"byte_end":214982,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":214987,"byte_end":215041,"line_start":321,"line_end":321,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215046,"byte_end":215050,"line_start":322,"line_end":322,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215055,"byte_end":215128,"line_start":323,"line_end":323,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215133,"byte_end":215137,"line_start":324,"line_end":324,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215142,"byte_end":215242,"line_start":325,"line_end":325,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215247,"byte_end":215251,"line_start":326,"line_end":326,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215256,"byte_end":215263,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215268,"byte_end":215297,"line_start":328,"line_end":328,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215302,"byte_end":215306,"line_start":329,"line_end":329,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215311,"byte_end":215369,"line_start":330,"line_end":330,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215374,"byte_end":215415,"line_start":331,"line_end":331,"column_start":5,"column_end":46}},{"value":"/     .min_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215420,"byte_end":215459,"line_start":332,"line_end":332,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215464,"byte_end":215468,"line_start":333,"line_end":333,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215473,"byte_end":215504,"line_start":334,"line_end":334,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215509,"byte_end":215539,"line_start":335,"line_end":335,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215544,"byte_end":215574,"line_start":336,"line_end":336,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215579,"byte_end":215611,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215616,"byte_end":215623,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216672,"byte_end":216682,"line_start":367,"line_end":367,"column_start":12,"column_end":22},"name":"min_by_key","qualname":"<GroupingMap<I>>::min_by_key","value":"pub fn min_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the minimum from the specified function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 4);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":215923,"byte_end":216015,"line_start":348,"line_end":348,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum from the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216020,"byte_end":216075,"line_start":349,"line_end":349,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216080,"byte_end":216084,"line_start":350,"line_end":350,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216089,"byte_end":216162,"line_start":351,"line_end":351,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216167,"byte_end":216171,"line_start":352,"line_end":352,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216176,"byte_end":216276,"line_start":353,"line_end":353,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216281,"byte_end":216285,"line_start":354,"line_end":354,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216290,"byte_end":216297,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216302,"byte_end":216331,"line_start":356,"line_end":356,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216336,"byte_end":216340,"line_start":357,"line_end":357,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216345,"byte_end":216403,"line_start":358,"line_end":358,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216408,"byte_end":216449,"line_start":359,"line_end":359,"column_start":5,"column_end":46}},{"value":"/     .min_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216454,"byte_end":216496,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216501,"byte_end":216505,"line_start":361,"line_end":361,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216510,"byte_end":216541,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216546,"byte_end":216576,"line_start":363,"line_end":363,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216581,"byte_end":216611,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216616,"byte_end":216648,"line_start":365,"line_end":365,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216653,"byte_end":216660,"line_start":366,"line_end":366,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217974,"byte_end":217980,"line_start":401,"line_end":401,"column_start":12,"column_end":18},"name":"minmax","qualname":"<GroupingMap<I>>::minmax","value":"pub fn minmax(Self) -> HashMap<K, MinMaxResult<V>> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n See [.minmax()](crate::Itertools::minmax) for the non-grouping version.\n \n Differences from the non grouping version:\n - It never produces a `MinMaxResult::NoElements`\n - It doesn't have any speedup\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax();\n \n assert_eq!(lookup[&0], MinMax(3, 12));\n assert_eq!(lookup[&1], MinMax(1, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216866,"byte_end":216958,"line_start":374,"line_end":374,"column_start":5,"column_end":97}},{"value":"/ each group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216963,"byte_end":216978,"line_start":375,"line_end":375,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216983,"byte_end":216987,"line_start":376,"line_end":376,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":216992,"byte_end":217064,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217069,"byte_end":217142,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217147,"byte_end":217151,"line_start":379,"line_end":379,"column_start":5,"column_end":9}},{"value":"/ See [.minmax()](crate::Itertools::minmax) for the non-grouping version.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217156,"byte_end":217231,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217236,"byte_end":217240,"line_start":381,"line_end":381,"column_start":5,"column_end":9}},{"value":"/ Differences from the non grouping version:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217245,"byte_end":217291,"line_start":382,"line_end":382,"column_start":5,"column_end":51}},{"value":"/ - It never produces a `MinMaxResult::NoElements`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217296,"byte_end":217348,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"/ - It doesn't have any speedup","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217353,"byte_end":217386,"line_start":384,"line_end":384,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217391,"byte_end":217395,"line_start":385,"line_end":385,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217400,"byte_end":217512,"line_start":386,"line_end":386,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217517,"byte_end":217521,"line_start":387,"line_end":387,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217526,"byte_end":217533,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217538,"byte_end":217567,"line_start":389,"line_end":389,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217572,"byte_end":217626,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217631,"byte_end":217635,"line_start":391,"line_end":391,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217640,"byte_end":217695,"line_start":392,"line_end":392,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217700,"byte_end":217741,"line_start":393,"line_end":393,"column_start":5,"column_end":46}},{"value":"/     .minmax();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217746,"byte_end":217764,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217769,"byte_end":217773,"line_start":395,"line_end":395,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(3, 12));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217778,"byte_end":217820,"line_start":396,"line_end":396,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(1, 7));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217825,"byte_end":217866,"line_start":397,"line_end":397,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217871,"byte_end":217913,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217918,"byte_end":217950,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":217955,"byte_end":217962,"line_start":400,"line_end":400,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":219134,"byte_end":219143,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"minmax_by","qualname":"<GroupingMap<I>>::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(7, 1));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218108,"byte_end":218200,"line_start":407,"line_end":407,"column_start":5,"column_end":97}},{"value":"/ each group with respect to the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218205,"byte_end":218270,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218275,"byte_end":218279,"line_start":409,"line_end":409,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218284,"byte_end":218356,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218361,"byte_end":218434,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218439,"byte_end":218443,"line_start":412,"line_end":412,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218448,"byte_end":218522,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218527,"byte_end":218531,"line_start":414,"line_end":414,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218536,"byte_end":218648,"line_start":415,"line_end":415,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218653,"byte_end":218657,"line_start":416,"line_end":416,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218662,"byte_end":218669,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218674,"byte_end":218703,"line_start":418,"line_end":418,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218708,"byte_end":218762,"line_start":419,"line_end":419,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218767,"byte_end":218771,"line_start":420,"line_end":420,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218776,"byte_end":218831,"line_start":421,"line_end":421,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218836,"byte_end":218877,"line_start":422,"line_end":422,"column_start":5,"column_end":46}},{"value":"/     .minmax_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218882,"byte_end":218924,"line_start":423,"line_end":423,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218929,"byte_end":218933,"line_start":424,"line_end":424,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218938,"byte_end":218980,"line_start":425,"line_end":425,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(7, 1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":218985,"byte_end":219026,"line_start":426,"line_end":426,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":219031,"byte_end":219073,"line_start":427,"line_end":427,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":219078,"byte_end":219110,"line_start":428,"line_end":428,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":219115,"byte_end":219122,"line_start":429,"line_end":429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221244,"byte_end":221257,"line_start":480,"line_end":480,"column_start":12,"column_end":25},"name":"minmax_by_key","qualname":"<GroupingMap<I>>::minmax_by_key","value":"pub fn minmax_by_key<F, CK>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V) -> CK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the elements of each group\n that gives the minimum and maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(4, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the elements of each group","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220213,"byte_end":220305,"line_start":457,"line_end":457,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum and maximum from the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220310,"byte_end":220377,"line_start":458,"line_end":458,"column_start":5,"column_end":72}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220382,"byte_end":220386,"line_start":459,"line_end":459,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220391,"byte_end":220463,"line_start":460,"line_end":460,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220468,"byte_end":220541,"line_start":461,"line_end":461,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220546,"byte_end":220550,"line_start":462,"line_end":462,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220555,"byte_end":220629,"line_start":463,"line_end":463,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220634,"byte_end":220638,"line_start":464,"line_end":464,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220643,"byte_end":220755,"line_start":465,"line_end":465,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220760,"byte_end":220764,"line_start":466,"line_end":466,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220769,"byte_end":220776,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220781,"byte_end":220810,"line_start":468,"line_end":468,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220815,"byte_end":220869,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220874,"byte_end":220878,"line_start":470,"line_end":470,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220883,"byte_end":220938,"line_start":471,"line_end":471,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220943,"byte_end":220984,"line_start":472,"line_end":472,"column_start":5,"column_end":46}},{"value":"/     .minmax_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":220989,"byte_end":221034,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221039,"byte_end":221043,"line_start":474,"line_end":474,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221048,"byte_end":221090,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(4, 7));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221095,"byte_end":221136,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221141,"byte_end":221183,"line_start":477,"line_end":477,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221188,"byte_end":221220,"line_start":478,"line_end":478,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221225,"byte_end":221232,"line_start":479,"line_end":479,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222208,"byte_end":222211,"line_start":506,"line_end":506,"column_start":12,"column_end":15},"name":"sum","qualname":"<GroupingMap<I>>::sum","value":"pub fn sum(Self) -> HashMap<K, V> where V: Add<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and sums them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.\n It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.\n \n Returns a `HashMap` associating the key of each group with the sum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .sum();\n \n assert_eq!(lookup[&0], 3 + 9 + 12);\n assert_eq!(lookup[&1], 1 + 4 + 7);\n assert_eq!(lookup[&2], 5 + 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and sums them.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221462,"byte_end":221533,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221538,"byte_end":221542,"line_start":488,"line_end":488,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221547,"byte_end":221623,"line_start":489,"line_end":489,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221628,"byte_end":221709,"line_start":490,"line_end":490,"column_start":5,"column_end":86}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221714,"byte_end":221718,"line_start":491,"line_end":491,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the sum of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221723,"byte_end":221819,"line_start":492,"line_end":492,"column_start":5,"column_end":101}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221824,"byte_end":221828,"line_start":493,"line_end":493,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221833,"byte_end":221840,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221845,"byte_end":221874,"line_start":495,"line_end":495,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221879,"byte_end":221883,"line_start":496,"line_end":496,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221888,"byte_end":221946,"line_start":497,"line_end":497,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221951,"byte_end":221992,"line_start":498,"line_end":498,"column_start":5,"column_end":46}},{"value":"/     .sum();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":221997,"byte_end":222012,"line_start":499,"line_end":499,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222017,"byte_end":222021,"line_start":500,"line_end":500,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 9 + 12);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222026,"byte_end":222065,"line_start":501,"line_end":501,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222070,"byte_end":222108,"line_start":502,"line_end":502,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 + 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222113,"byte_end":222147,"line_start":503,"line_end":503,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222152,"byte_end":222184,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222189,"byte_end":222196,"line_start":505,"line_end":505,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":223103,"byte_end":223110,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"product","qualname":"<GroupingMap<I>>::product","value":"pub fn product(Self) -> HashMap<K, V> where V: Mul<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and multiply them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.\n It is more limited than `Iterator::product` since it doesn't use the `Product` trait.\n \n Returns a `HashMap` associating the key of each group with the product of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .product();\n \n assert_eq!(lookup[&0], 3 * 9 * 12);\n assert_eq!(lookup[&1], 1 * 4 * 7);\n assert_eq!(lookup[&2], 5 * 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and multiply them.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222337,"byte_end":222412,"line_start":512,"line_end":512,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222417,"byte_end":222421,"line_start":513,"line_end":513,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222426,"byte_end":222502,"line_start":514,"line_end":514,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::product` since it doesn't use the `Product` trait.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222507,"byte_end":222596,"line_start":515,"line_end":515,"column_start":5,"column_end":94}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222601,"byte_end":222605,"line_start":516,"line_end":516,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the product of that group's elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222610,"byte_end":222710,"line_start":517,"line_end":517,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222715,"byte_end":222719,"line_start":518,"line_end":518,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222724,"byte_end":222731,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222736,"byte_end":222765,"line_start":520,"line_end":520,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222770,"byte_end":222774,"line_start":521,"line_end":521,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222779,"byte_end":222837,"line_start":522,"line_end":522,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222842,"byte_end":222883,"line_start":523,"line_end":523,"column_start":5,"column_end":46}},{"value":"/     .product();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222888,"byte_end":222907,"line_start":524,"line_end":524,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222912,"byte_end":222916,"line_start":525,"line_end":525,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 * 9 * 12);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222921,"byte_end":222960,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 * 4 * 7);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":222965,"byte_end":223003,"line_start":527,"line_end":527,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 * 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":223008,"byte_end":223042,"line_start":528,"line_end":528,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":223047,"byte_end":223079,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":223084,"byte_end":223091,"line_start":530,"line_end":530,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1346},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224173,"byte_end":224176,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233625,"byte_end":233632,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":232935,"byte_end":232996,"line_start":275,"line_end":275,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":232997,"byte_end":233000,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ If the groups are consumed in their original order, or if each","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233001,"byte_end":233067,"line_start":277,"line_end":277,"column_start":1,"column_end":67}},{"value":"/ group is dropped without keeping it around, then `GroupBy` uses","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233068,"byte_end":233135,"line_start":278,"line_end":278,"column_start":1,"column_end":68}},{"value":"/ no allocations. It needs allocations only if several group iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233136,"byte_end":233208,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/ are alive at the same time.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233209,"byte_end":233240,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233241,"byte_end":233244,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233245,"byte_end":233313,"line_start":282,"line_end":282,"column_start":1,"column_end":69}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233314,"byte_end":233379,"line_start":283,"line_end":283,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233380,"byte_end":233447,"line_start":284,"line_end":284,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233448,"byte_end":233461,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233462,"byte_end":233465,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233466,"byte_end":233539,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":233540,"byte_end":233613,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1420},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235486,"byte_end":235492,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":1425}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Group iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235177,"byte_end":235225,"line_start":352,"line_end":352,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235226,"byte_end":235229,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(K, Group)`:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235230,"byte_end":235272,"line_start":354,"line_end":354,"column_start":1,"column_end":43}},{"value":"/ the group's key `K` and the group's iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235273,"byte_end":235322,"line_start":355,"line_end":355,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235323,"byte_end":235326,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235327,"byte_end":235400,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235401,"byte_end":235474,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1434},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236353,"byte_end":236358,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236246,"byte_end":236297,"line_start":390,"line_end":390,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236298,"byte_end":236301,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236302,"byte_end":236341,"line_start":392,"line_end":392,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238282,"byte_end":238292,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"/ `ChunkLazy` is the storage for a lazy chunking operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237630,"byte_end":237691,"line_start":451,"line_end":451,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237692,"byte_end":237695,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ `IntoChunks` behaves just like `GroupBy`: it is iterable, and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237696,"byte_end":237761,"line_start":453,"line_end":453,"column_start":1,"column_end":66}},{"value":"/ it only buffers if several chunk iterators are alive at the same time.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237762,"byte_end":237836,"line_start":454,"line_end":454,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237837,"byte_end":237840,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237841,"byte_end":237909,"line_start":456,"line_end":456,"column_start":1,"column_end":69}},{"value":"/ itself), because the chunk iterators need to borrow from this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237910,"byte_end":237975,"line_start":457,"line_end":457,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":237976,"byte_end":238043,"line_start":458,"line_end":458,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238044,"byte_end":238057,"line_start":459,"line_end":459,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238058,"byte_end":238061,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238062,"byte_end":238122,"line_start":461,"line_end":461,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238123,"byte_end":238126,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238127,"byte_end":238196,"line_start":463,"line_end":463,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238197,"byte_end":238270,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1471},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239402,"byte_end":239408,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":1474}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Chunk iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239152,"byte_end":239200,"line_start":504,"line_end":504,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239201,"byte_end":239204,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239205,"byte_end":239242,"line_start":506,"line_end":506,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239243,"byte_end":239246,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239247,"byte_end":239316,"line_start":508,"line_end":508,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239317,"byte_end":239390,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1481},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240119,"byte_end":240124,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single chunk.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240012,"byte_end":240063,"line_start":538,"line_end":538,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240064,"byte_end":240067,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240068,"byte_end":240107,"line_start":540,"line_end":540,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":1507},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":240799,"byte_end":240817,"line_start":4,"line_end":4,"column_start":11,"column_end":29},"name":"IntersperseElement","qualname":"::intersperse::IntersperseElement","value":"IntersperseElement<Item>","parent":null,"children":[{"krate":0,"index":1509}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":240833,"byte_end":240841,"line_start":5,"line_end":5,"column_start":8,"column_end":16},"name":"generate","qualname":"::intersperse::IntersperseElement::generate","value":"pub fn generate(&mut Self) -> Item","parent":{"krate":0,"index":1507},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3733},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":240900,"byte_end":240924,"line_start":9,"line_end":9,"column_start":12,"column_end":36},"name":"IntersperseElementSimple","qualname":"::intersperse::IntersperseElementSimple","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1513},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241361,"byte_end":241372,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"IntersperseWith<I, IntersperseElementSimple<<I as Iterator>::Item>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241088,"byte_end":241140,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241141,"byte_end":241190,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241191,"byte_end":241194,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241195,"byte_end":241233,"line_start":20,"line_end":20,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241234,"byte_end":241237,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241238,"byte_end":241267,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241268,"byte_end":241271,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](crate::Itertools::intersperse) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241272,"byte_end":241351,"line_start":24,"line_end":24,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3743},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":242163,"byte_end":242178,"line_start":50,"line_end":50,"column_start":12,"column_end":27},"name":"IntersperseWith","qualname":"::intersperse::IntersperseWith","value":"IntersperseWith {  }","parent":null,"children":[{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":3748}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241758,"byte_end":241832,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241833,"byte_end":241882,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241883,"byte_end":241886,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241887,"byte_end":241925,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241926,"byte_end":241929,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241930,"byte_end":241959,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241960,"byte_end":241963,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse_with()`](crate::Itertools::intersperse_with) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241964,"byte_end":242053,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":242054,"byte_end":242127,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1581},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247822,"byte_end":247828,"line_start":108,"line_end":108,"column_start":10,"column_end":16},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMergeBy<I, KMergeByLt>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247456,"byte_end":247548,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247549,"byte_end":247620,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247621,"byte_end":247624,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247625,"byte_end":247664,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247665,"byte_end":247668,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge()`](crate::Itertools::kmerge) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247669,"byte_end":247738,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247739,"byte_end":247812,"line_start":107,"line_end":107,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1583},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247870,"byte_end":247885,"line_start":110,"line_end":110,"column_start":11,"column_end":26},"name":"KMergePredicate","qualname":"::kmerge_impl::KMergePredicate","value":"KMergePredicate<T>","parent":null,"children":[{"krate":0,"index":1585}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247898,"byte_end":247909,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"kmerge_pred","qualname":"::kmerge_impl::KMergePredicate::kmerge_pred","value":"pub fn kmerge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":1583},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":247975,"byte_end":247985,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"KMergeByLt","qualname":"::kmerge_impl::KMergeByLt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1593},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248581,"byte_end":248587,"line_start":141,"line_end":141,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"pub fn kmerge<I>(I) -> KMerge<<I::Item as IntoIterator>::IntoIter> where\nI: IntoIterator, I::Item: IntoIterator,\n<<I as IntoIterator>::Item as IntoIterator>::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators using","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248262,"byte_end":248338,"line_start":129,"line_end":129,"column_start":1,"column_end":77}},{"value":"/ the ordering function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248339,"byte_end":248365,"line_start":130,"line_end":130,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248366,"byte_end":248369,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge()`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248370,"byte_end":248420,"line_start":132,"line_end":132,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248421,"byte_end":248424,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248425,"byte_end":248432,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ use itertools::kmerge;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248433,"byte_end":248459,"line_start":135,"line_end":135,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248460,"byte_end":248463,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ for elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248464,"byte_end":248535,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248536,"byte_end":248559,"line_start":138,"line_end":138,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248560,"byte_end":248565,"line_start":139,"line_end":139,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248566,"byte_end":248573,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1595},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249149,"byte_end":249157,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248824,"byte_end":248896,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/ according to an ordering function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248897,"byte_end":248935,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248936,"byte_end":248939,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248940,"byte_end":248979,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248980,"byte_end":248983,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge_by()`](crate::Itertools::kmerge_by) for more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248984,"byte_end":249046,"line_start":154,"line_end":154,"column_start":1,"column_end":63}},{"value":"/ information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249047,"byte_end":249063,"line_start":155,"line_end":155,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249064,"byte_end":249137,"line_start":156,"line_end":156,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1603},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249536,"byte_end":249545,"line_start":174,"line_end":174,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"pub fn kmerge_by<I, F>(I, F)\n-> KMergeBy<<I::Item as IntoIterator>::IntoIter, F> where I: IntoIterator,\nI::Item: IntoIterator,\nF: KMergePredicate<<<I as IntoIterator>::Item as IntoIterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249390,"byte_end":249461,"line_start":171,"line_end":171,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249462,"byte_end":249465,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge_by(less_than)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249466,"byte_end":249528,"line_start":173,"line_end":173,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1660},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":252821,"byte_end":252834,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"pub fn merge_join_by<I, J, F>(I, J, F)\n-> MergeJoinBy<I::IntoIter, J::IntoIter, F> where I: IntoIterator,\nJ: IntoIterator, F: FnMut(&I::Item, &J::Item) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":252624,"byte_end":252725,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":252726,"byte_end":252729,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":252730,"byte_end":252813,"line_start":10,"line_end":10,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1664},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253440,"byte_end":253451,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253172,"byte_end":253266,"line_start":24,"line_end":24,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253267,"byte_end":253270,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253271,"byte_end":253354,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253355,"byte_end":253428,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3786},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258503,"byte_end":258513,"line_start":8,"line_end":8,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":3784},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258480,"byte_end":258498,"line_start":7,"line_end":7,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3788},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258595,"byte_end":258605,"line_start":11,"line_end":11,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":3784},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258520,"byte_end":258590,"line_start":10,"line_end":10,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3791},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258718,"byte_end":258724,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":3784},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258615,"byte_end":258689,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258694,"byte_end":258713,"line_start":14,"line_end":14,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":3784},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258458,"byte_end":258470,"line_start":6,"line_end":6,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"pub enum MinMaxResult<T> { NoElements, OneElement(T), MinMax(T, T), }","parent":null,"children":[{"krate":0,"index":3786},{"krate":0,"index":3788},{"krate":0,"index":3791}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`.","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258287,"byte_end":258338,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258339,"byte_end":258342,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`.minmax()`](crate::Itertools::minmax) for more detail.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258343,"byte_end":258407,"line_start":4,"line_end":4,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259542,"byte_end":259553,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"pub fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258771,"byte_end":258848,"line_start":19,"line_end":19,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258853,"byte_end":258921,"line_start":20,"line_end":20,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258926,"byte_end":258996,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259001,"byte_end":259071,"line_start":22,"line_end":22,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259076,"byte_end":259117,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259122,"byte_end":259125,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259130,"byte_end":259144,"line_start":25,"line_end":25,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259149,"byte_end":259152,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259157,"byte_end":259164,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259169,"byte_end":259241,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259246,"byte_end":259249,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259254,"byte_end":259296,"line_start":30,"line_end":30,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259301,"byte_end":259339,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259344,"byte_end":259347,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259352,"byte_end":259378,"line_start":33,"line_end":33,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259383,"byte_end":259429,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259434,"byte_end":259437,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259442,"byte_end":259467,"line_start":36,"line_end":36,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259472,"byte_end":259518,"line_start":37,"line_end":37,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":259523,"byte_end":259530,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3809},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262345,"byte_end":262354,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":3811},{"krate":0,"index":3812},{"krate":0,"index":3813}],"decl_id":null,"docs":" See [`multipeek()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multipeek()`] for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262264,"byte_end":262309,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1711},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262580,"byte_end":262589,"line_start":18,"line_end":18,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"pub fn multipeek<I>(I) -> MultiPeek<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262450,"byte_end":262524,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262525,"byte_end":262572,"line_start":17,"line_end":17,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262871,"byte_end":262881,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"pub fn reset_peek(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[{"value":"/ Reset the peeking “cursor”","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262825,"byte_end":262859,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":263145,"byte_end":263149,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[{"value":"/ Works exactly like `.next()` with the only difference that it doesn't","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262965,"byte_end":263038,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ advance itself. `.peek()` can be called multiple times, to peek","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":263043,"byte_end":263110,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/ further ahead.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":263115,"byte_end":263133,"line_start":40,"line_end":40,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3820},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264898,"byte_end":264906,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":3823},{"krate":0,"index":3824},{"krate":0,"index":3825},{"krate":0,"index":3826}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264558,"byte_end":264633,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264634,"byte_end":264671,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264672,"byte_end":264675,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264676,"byte_end":264715,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264716,"byte_end":264719,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](crate::Itertools::pad_using) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264720,"byte_end":264795,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":264813,"byte_end":264886,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":266905,"byte_end":266912,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"PeekNth","qualname":"::peek_nth::PeekNth","value":"PeekNth {  }","parent":null,"children":[{"krate":0,"index":3833},{"krate":0,"index":3834}],"decl_id":null,"docs":" See [`peek_nth()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`peek_nth()`] for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":266825,"byte_end":266869,"line_start":6,"line_end":6,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1774},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267381,"byte_end":267389,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"peek_nth","qualname":"::peek_nth::peek_nth","value":"pub fn peek_nth<I>(I) -> PeekNth<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`\n method allowing the user to `peek` at a value several iterations forward\n without advancing the base iterator.","sig":null,"attributes":[{"value":"/ A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":266991,"byte_end":267068,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ method allowing the user to `peek` at a value several iterations forward","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267069,"byte_end":267145,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ without advancing the base iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267146,"byte_end":267186,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267187,"byte_end":267190,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This differs from `multipeek` in that subsequent calls to `peek` or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267191,"byte_end":267262,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ `peek_nth` will always return the same value until `next` is called","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267263,"byte_end":267334,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ (making `reset_peek` unnecessary).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267335,"byte_end":267373,"line_start":22,"line_end":22,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267680,"byte_end":267684,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"peek","qualname":"<PeekNth<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like the `peek` method in `std::iter::Peekable`\n","sig":null,"attributes":[{"value":"/ Works exactly like the `peek` method in `std::iter::Peekable`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267603,"byte_end":267668,"line_start":37,"line_end":37,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268509,"byte_end":268517,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"peek_nth","qualname":"<PeekNth<I>>::peek_nth","value":"pub fn peek_nth(&mut Self, usize) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the `nth` value without advancing the iterator.","sig":null,"attributes":[{"value":"/ Returns a reference to the `nth` value without advancing the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267754,"byte_end":267828,"line_start":42,"line_end":42,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267833,"byte_end":267836,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267841,"byte_end":267855,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267860,"byte_end":267863,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267868,"byte_end":267884,"line_start":46,"line_end":46,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267889,"byte_end":267892,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267897,"byte_end":267908,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use itertools::peek_nth;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267913,"byte_end":267941,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267946,"byte_end":267949,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ let xs = vec![1,2,3];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267954,"byte_end":267979,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/ let mut iter = peek_nth(xs.iter());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267984,"byte_end":268023,"line_start":52,"line_end":52,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268028,"byte_end":268031,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268036,"byte_end":268080,"line_start":54,"line_end":54,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268085,"byte_end":268123,"line_start":55,"line_end":55,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268128,"byte_end":268131,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ // The iterator does not advance even if we call `peek_nth` multiple times","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268136,"byte_end":268214,"line_start":57,"line_end":57,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268219,"byte_end":268263,"line_start":58,"line_end":58,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.peek_nth(1), Some(&&3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268268,"byte_end":268312,"line_start":59,"line_end":59,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268317,"byte_end":268355,"line_start":60,"line_end":60,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268360,"byte_end":268363,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Calling `peek_nth` past the end of the iterator will return `None`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268368,"byte_end":268441,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(iter.peek_nth(1), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268446,"byte_end":268485,"line_start":63,"line_end":63,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268490,"byte_end":268497,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1803},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269887,"byte_end":269898,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1804}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269491,"byte_end":269570,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269571,"byte_end":269574,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269575,"byte_end":269646,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269647,"byte_end":269672,"line_start":9,"line_end":9,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269673,"byte_end":269676,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269677,"byte_end":269748,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269749,"byte_end":269828,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269829,"byte_end":269876,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270082,"byte_end":270094,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"pub fn peeking_next<F>(&mut Self, F) -> Option<Self::Item> where\nF: FnOnce(&Self::Item) -> bool","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269916,"byte_end":269990,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269995,"byte_end":270055,"line_start":16,"line_end":16,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270060,"byte_end":270074,"line_start":17,"line_end":17,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1818},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271602,"byte_end":271618,"line_start":79,"line_end":79,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271342,"byte_end":271414,"line_start":74,"line_end":74,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271415,"byte_end":271418,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271419,"byte_end":271490,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271491,"byte_end":271516,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271517,"byte_end":271590,"line_start":78,"line_end":78,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1848},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274144,"byte_end":274156,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"Permutations","qualname":"::permutations::Permutations","value":"Permutations {  }","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851}],"decl_id":null,"docs":" An iterator adaptor that iterates through all the `k`-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates through all the `k`-permutations of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":273860,"byte_end":273937,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":273938,"byte_end":273968,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":273969,"byte_end":273972,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.permutations()`](crate::Itertools::permutations) for","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":273973,"byte_end":274036,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274037,"byte_end":274058,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274059,"byte_end":274132,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1912},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282284,"byte_end":282292,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Powerset","qualname":"::powerset::Powerset","value":"Powerset {  }","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915}],"decl_id":null,"docs":" An iterator to iterate through the powerset of the elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through the powerset of the elements from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282035,"byte_end":282116,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282117,"byte_end":282120,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`.powerset()`](crate::Itertools::powerset) for more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282121,"byte_end":282181,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282182,"byte_end":282198,"line_start":12,"line_end":12,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282199,"byte_end":282272,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3916},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284571,"byte_end":284585,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":3920},{"krate":0,"index":3921}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284267,"byte_end":284331,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284332,"byte_end":284368,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284369,"byte_end":284372,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](crate::process_results), see its docs","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284373,"byte_end":284442,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284443,"byte_end":284468,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284469,"byte_end":284542,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1939},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286466,"byte_end":286481,"line_start":70,"line_end":70,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"pub fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>,\nF: FnOnce(ProcessResults<, I::IntoIter, E>) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285133,"byte_end":285210,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285211,"byte_end":285254,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285255,"byte_end":285258,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285259,"byte_end":285336,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285337,"byte_end":285386,"line_start":39,"line_end":39,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285387,"byte_end":285390,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285391,"byte_end":285468,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285469,"byte_end":285549,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285550,"byte_end":285608,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285609,"byte_end":285612,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285613,"byte_end":285685,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285686,"byte_end":285754,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285755,"byte_end":285771,"line_start":47,"line_end":47,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285772,"byte_end":285775,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285776,"byte_end":285844,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285845,"byte_end":285861,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285862,"byte_end":285865,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285866,"byte_end":285879,"line_start":52,"line_end":52,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285880,"byte_end":285883,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285884,"byte_end":285891,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285892,"byte_end":285927,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285928,"byte_end":285931,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285932,"byte_end":285971,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285972,"byte_end":285975,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":285976,"byte_end":286033,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286034,"byte_end":286102,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286103,"byte_end":286106,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286107,"byte_end":286206,"line_start":62,"line_end":62,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286207,"byte_end":286210,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286211,"byte_end":286293,"line_start":64,"line_end":64,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286294,"byte_end":286378,"line_start":65,"line_end":65,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286379,"byte_end":286382,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286383,"byte_end":286416,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286417,"byte_end":286450,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":286451,"byte_end":286458,"line_start":69,"line_end":69,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3927},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287028,"byte_end":287036,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":3929},{"krate":0,"index":3930}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting multiple","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":286860,"byte_end":286912,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ items in front of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":286913,"byte_end":286948,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":286949,"byte_end":286952,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":286953,"byte_end":286992,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1953},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287239,"byte_end":287249,"line_start":19,"line_end":19,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"pub fn put_back_n<I>(I) -> PutBackN<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back multiple values to the front","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287091,"byte_end":287165,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the iteration.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287166,"byte_end":287187,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287188,"byte_end":287191,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287192,"byte_end":287231,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287832,"byte_end":287840,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"/ Puts x in front of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287440,"byte_end":287476,"line_start":29,"line_end":29,"column_start":5,"column_end":41}},{"value":"/ The values are yielded in order of the most recently put back","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287481,"byte_end":287546,"line_start":30,"line_end":30,"column_start":5,"column_end":70}},{"value":"/ values first.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287551,"byte_end":287568,"line_start":31,"line_end":31,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287573,"byte_end":287576,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287581,"byte_end":287592,"line_start":33,"line_end":33,"column_start":5,"column_end":16}},{"value":"/ use itertools::put_back_n;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287597,"byte_end":287627,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287632,"byte_end":287635,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let mut it = put_back_n(1..5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287640,"byte_end":287674,"line_start":36,"line_end":36,"column_start":5,"column_end":39}},{"value":"/ it.next();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287679,"byte_end":287693,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/ it.put_back(1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287698,"byte_end":287717,"line_start":38,"line_end":38,"column_start":5,"column_end":24}},{"value":"/ it.put_back(0);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287722,"byte_end":287741,"line_start":39,"line_end":39,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287746,"byte_end":287749,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ assert!(itertools::equal(it, 0..5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287754,"byte_end":287794,"line_start":41,"line_end":41,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287799,"byte_end":287806,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287811,"byte_end":287820,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3937},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288429,"byte_end":288435,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":3939}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[{"value":"/ A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288327,"byte_end":288400,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":3939},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288477,"byte_end":288483,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":3937},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[{"value":"/ The boxed iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288445,"byte_end":288468,"line_start":9,"line_end":9,"column_start":5,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1978},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289752,"byte_end":289758,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"pub fn rciter<I>(I) -> RcIter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[{"value":"/ Return an iterator inside a `Rc<RefCell<_>>` wrapper.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288504,"byte_end":288561,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288562,"byte_end":288565,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The returned `RcIter` can be cloned, and each clone will refer back to the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288566,"byte_end":288644,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ same original iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288645,"byte_end":288672,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288673,"byte_end":288676,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `RcIter` allows doing interesting things like using `.zip()` on an iterator with","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288677,"byte_end":288761,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ itself, at the cost of runtime borrow checking which may have a performance","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288762,"byte_end":288841,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ penalty.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288842,"byte_end":288854,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288855,"byte_end":288858,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288859,"byte_end":288901,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288902,"byte_end":288905,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288906,"byte_end":288913,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use itertools::rciter;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288914,"byte_end":288940,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ use itertools::zip;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288941,"byte_end":288964,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288965,"byte_end":288968,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // In this example a range iterator is created and we iterate it using","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":288969,"byte_end":289043,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ // three separate handles (two of them given to zip).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289044,"byte_end":289101,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ // We also use the IntoIterator implementation for `&RcIter`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289102,"byte_end":289167,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289168,"byte_end":289171,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut iter = rciter(0..9);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289172,"byte_end":289204,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ let mut z = zip(&iter, &iter);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289205,"byte_end":289239,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289240,"byte_end":289243,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(z.next(), Some((0, 1)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289244,"byte_end":289283,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((2, 3)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289284,"byte_end":289323,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((4, 5)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289324,"byte_end":289363,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(iter.next(), Some(6));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289364,"byte_end":289401,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(z.next(), Some((7, 8)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289402,"byte_end":289441,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289442,"byte_end":289473,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289474,"byte_end":289481,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289482,"byte_end":289485,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ **Panics** in iterator methods if a borrow error is encountered in the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289486,"byte_end":289560,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ iterator methods. It can only happen if the `RcIter` is reentered in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289561,"byte_end":289633,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ `.next()`, i.e. if it somehow participates in an “iterator knot”","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289634,"byte_end":289706,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ where it is an adaptor of itself.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289707,"byte_end":289744,"line_start":46,"line_end":46,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3944},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291306,"byte_end":291313,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":3946},{"krate":0,"index":3947}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291078,"byte_end":291138,"line_start":3,"line_end":3,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291139,"byte_end":291142,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](crate::repeat_n) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291143,"byte_end":291204,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291205,"byte_end":291270,"line_start":6,"line_end":6,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2004},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291430,"byte_end":291438,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"pub fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291356,"byte_end":291422,"line_start":13,"line_end":13,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3954},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295576,"byte_end":295586,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":3956}],"decl_id":null,"docs":" See [`repeat_call`](crate::repeat_call) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](crate::repeat_call) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295415,"byte_end":295480,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295498,"byte_end":295564,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2050},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296345,"byte_end":296356,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"pub fn repeat_call<F, A>(F) -> RepeatCall<F> where F: FnMut() -> A","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295684,"byte_end":295753,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295754,"byte_end":295774,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295775,"byte_end":295778,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295779,"byte_end":295839,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295840,"byte_end":295843,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295844,"byte_end":295851,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295852,"byte_end":295883,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295884,"byte_end":295913,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295914,"byte_end":295951,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295952,"byte_end":295955,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295956,"byte_end":296013,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296014,"byte_end":296017,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296018,"byte_end":296061,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296062,"byte_end":296122,"line_start":33,"line_end":33,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296123,"byte_end":296153,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296154,"byte_end":296159,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296160,"byte_end":296163,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296164,"byte_end":296192,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296193,"byte_end":296227,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296228,"byte_end":296255,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296256,"byte_end":296262,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296263,"byte_end":296270,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296271,"byte_end":296337,"line_start":42,"line_end":42,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2059},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297960,"byte_end":297966,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"pub fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: FnMut(&mut St) ->\nOption<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296730,"byte_end":296805,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296806,"byte_end":296874,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296875,"byte_end":296878,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296879,"byte_end":296952,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296953,"byte_end":297025,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297026,"byte_end":297029,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an [`Iterator`]","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297030,"byte_end":297103,"line_start":70,"line_end":70,"column_start":1,"column_end":74}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297104,"byte_end":297160,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297161,"byte_end":297164,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297165,"byte_end":297172,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297173,"byte_end":297233,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297234,"byte_end":297286,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297287,"byte_end":297290,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297291,"byte_end":297317,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297318,"byte_end":297321,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let mut fibonacci = unfold((1u32, 1u32), |(x1, x2)| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297322,"byte_end":297379,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297380,"byte_end":297431,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(*x2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297432,"byte_end":297474,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297475,"byte_end":297478,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297479,"byte_end":297525,"line_start":83,"line_end":83,"column_start":1,"column_end":47}},{"value":"/     let ret = *x1;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297526,"byte_end":297548,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/     *x1 = *x2;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297549,"byte_end":297567,"line_start":85,"line_end":85,"column_start":1,"column_end":19}},{"value":"/     *x2 = next;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297568,"byte_end":297587,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297588,"byte_end":297591,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297592,"byte_end":297660,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/     if ret == *x1 && ret > 1 {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297661,"byte_end":297695,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/         None","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297696,"byte_end":297712,"line_start":90,"line_end":90,"column_start":1,"column_end":17}},{"value":"/     } else {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297713,"byte_end":297729,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/         Some(ret)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297730,"byte_end":297751,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/     }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297752,"byte_end":297761,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297762,"byte_end":297769,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297770,"byte_end":297773,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297774,"byte_end":297829,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297830,"byte_end":297890,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297891,"byte_end":297944,"line_start":98,"line_end":98,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":297945,"byte_end":297952,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3962},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298385,"byte_end":298391,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":3965},{"krate":0,"index":3966}],"decl_id":null,"docs":" See [`unfold`](crate::unfold) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](crate::unfold) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298235,"byte_end":298290,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298308,"byte_end":298373,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3966},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298499,"byte_end":298504,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":3962},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298415,"byte_end":298490,"line_start":120,"line_end":120,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3971},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299010,"byte_end":299017,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":3974},{"krate":0,"index":3975}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298722,"byte_end":298799,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298800,"byte_end":298803,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`](crate::iterate) function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298804,"byte_end":298879,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298880,"byte_end":298915,"line_start":138,"line_end":138,"column_start":1,"column_end":36}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298933,"byte_end":298998,"line_start":140,"line_end":140,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2081},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299774,"byte_end":299781,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"pub fn iterate<St, F>(St, F) -> Iterate<St, F> where F: FnMut(&St) -> St","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299542,"byte_end":299630,"line_start":169,"line_end":169,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299631,"byte_end":299634,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299635,"byte_end":299642,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299643,"byte_end":299670,"line_start":172,"line_end":172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299671,"byte_end":299674,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299675,"byte_end":299758,"line_start":174,"line_end":174,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299759,"byte_end":299766,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3991},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300490,"byte_end":300493,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":3993},{"krate":0,"index":3994}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"/ One half of an iterator pair where both return the same elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300250,"byte_end":300319,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300320,"byte_end":300323,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`.tee()`](crate::Itertools::tee) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300324,"byte_end":300387,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300388,"byte_end":300461,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2122},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302560,"byte_end":302576,"line_start":15,"line_end":15,"column_start":11,"column_end":27},"name":"HomogeneousTuple","qualname":"::tuple_impl::HomogeneousTuple","value":"HomogeneousTuple: TupleCollect","parent":null,"children":[],"decl_id":null,"docs":" Implemented for homogeneous tuples of size up to 4.\n","sig":null,"attributes":[{"value":"/ Implemented for homogeneous tuples of size up to 4.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302494,"byte_end":302549,"line_start":14,"line_end":14,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":3998},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302812,"byte_end":302823,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":4000},{"krate":0,"index":4001}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302649,"byte_end":302689,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302690,"byte_end":302693,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302694,"byte_end":302745,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ [`Tuples::into_buffer()`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302746,"byte_end":302776,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4008},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304072,"byte_end":304078,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":4011},{"krate":0,"index":4012}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303828,"byte_end":303895,"line_start":77,"line_end":77,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303896,"byte_end":303899,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303900,"byte_end":303969,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303987,"byte_end":304060,"line_start":81,"line_end":81,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305142,"byte_end":305153,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"pub fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304773,"byte_end":304862,"line_start":116,"line_end":116,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304867,"byte_end":304870,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304875,"byte_end":304882,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304887,"byte_end":304916,"line_start":119,"line_end":119,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304921,"byte_end":304924,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304929,"byte_end":304964,"line_start":121,"line_end":121,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304969,"byte_end":305014,"line_start":122,"line_end":122,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305019,"byte_end":305053,"line_start":123,"line_end":123,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305058,"byte_end":305118,"line_start":124,"line_end":124,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305123,"byte_end":305130,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4017},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305511,"byte_end":305523,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":4020},{"krate":0,"index":4021}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305225,"byte_end":305309,"line_start":132,"line_end":132,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305310,"byte_end":305313,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](crate::Itertools::tuple_windows) for more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305314,"byte_end":305384,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/ information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305385,"byte_end":305401,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":305402,"byte_end":305475,"line_start":136,"line_end":136,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4030},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307372,"byte_end":307392,"line_start":205,"line_end":205,"column_start":12,"column_end":32},"name":"CircularTupleWindows","qualname":"::tuple_impl::CircularTupleWindows","value":"CircularTupleWindows {  }","parent":null,"children":[{"krate":0,"index":4033},{"krate":0,"index":4034}],"decl_id":null,"docs":" An iterator over all windows,wrapping back to the first elements when the\n window would otherwise exceed the length of the iterator, producing tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all windows,wrapping back to the first elements when the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":306979,"byte_end":307056,"line_start":197,"line_end":197,"column_start":1,"column_end":78}},{"value":"/ window would otherwise exceed the length of the iterator, producing tuples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307057,"byte_end":307135,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/ of a specific size.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307136,"byte_end":307159,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307160,"byte_end":307163,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See [`.circular_tuple_windows()`](crate::Itertools::circular_tuple_windows) for more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307164,"byte_end":307252,"line_start":201,"line_end":201,"column_start":1,"column_end":89}},{"value":"/ information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307253,"byte_end":307269,"line_start":202,"line_end":202,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307270,"byte_end":307343,"line_start":203,"line_end":203,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2171},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308210,"byte_end":308222,"line_start":239,"line_end":239,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2176},{"krate":0,"index":2178},{"krate":0,"index":2179}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2172},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308241,"byte_end":308245,"line_start":240,"line_end":240,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2173},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308256,"byte_end":308262,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308341,"byte_end":308358,"line_start":243,"line_end":243,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"pub fn collect_from_iter<I>(I, &mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308469,"byte_end":308493,"line_start":246,"line_end":246,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"pub fn collect_from_iter_no_buf<I>(I) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308580,"byte_end":308589,"line_start":249,"line_end":249,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"pub fn num_items() -> usize","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308610,"byte_end":308625,"line_start":251,"line_end":251,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"pub fn left_shift_push(&mut Self, Self::Item)","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4219},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311204,"byte_end":311216,"line_start":10,"line_end":10,"column_start":16,"column_end":28},"name":"DuplicatesBy","qualname":"::duplicates_impl::private::DuplicatesBy","value":"DuplicatesBy {  }","parent":null,"children":[{"krate":0,"index":4223},{"krate":0,"index":4224}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311115,"byte_end":311188,"line_start":9,"line_end":9,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2226},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314416,"byte_end":314425,"line_start":113,"line_end":113,"column_start":15,"column_end":24},"name":"KeyMethod","qualname":"::duplicates_impl::private::KeyMethod","value":"KeyMethod<K, V>","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"decl_id":null,"docs":" A keying method for use with `DuplicatesBy`\n","sig":null,"attributes":[{"value":"/ A keying method for use with `DuplicatesBy`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314354,"byte_end":314401,"line_start":112,"line_end":112,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2229},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314447,"byte_end":314456,"line_start":114,"line_end":114,"column_start":14,"column_end":23},"name":"Container","qualname":"::duplicates_impl::private::KeyMethod::Container","value":"type Container: KeyXorValue<K, V>;","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314489,"byte_end":314493,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"make","qualname":"::duplicates_impl::private::KeyMethod::make","value":"pub fn make(&mut Self, V) -> Self::Container","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2231},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314640,"byte_end":314644,"line_start":120,"line_end":120,"column_start":16,"column_end":20},"name":"ById","qualname":"::duplicates_impl::private::ById","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply the identity function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply the identity function to elements before checking them for equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314546,"byte_end":314624,"line_start":119,"line_end":119,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2237},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314922,"byte_end":314926,"line_start":130,"line_end":130,"column_start":16,"column_end":20},"name":"ByFn","qualname":"::duplicates_impl::private::ByFn","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply a user-supplied function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply a user-supplied function to elements before checking them for equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314825,"byte_end":314906,"line_start":129,"line_end":129,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2253},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315516,"byte_end":315524,"line_start":150,"line_end":150,"column_start":16,"column_end":24},"name":"KeyValue","qualname":"::duplicates_impl::private::KeyValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2265},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315794,"byte_end":315803,"line_start":163,"line_end":163,"column_start":16,"column_end":25},"name":"JustValue","qualname":"::duplicates_impl::private::JustValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2274},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316278,"byte_end":316290,"line_start":181,"line_end":181,"column_start":10,"column_end":22},"name":"DuplicatesBy","qualname":"::duplicates_impl::DuplicatesBy","value":"private::DuplicatesBy<I, V, private::ByFn<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter for duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter for duplicate elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316049,"byte_end":316106,"line_start":177,"line_end":177,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316107,"byte_end":316110,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates_by()`](crate::Itertools::duplicates_by) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316111,"byte_end":316194,"line_start":179,"line_end":179,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316195,"byte_end":316268,"line_start":180,"line_end":180,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":2282},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316740,"byte_end":316750,"line_start":196,"line_end":196,"column_start":10,"column_end":20},"name":"Duplicates","qualname":"::duplicates_impl::Duplicates","value":"private::DuplicatesBy<I, <I as Iterator>::Item, private::ById>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316591,"byte_end":316648,"line_start":193,"line_end":193,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316649,"byte_end":316652,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates()`](crate::Itertools::duplicates) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":316653,"byte_end":316730,"line_start":195,"line_end":195,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4241},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317378,"byte_end":317386,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317141,"byte_end":317198,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317199,"byte_end":317202,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.unique_by()`](crate::Itertools::unique) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317203,"byte_end":317275,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317293,"byte_end":317366,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4254},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":321111,"byte_end":321117,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":4256}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320877,"byte_end":320934,"line_start":151,"line_end":151,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320935,"byte_end":320938,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ See [`.unique()`](crate::Itertools::unique) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320939,"byte_end":321008,"line_start":153,"line_end":153,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":321026,"byte_end":321099,"line_start":155,"line_end":155,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2359},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321891,"byte_end":321903,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":2361},{"krate":0,"index":2362}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`].","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321596,"byte_end":321663,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321664,"byte_end":321667,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321668,"byte_end":321717,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321718,"byte_end":321721,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321722,"byte_end":321805,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":321806,"byte_end":321879,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4264},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322650,"byte_end":322655,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":4262},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322615,"byte_end":322645,"line_start":39,"line_end":39,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4267},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322720,"byte_end":322726,"line_start":42,"line_end":42,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":4262},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322664,"byte_end":322715,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4270},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322769,"byte_end":322773,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":4262},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322735,"byte_end":322764,"line_start":43,"line_end":43,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4273},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322816,"byte_end":322820,"line_start":46,"line_end":46,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":4262},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322782,"byte_end":322811,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":4262},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322597,"byte_end":322605,"line_start":38,"line_end":38,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"pub enum Position<T> { First(T), Middle(T), Last(T), Only(T), }","parent":null,"children":[{"krate":0,"index":4264},{"krate":0,"index":4267},{"krate":0,"index":4270},{"krate":0,"index":4273}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322352,"byte_end":322390,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322391,"byte_end":322458,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322459,"byte_end":322462,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322463,"byte_end":322546,"line_start":36,"line_end":36,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322893,"byte_end":322903,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322854,"byte_end":322881,"line_start":50,"line_end":50,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4290},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324753,"byte_end":324758,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":4293},{"krate":0,"index":4294}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324504,"byte_end":324569,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324570,"byte_end":324573,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](crate::Itertools::zip_eq) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324574,"byte_end":324643,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324668,"byte_end":324741,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2383},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325169,"byte_end":325175,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"pub fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324790,"byte_end":324827,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324828,"byte_end":324831,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324832,"byte_end":324891,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324892,"byte_end":324895,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::zip_eq`](crate::Itertools::zip_eq).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324896,"byte_end":324984,"line_start":17,"line_end":17,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324985,"byte_end":324988,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324989,"byte_end":324996,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":324997,"byte_end":325023,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325024,"byte_end":325027,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325028,"byte_end":325059,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325060,"byte_end":325123,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325124,"byte_end":325147,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325148,"byte_end":325153,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325154,"byte_end":325161,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4303},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326611,"byte_end":326621,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":4306},{"krate":0,"index":4307}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326318,"byte_end":326383,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326384,"byte_end":326387,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326388,"byte_end":326417,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326418,"byte_end":326421,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](crate::Itertools::zip_longest) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326422,"byte_end":326501,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326526,"byte_end":326599,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4316},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328718,"byte_end":328721,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4318}],"decl_id":null,"docs":" See [`multizip`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`] for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328566,"byte_end":328608,"line_start":3,"line_end":3,"column_start":1,"column_end":43}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328633,"byte_end":328706,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2442},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329850,"byte_end":329858,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"pub fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328740,"byte_end":328832,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328833,"byte_end":328836,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328837,"byte_end":328927,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ implement [`IntoIterator`]) and yields elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328928,"byte_end":328979,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":328980,"byte_end":329028,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329029,"byte_end":329032,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329033,"byte_end":329125,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329126,"byte_end":329163,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329164,"byte_end":329167,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Note:** The result of this macro is a value of a named type (`Zip<(I, J,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329168,"byte_end":329246,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ ..)>` of each component iterator `I, J, ...`) if each component iterator is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329247,"byte_end":329326,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ nameable.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329327,"byte_end":329340,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329341,"byte_end":329344,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Prefer [`izip!()`] over `multizip` for the performance benefits of using the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329345,"byte_end":329425,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ standard library `.zip()`. Prefer `multizip` if a nameable type is needed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329426,"byte_end":329504,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329505,"byte_end":329508,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329509,"byte_end":329516,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329517,"byte_end":329545,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329546,"byte_end":329549,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // iterate over three sequences side-by-side","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329550,"byte_end":329598,"line_start":29,"line_end":29,"column_start":1,"column_end":49}},{"value":"/ let mut results = [0, 0, 0, 0];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329599,"byte_end":329634,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ let inputs = [3, 7, 9, 6];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329635,"byte_end":329665,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329666,"byte_end":329669,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ for (r, index, input) in multizip((&mut results, 0..10, &inputs)) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329670,"byte_end":329741,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/     *r = index * 10 + input;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329742,"byte_end":329774,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329775,"byte_end":329780,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329781,"byte_end":329784,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(results, [0 + 3, 10 + 7, 29, 36]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329785,"byte_end":329834,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/ziptuple.rs","byte_start":329835,"byte_end":329842,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":2449},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12640,"byte_end":12649,"line_start":427,"line_end":427,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2483},{"krate":0,"index":2488},{"krate":0,"index":2492},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2558},{"krate":0,"index":2561},{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2578},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2592},{"krate":0,"index":2597},{"krate":0,"index":2601},{"krate":0,"index":2604},{"krate":0,"index":2616},{"krate":0,"index":2627},{"krate":0,"index":2630},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2653},{"krate":0,"index":2659},{"krate":0,"index":2662},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2673},{"krate":0,"index":2676},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2687},{"krate":0,"index":2692},{"krate":0,"index":2696},{"krate":0,"index":2699},{"krate":0,"index":2704},{"krate":0,"index":2708},{"krate":0,"index":2721},{"krate":0,"index":2735},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2753}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[{"value":"/ An [`Iterator`] blanket implementation that provides extra adaptors and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12020,"byte_end":12095,"line_start":414,"line_end":414,"column_start":1,"column_end":76}},{"value":"/ methods.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12096,"byte_end":12108,"line_start":415,"line_end":415,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12109,"byte_end":12112,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12113,"byte_end":12190,"line_start":417,"line_end":417,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12195,"byte_end":12263,"line_start":419,"line_end":419,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12264,"byte_end":12337,"line_start":420,"line_end":420,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](Itertools::interleave)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12338,"byte_end":12399,"line_start":421,"line_end":421,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12400,"byte_end":12403,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12404,"byte_end":12477,"line_start":423,"line_end":423,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12478,"byte_end":12524,"line_start":424,"line_end":424,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](Itertools::next_tuple) is an example and the first regular","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12525,"byte_end":12605,"line_start":425,"line_end":425,"column_start":1,"column_end":81}},{"value":"/ method in the list.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12606,"byte_end":12629,"line_start":426,"line_end":426,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13048,"byte_end":13058,"line_start":442,"line_end":442,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"pub fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12684,"byte_end":12750,"line_start":430,"line_end":430,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12755,"byte_end":12758,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12763,"byte_end":12805,"line_start":432,"line_end":432,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12810,"byte_end":12813,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12818,"byte_end":12847,"line_start":434,"line_end":434,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12852,"byte_end":12855,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12860,"byte_end":12867,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12872,"byte_end":12901,"line_start":437,"line_end":437,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12906,"byte_end":12909,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12914,"byte_end":12959,"line_start":439,"line_end":439,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12964,"byte_end":13028,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13033,"byte_end":13040,"line_start":441,"line_end":441,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13581,"byte_end":13600,"line_start":460,"line_end":460,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"pub fn interleave_shortest<J>(Self, J)\n-> InterleaveShortest<Self, J::IntoIter> where J: IntoIterator<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13236,"byte_end":13312,"line_start":449,"line_end":449,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13317,"byte_end":13325,"line_start":450,"line_end":450,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13330,"byte_end":13333,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13338,"byte_end":13380,"line_start":452,"line_end":452,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13385,"byte_end":13388,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13393,"byte_end":13400,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13405,"byte_end":13434,"line_start":455,"line_end":455,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13439,"byte_end":13442,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13447,"byte_end":13501,"line_start":457,"line_end":457,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13506,"byte_end":13561,"line_start":458,"line_end":458,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13566,"byte_end":13573,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14179,"byte_end":14190,"line_start":479,"line_end":479,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13817,"byte_end":13869,"line_start":467,"line_end":467,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13874,"byte_end":13923,"line_start":468,"line_end":468,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13928,"byte_end":13931,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13936,"byte_end":13978,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13983,"byte_end":13986,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":13991,"byte_end":14020,"line_start":472,"line_end":472,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14025,"byte_end":14028,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14033,"byte_end":14040,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14045,"byte_end":14074,"line_start":475,"line_end":475,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14079,"byte_end":14082,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14087,"byte_end":14159,"line_start":477,"line_end":477,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14164,"byte_end":14171,"line_start":478,"line_end":478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2455},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14817,"byte_end":14833,"line_start":500,"line_end":500,"column_start":8,"column_end":24},"name":"intersperse_with","qualname":"::Itertools::intersperse_with","value":"pub fn intersperse_with<F>(Self, F) -> IntersperseWith<Self, F> where\nSelf: Sized, F: FnMut() -> Self::Item","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14363,"byte_end":14437,"line_start":486,"line_end":486,"column_start":5,"column_end":79}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14442,"byte_end":14491,"line_start":487,"line_end":487,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14496,"byte_end":14499,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14504,"byte_end":14546,"line_start":489,"line_end":489,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14551,"byte_end":14554,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14559,"byte_end":14588,"line_start":491,"line_end":491,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14593,"byte_end":14596,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14601,"byte_end":14608,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14613,"byte_end":14642,"line_start":494,"line_end":494,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14647,"byte_end":14650,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ let mut i = 10;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14655,"byte_end":14674,"line_start":496,"line_end":496,"column_start":5,"column_end":24}},{"value":"/ itertools::assert_equal((0..3).intersperse_with(|| { i -= 1; i }), vec![0, 9, 1, 8, 2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14679,"byte_end":14771,"line_start":497,"line_end":497,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(i, 8);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14776,"byte_end":14797,"line_start":498,"line_end":498,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":14802,"byte_end":14809,"line_start":499,"line_end":499,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16073,"byte_end":16084,"line_start":534,"line_end":534,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"pub fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15013,"byte_end":15083,"line_start":507,"line_end":507,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15088,"byte_end":15157,"line_start":508,"line_end":508,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15162,"byte_end":15165,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15170,"byte_end":15199,"line_start":510,"line_end":510,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15204,"byte_end":15207,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ As long as neither input iterator is exhausted yet, it yields two values","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15212,"byte_end":15288,"line_start":512,"line_end":512,"column_start":5,"column_end":81}},{"value":"/ via `EitherOrBoth::Both`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15293,"byte_end":15322,"line_start":513,"line_end":513,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15327,"byte_end":15330,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ When the parameter iterator is exhausted, it only yields a value from the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15335,"byte_end":15412,"line_start":515,"line_end":515,"column_start":5,"column_end":82}},{"value":"/ `self` iterator via `EitherOrBoth::Left`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15417,"byte_end":15462,"line_start":516,"line_end":516,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15467,"byte_end":15470,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ When the `self` iterator is exhausted, it only yields a value from the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15475,"byte_end":15549,"line_start":518,"line_end":518,"column_start":5,"column_end":79}},{"value":"/ parameter iterator via `EitherOrBoth::Right`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15554,"byte_end":15603,"line_start":519,"line_end":519,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15608,"byte_end":15611,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15616,"byte_end":15691,"line_start":521,"line_end":521,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15696,"byte_end":15719,"line_start":522,"line_end":522,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15724,"byte_end":15727,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15732,"byte_end":15760,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](EitherOrBoth).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15765,"byte_end":15821,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15826,"byte_end":15829,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15834,"byte_end":15845,"line_start":527,"line_end":527,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15850,"byte_end":15897,"line_start":528,"line_end":528,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15902,"byte_end":15931,"line_start":529,"line_end":529,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15936,"byte_end":15974,"line_start":530,"line_end":530,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":15979,"byte_end":16039,"line_start":531,"line_end":531,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16044,"byte_end":16051,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16056,"byte_end":16065,"line_start":533,"line_end":533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16522,"byte_end":16528,"line_start":547,"line_end":547,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"pub fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16269,"byte_end":16339,"line_start":541,"line_end":541,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16344,"byte_end":16400,"line_start":542,"line_end":542,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16405,"byte_end":16408,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16413,"byte_end":16483,"line_start":544,"line_end":544,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16488,"byte_end":16500,"line_start":545,"line_end":545,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16505,"byte_end":16514,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2461},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17444,"byte_end":17452,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"pub fn batching<B, F>(Self, F) -> Batching<Self, F> where F: FnMut(&mut Self)\n-> Option<B>, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16678,"byte_end":16752,"line_start":554,"line_end":554,"column_start":5,"column_end":75}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16757,"byte_end":16831,"line_start":555,"line_end":555,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16836,"byte_end":16862,"line_start":556,"line_end":556,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16867,"byte_end":16870,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16875,"byte_end":16908,"line_start":558,"line_end":558,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16913,"byte_end":16916,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16921,"byte_end":16928,"line_start":560,"line_end":560,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16933,"byte_end":16962,"line_start":561,"line_end":561,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16967,"byte_end":16970,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":16975,"byte_end":17023,"line_start":563,"line_end":563,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17028,"byte_end":17064,"line_start":564,"line_end":564,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17069,"byte_end":17101,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17106,"byte_end":17138,"line_start":566,"line_end":566,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17143,"byte_end":17190,"line_start":567,"line_end":567,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17195,"byte_end":17231,"line_start":568,"line_end":568,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17236,"byte_end":17283,"line_start":569,"line_end":569,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17288,"byte_end":17308,"line_start":570,"line_end":570,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17313,"byte_end":17329,"line_start":571,"line_end":571,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17334,"byte_end":17348,"line_start":572,"line_end":572,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17353,"byte_end":17356,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17361,"byte_end":17416,"line_start":574,"line_end":574,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17421,"byte_end":17428,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17433,"byte_end":17436,"line_start":576,"line_end":576,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19183,"byte_end":19191,"line_start":619,"line_end":619,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"pub fn group_by<K, F>(Self, F) -> GroupBy<K, Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> K, K: PartialEq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can group iterator elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17619,"byte_end":17677,"line_start":584,"line_end":584,"column_start":5,"column_end":63}},{"value":"/ Consecutive elements that map to the same key (“runs”), are assigned","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17682,"byte_end":17758,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/ to the same group.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17763,"byte_end":17785,"line_start":586,"line_end":586,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17790,"byte_end":17793,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17798,"byte_end":17859,"line_start":588,"line_end":588,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17864,"byte_end":17867,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ If the groups are consumed in order, or if each group's iterator is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17872,"byte_end":17943,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"/ dropped without keeping it around, then `GroupBy` uses no","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":17948,"byte_end":18009,"line_start":591,"line_end":591,"column_start":5,"column_end":66}},{"value":"/ allocations.  It needs allocations only if several group iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18014,"byte_end":18084,"line_start":592,"line_end":592,"column_start":5,"column_end":75}},{"value":"/ are alive at the same time.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18089,"byte_end":18120,"line_start":593,"line_end":593,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18125,"byte_end":18128,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18133,"byte_end":18201,"line_start":595,"line_end":595,"column_start":5,"column_end":73}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18206,"byte_end":18271,"line_start":596,"line_end":596,"column_start":5,"column_end":70}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18276,"byte_end":18343,"line_start":597,"line_end":597,"column_start":5,"column_end":72}},{"value":"/ iterated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18348,"byte_end":18361,"line_start":598,"line_end":598,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18366,"byte_end":18369,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(K, Group)`: the group's key and the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18374,"byte_end":18440,"line_start":600,"line_end":600,"column_start":5,"column_end":71}},{"value":"/ group iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18445,"byte_end":18464,"line_start":601,"line_end":601,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18469,"byte_end":18472,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18477,"byte_end":18484,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18489,"byte_end":18518,"line_start":604,"line_end":604,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18523,"byte_end":18526,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ // group data into runs of larger than zero or not.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18531,"byte_end":18586,"line_start":606,"line_end":606,"column_start":5,"column_end":60}},{"value":"/ let data = vec![1, 3, -2, -2, 1, 0, 1, 2];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18591,"byte_end":18637,"line_start":607,"line_end":607,"column_start":5,"column_end":51}},{"value":"/ // groups:     |---->|------>|--------->|","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18642,"byte_end":18687,"line_start":608,"line_end":608,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18692,"byte_end":18695,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `GroupBy` is iterable","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18700,"byte_end":18763,"line_start":610,"line_end":610,"column_start":5,"column_end":68}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18768,"byte_end":18838,"line_start":611,"line_end":611,"column_start":5,"column_end":75}},{"value":"/ let mut data_grouped = Vec::new();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18843,"byte_end":18881,"line_start":612,"line_end":612,"column_start":5,"column_end":43}},{"value":"/ for (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18886,"byte_end":18955,"line_start":613,"line_end":613,"column_start":5,"column_end":74}},{"value":"/     data_grouped.push((key, group.collect()));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":18960,"byte_end":19010,"line_start":614,"line_end":614,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19015,"byte_end":19020,"line_start":615,"line_end":615,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(data_grouped, vec![(true, vec![1, 3]), (false, vec![-2, -2]), (true, vec![1, 0, 1, 2])]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19025,"byte_end":19129,"line_start":616,"line_end":616,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19134,"byte_end":19141,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19146,"byte_end":19175,"line_start":618,"line_end":618,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20472,"byte_end":20478,"line_start":655,"line_end":655,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"pub fn chunks(Self, usize) -> IntoChunks<Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can chunk the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19385,"byte_end":19438,"line_start":627,"line_end":627,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19443,"byte_end":19446,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Yield subiterators (chunks) that each yield a fixed number elements,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19451,"byte_end":19523,"line_start":629,"line_end":629,"column_start":5,"column_end":77}},{"value":"/ determined by `size`. The last chunk will be shorter if there aren't","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19528,"byte_end":19600,"line_start":630,"line_end":630,"column_start":5,"column_end":77}},{"value":"/ enough elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19605,"byte_end":19625,"line_start":631,"line_end":631,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19630,"byte_end":19633,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ `IntoChunks` is based on `GroupBy`: it is iterable (implements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19638,"byte_end":19704,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/ `IntoIterator`, **not** `Iterator`), and it only buffers if several","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19709,"byte_end":19780,"line_start":634,"line_end":634,"column_start":5,"column_end":76}},{"value":"/ chunk iterators are alive at the same time.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19785,"byte_end":19832,"line_start":635,"line_end":635,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19837,"byte_end":19840,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19845,"byte_end":19905,"line_start":637,"line_end":637,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19910,"byte_end":19913,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `size` is 0.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19918,"byte_end":19948,"line_start":639,"line_end":639,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19953,"byte_end":19956,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19961,"byte_end":19968,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":19973,"byte_end":20002,"line_start":642,"line_end":642,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20007,"byte_end":20010,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 2, -2, 6, 0, 3, 1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20015,"byte_end":20060,"line_start":644,"line_end":644,"column_start":5,"column_end":50}},{"value":"/ //chunk size=3 |------->|-------->|--->|","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20065,"byte_end":20109,"line_start":645,"line_end":645,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20114,"byte_end":20117,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `IntoChunks` is iterable","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20122,"byte_end":20188,"line_start":647,"line_end":647,"column_start":5,"column_end":71}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20193,"byte_end":20263,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/ for chunk in &data.into_iter().chunks(3) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20268,"byte_end":20314,"line_start":649,"line_end":649,"column_start":5,"column_end":51}},{"value":"/     // Check that the sum of each chunk is 4.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20319,"byte_end":20368,"line_start":650,"line_end":650,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(4, chunk.sum());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20373,"byte_end":20408,"line_start":651,"line_end":651,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20413,"byte_end":20418,"line_start":652,"line_end":652,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20423,"byte_end":20430,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20435,"byte_end":20464,"line_start":654,"line_end":654,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21872,"byte_end":21885,"line_start":695,"line_end":695,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"pub fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: traits::HomogeneousTuple, T::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20634,"byte_end":20704,"line_start":662,"line_end":662,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20709,"byte_end":20739,"line_start":663,"line_end":663,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20744,"byte_end":20747,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20752,"byte_end":20820,"line_start":665,"line_end":665,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20825,"byte_end":20896,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20901,"byte_end":20959,"line_start":667,"line_end":667,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20964,"byte_end":20967,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20972,"byte_end":20979,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":20984,"byte_end":21013,"line_start":670,"line_end":670,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21018,"byte_end":21045,"line_start":671,"line_end":671,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21050,"byte_end":21053,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ // pairwise iteration","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21058,"byte_end":21083,"line_start":673,"line_end":673,"column_start":5,"column_end":30}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21088,"byte_end":21130,"line_start":674,"line_end":674,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21135,"byte_end":21158,"line_start":675,"line_end":675,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21163,"byte_end":21168,"line_start":676,"line_end":676,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21173,"byte_end":21221,"line_start":677,"line_end":677,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21226,"byte_end":21229,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21234,"byte_end":21274,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21279,"byte_end":21322,"line_start":680,"line_end":680,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21327,"byte_end":21370,"line_start":681,"line_end":681,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21375,"byte_end":21407,"line_start":682,"line_end":682,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21412,"byte_end":21415,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21420,"byte_end":21452,"line_start":684,"line_end":684,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21457,"byte_end":21506,"line_start":685,"line_end":685,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21511,"byte_end":21571,"line_start":686,"line_end":686,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21576,"byte_end":21579,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21584,"byte_end":21629,"line_start":688,"line_end":688,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21634,"byte_end":21666,"line_start":689,"line_end":689,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21671,"byte_end":21695,"line_start":690,"line_end":690,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21700,"byte_end":21703,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21708,"byte_end":21787,"line_start":692,"line_end":692,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21792,"byte_end":21852,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":21857,"byte_end":21864,"line_start":694,"line_end":694,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23285,"byte_end":23307,"line_start":730,"line_end":730,"column_start":8,"column_end":30},"name":"circular_tuple_windows","qualname":"::Itertools::circular_tuple_windows","value":"pub fn circular_tuple_windows<T>(Self) -> CircularTupleWindows<Self, T> where\nSelf: Sized + Clone + Iterator<Item = T::Item> + ExactSizeIterator,\nT: tuple_impl::TupleCollect + Clone, T::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator over all windows, wrapping back to the first\n elements when the window would otherwise exceed the length of the\n iterator, producing tuples of a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator over all windows, wrapping back to the first","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22103,"byte_end":22170,"line_start":703,"line_end":703,"column_start":5,"column_end":72}},{"value":"/ elements when the window would otherwise exceed the length of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22175,"byte_end":22244,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ iterator, producing tuples of a specific size (up to 4).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22249,"byte_end":22309,"line_start":705,"line_end":705,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22314,"byte_end":22317,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ `circular_tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22322,"byte_end":22399,"line_start":707,"line_end":707,"column_start":5,"column_end":82}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22404,"byte_end":22475,"line_start":708,"line_end":708,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22480,"byte_end":22538,"line_start":709,"line_end":709,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22543,"byte_end":22546,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22551,"byte_end":22558,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22563,"byte_end":22592,"line_start":712,"line_end":712,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22597,"byte_end":22624,"line_start":713,"line_end":713,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).circular_tuple_windows() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22629,"byte_end":22680,"line_start":714,"line_end":714,"column_start":5,"column_end":56}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22685,"byte_end":22708,"line_start":715,"line_end":715,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22713,"byte_end":22718,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4), (4, 1)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22723,"byte_end":22779,"line_start":717,"line_end":717,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22784,"byte_end":22787,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).circular_tuple_windows();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22792,"byte_end":22841,"line_start":719,"line_end":719,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22846,"byte_end":22889,"line_start":720,"line_end":720,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22894,"byte_end":22937,"line_start":721,"line_end":721,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((3, 4, 1)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22942,"byte_end":22985,"line_start":722,"line_end":722,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 1, 2)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":22990,"byte_end":23033,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23038,"byte_end":23070,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23075,"byte_end":23078,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23083,"byte_end":23115,"line_start":726,"line_end":726,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).circular_tuple_windows::<(_, _, _)>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23120,"byte_end":23178,"line_start":727,"line_end":727,"column_start":5,"column_end":63}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23183,"byte_end":23265,"line_start":728,"line_end":728,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23270,"byte_end":23277,"line_start":729,"line_end":729,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24624,"byte_end":24630,"line_start":768,"line_end":768,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"pub fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23577,"byte_end":23650,"line_start":737,"line_end":737,"column_start":5,"column_end":78}},{"value":"/ (up to 4).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23655,"byte_end":23669,"line_start":738,"line_end":738,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23674,"byte_end":23677,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](Itertools::next_tuple).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23682,"byte_end":23747,"line_start":740,"line_end":740,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23752,"byte_end":23755,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23760,"byte_end":23767,"line_start":742,"line_end":742,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23772,"byte_end":23801,"line_start":743,"line_end":743,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23806,"byte_end":23833,"line_start":744,"line_end":744,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23838,"byte_end":23873,"line_start":745,"line_end":745,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23878,"byte_end":23901,"line_start":746,"line_end":746,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23906,"byte_end":23911,"line_start":747,"line_end":747,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23916,"byte_end":23956,"line_start":748,"line_end":748,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23961,"byte_end":23964,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":23969,"byte_end":24002,"line_start":750,"line_end":750,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24007,"byte_end":24050,"line_start":751,"line_end":751,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24055,"byte_end":24098,"line_start":752,"line_end":752,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24103,"byte_end":24135,"line_start":753,"line_end":753,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24140,"byte_end":24143,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24148,"byte_end":24180,"line_start":755,"line_end":755,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24185,"byte_end":24227,"line_start":756,"line_end":756,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24232,"byte_end":24292,"line_start":757,"line_end":757,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24297,"byte_end":24300,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24305,"byte_end":24350,"line_start":759,"line_end":759,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24355,"byte_end":24381,"line_start":760,"line_end":760,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24386,"byte_end":24410,"line_start":761,"line_end":761,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24415,"byte_end":24418,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24423,"byte_end":24489,"line_start":763,"line_end":763,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24494,"byte_end":24554,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24559,"byte_end":24566,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24571,"byte_end":24574,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24579,"byte_end":24616,"line_start":767,"line_end":767,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25441,"byte_end":25444,"line_start":793,"line_end":793,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"pub fn tee(Self) -> (Tee<Self>, Tee<Self>) where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"/ Split into an iterator pair that both yield all elements from","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24805,"byte_end":24870,"line_start":775,"line_end":775,"column_start":5,"column_end":70}},{"value":"/ the original iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24875,"byte_end":24901,"line_start":776,"line_end":776,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24906,"byte_end":24909,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ **Note:** If the iterator is clonable, prefer using that instead","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24914,"byte_end":24982,"line_start":778,"line_end":778,"column_start":5,"column_end":73}},{"value":"/ of using this method. It is likely to be more efficient.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":24987,"byte_end":25047,"line_start":779,"line_end":779,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25052,"byte_end":25055,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25060,"byte_end":25102,"line_start":781,"line_end":781,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25107,"byte_end":25110,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25115,"byte_end":25122,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25127,"byte_end":25156,"line_start":784,"line_end":784,"column_start":5,"column_end":34}},{"value":"/ let xs = vec![0, 1, 2, 3];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25161,"byte_end":25191,"line_start":785,"line_end":785,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25196,"byte_end":25199,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ let (mut t1, t2) = xs.into_iter().tee();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25204,"byte_end":25248,"line_start":787,"line_end":787,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(t1.next(), Some(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25253,"byte_end":25301,"line_start":788,"line_end":788,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(t2, 0..4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25306,"byte_end":25344,"line_start":789,"line_end":789,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(t1, 1..4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25349,"byte_end":25387,"line_start":790,"line_end":790,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25392,"byte_end":25399,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25404,"byte_end":25433,"line_start":792,"line_end":792,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26175,"byte_end":26179,"line_start":818,"line_end":818,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"pub fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25576,"byte_end":25651,"line_start":800,"line_end":800,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25656,"byte_end":25679,"line_start":801,"line_end":801,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25684,"byte_end":25687,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25692,"byte_end":25767,"line_start":803,"line_end":803,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25772,"byte_end":25815,"line_start":804,"line_end":804,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25820,"byte_end":25823,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25828,"byte_end":25870,"line_start":806,"line_end":806,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25875,"byte_end":25878,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25883,"byte_end":25915,"line_start":808,"line_end":808,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25920,"byte_end":25923,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25928,"byte_end":25935,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25940,"byte_end":25969,"line_start":811,"line_end":811,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25974,"byte_end":25977,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":25982,"byte_end":26010,"line_start":813,"line_end":813,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26015,"byte_end":26062,"line_start":814,"line_end":814,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26067,"byte_end":26074,"line_start":815,"line_end":815,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26079,"byte_end":26142,"line_start":816,"line_end":816,"column_start":5,"column_end":68}},{"value":"allow(deprecated)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26147,"byte_end":26167,"line_start":817,"line_end":817,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26489,"byte_end":26497,"line_start":831,"line_end":831,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"pub fn map_into<R>(Self) -> MapInto<Self, R> where Self: Sized,\nSelf::Item: Into<R>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the [`Into`] trait.","sig":null,"attributes":[{"value":"/ Convert each item of the iterator using the [`Into`] trait.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26285,"byte_end":26348,"line_start":824,"line_end":824,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26353,"byte_end":26356,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26361,"byte_end":26372,"line_start":826,"line_end":826,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26377,"byte_end":26406,"line_start":827,"line_end":827,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26411,"byte_end":26414,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ (1i32..42i32).map_into::<f64>().collect_vec();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26419,"byte_end":26469,"line_start":829,"line_end":829,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26474,"byte_end":26481,"line_start":830,"line_end":830,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26752,"byte_end":26763,"line_start":840,"line_end":840,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"pub fn map_results<F, T, U, E>(Self, F) -> MapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" See [`.map_ok()`](Itertools::map_ok).\n","sig":null,"attributes":[{"value":"/ See [`.map_ok()`](Itertools::map_ok).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26639,"byte_end":26680,"line_start":838,"line_end":838,"column_start":5,"column_end":46}},{"value":"deprecated(note = \"Use .map_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26685,"byte_end":26744,"line_start":839,"line_end":839,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27343,"byte_end":27349,"line_start":858,"line_end":858,"column_start":8,"column_end":14},"name":"map_ok","qualname":"::Itertools::map_ok","value":"pub fn map_ok<F, T, U, E>(Self, F) -> MapOk<Self, F> where Self: Iterator<Item\n= Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":26937,"byte_end":27001,"line_start":847,"line_end":847,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27006,"byte_end":27063,"line_start":848,"line_end":848,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27068,"byte_end":27082,"line_start":849,"line_end":849,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27087,"byte_end":27090,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27095,"byte_end":27102,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27107,"byte_end":27136,"line_start":852,"line_end":852,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27141,"byte_end":27144,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27149,"byte_end":27198,"line_start":854,"line_end":854,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_ok(|i| i + 1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27203,"byte_end":27252,"line_start":855,"line_end":855,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27257,"byte_end":27323,"line_start":856,"line_end":856,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27328,"byte_end":27335,"line_start":857,"line_end":857,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27939,"byte_end":27948,"line_start":876,"line_end":876,"column_start":8,"column_end":17},"name":"filter_ok","qualname":"::Itertools::filter_ok","value":"pub fn filter_ok<F, T, E>(Self, F) -> FilterOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(&T) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters every `Result::Ok`\n value with the provided closure. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters every `Result::Ok`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27534,"byte_end":27596,"line_start":865,"line_end":865,"column_start":5,"column_end":67}},{"value":"/ value with the provided closure. `Result::Err` values are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27601,"byte_end":27662,"line_start":866,"line_end":866,"column_start":5,"column_end":66}},{"value":"/ unchanged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27667,"byte_end":27681,"line_start":867,"line_end":867,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27686,"byte_end":27689,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27694,"byte_end":27701,"line_start":869,"line_end":869,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27706,"byte_end":27735,"line_start":870,"line_end":870,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27740,"byte_end":27743,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27748,"byte_end":27797,"line_start":872,"line_end":872,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_ok(|&i| i > 20);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27802,"byte_end":27856,"line_start":873,"line_end":873,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(22), Err(false)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27861,"byte_end":27919,"line_start":874,"line_end":874,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":27924,"byte_end":27931,"line_start":875,"line_end":875,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28596,"byte_end":28609,"line_start":894,"line_end":894,"column_start":8,"column_end":21},"name":"filter_map_ok","qualname":"::Itertools::filter_map_ok","value":"pub fn filter_map_ok<F, T, U, E>(Self, F) -> FilterMapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> Option<U>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters and transforms every\n `Result::Ok` value with the provided closure. `Result::Err`\n values are unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters and transforms every","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28140,"byte_end":28204,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/ `Result::Ok` value with the provided closure. `Result::Err`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28209,"byte_end":28272,"line_start":884,"line_end":884,"column_start":5,"column_end":68}},{"value":"/ values are unchanged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28277,"byte_end":28302,"line_start":885,"line_end":885,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28307,"byte_end":28310,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28315,"byte_end":28322,"line_start":887,"line_end":887,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28327,"byte_end":28356,"line_start":888,"line_end":888,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28361,"byte_end":28364,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28369,"byte_end":28418,"line_start":890,"line_end":890,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_map_ok(|i| if i > 20 { Some(i * 2) } else { None });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28423,"byte_end":28513,"line_start":891,"line_end":891,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(it, vec![Ok(44), Err(false)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28518,"byte_end":28576,"line_start":892,"line_end":892,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28581,"byte_end":28588,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29617,"byte_end":29627,"line_start":918,"line_end":918,"column_start":8,"column_end":18},"name":"flatten_ok","qualname":"::Itertools::flatten_ok","value":"pub fn flatten_ok<T, E>(Self) -> FlattenOk<Self, T, E> where\nSelf: Iterator<Item = Result<T, E>> + Sized, T: IntoIterator","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens every `Result::Ok` value into\n a series of `Result::Ok` values. `Result::Err` values are unchanged.\n \n This is useful when you have some common error type for your crate and\n need to propogate it upwards, but the `Result::Ok` case needs to be flattened.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens every `Result::Ok` value into","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28815,"byte_end":28889,"line_start":901,"line_end":901,"column_start":5,"column_end":79}},{"value":"/ a series of `Result::Ok` values. `Result::Err` values are unchanged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28894,"byte_end":28966,"line_start":902,"line_end":902,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28971,"byte_end":28975,"line_start":903,"line_end":903,"column_start":5,"column_end":9}},{"value":"/ This is useful when you have some common error type for your crate and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":28980,"byte_end":29054,"line_start":904,"line_end":904,"column_start":5,"column_end":79}},{"value":"/ need to propogate it upwards, but the `Result::Ok` case needs to be flattened.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29059,"byte_end":29141,"line_start":905,"line_end":905,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29146,"byte_end":29149,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29154,"byte_end":29161,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29166,"byte_end":29195,"line_start":908,"line_end":908,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29200,"byte_end":29203,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(0..2), Err(false), Ok(2..4)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29208,"byte_end":29261,"line_start":910,"line_end":910,"column_start":5,"column_end":58}},{"value":"/ let it = input.iter().cloned().flatten_ok();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29266,"byte_end":29314,"line_start":911,"line_end":911,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it.clone(), vec![Ok(0), Ok(1), Err(false), Ok(2), Ok(3)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29319,"byte_end":29405,"line_start":912,"line_end":912,"column_start":5,"column_end":91}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29410,"byte_end":29414,"line_start":913,"line_end":913,"column_start":5,"column_end":9}},{"value":"/ // This can also be used to propogate errors when collecting.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29419,"byte_end":29484,"line_start":914,"line_end":914,"column_start":5,"column_end":70}},{"value":"/ let output_result: Result<Vec<i32>, bool> = it.collect();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29489,"byte_end":29550,"line_start":915,"line_end":915,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(output_result, Err(false));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29555,"byte_end":29597,"line_start":916,"line_end":916,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29602,"byte_end":29609,"line_start":917,"line_end":917,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30276,"byte_end":30281,"line_start":939,"line_end":939,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"pub fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29808,"byte_end":29876,"line_start":925,"line_end":925,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29881,"byte_end":29953,"line_start":926,"line_end":926,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29958,"byte_end":29979,"line_start":927,"line_end":927,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29984,"byte_end":29987,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":29992,"byte_end":30034,"line_start":929,"line_end":929,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30039,"byte_end":30042,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30047,"byte_end":30054,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30059,"byte_end":30088,"line_start":932,"line_end":932,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30093,"byte_end":30096,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30101,"byte_end":30129,"line_start":934,"line_end":934,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30134,"byte_end":30162,"line_start":935,"line_end":935,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30167,"byte_end":30191,"line_start":936,"line_end":936,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30196,"byte_end":30256,"line_start":937,"line_end":937,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30261,"byte_end":30268,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31078,"byte_end":31086,"line_start":963,"line_end":963,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"pub fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30487,"byte_end":30562,"line_start":947,"line_end":947,"column_start":5,"column_end":80}},{"value":"/ This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30567,"byte_end":30653,"line_start":948,"line_end":948,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30658,"byte_end":30661,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30666,"byte_end":30724,"line_start":950,"line_end":950,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30729,"byte_end":30732,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30737,"byte_end":30779,"line_start":952,"line_end":952,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30784,"byte_end":30787,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30792,"byte_end":30799,"line_start":954,"line_end":954,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30804,"byte_end":30833,"line_start":955,"line_end":955,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30838,"byte_end":30841,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30846,"byte_end":30882,"line_start":957,"line_end":957,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30887,"byte_end":30923,"line_start":958,"line_end":958,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30928,"byte_end":30974,"line_start":959,"line_end":959,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":30979,"byte_end":31057,"line_start":960,"line_end":960,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31062,"byte_end":31069,"line_start":961,"line_end":961,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32599,"byte_end":32612,"line_start":999,"line_end":999,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"pub fn merge_join_by<J, F>(Self, J, F) -> MergeJoinBy<Self, J::IntoIter, F>\nwhere J: IntoIterator, F: FnMut(&Self::Item, &J::Item) -> std::cmp::Ordering,\nSelf: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"/ Create an iterator that merges items from both this and the specified","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31372,"byte_end":31445,"line_start":971,"line_end":971,"column_start":5,"column_end":78}},{"value":"/ iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31450,"byte_end":31482,"line_start":972,"line_end":972,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31487,"byte_end":31490,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ It chooses whether to pair elements based on the `Ordering` returned by the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31495,"byte_end":31574,"line_start":974,"line_end":974,"column_start":5,"column_end":84}},{"value":"/ specified compare function. At any point, inspecting the tip of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31579,"byte_end":31650,"line_start":975,"line_end":975,"column_start":5,"column_end":76}},{"value":"/ iterators `I` and `J` as items `i` of type `I::Item` and `j` of type","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31655,"byte_end":31727,"line_start":976,"line_end":976,"column_start":5,"column_end":77}},{"value":"/ `J::Item` respectively, the resulting iterator will:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31732,"byte_end":31788,"line_start":977,"line_end":977,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31793,"byte_end":31796,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ - Emit `EitherOrBoth::Left(i)` when `i < j`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31801,"byte_end":31849,"line_start":979,"line_end":979,"column_start":5,"column_end":53}},{"value":"/   and remove `i` from its source iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31854,"byte_end":31899,"line_start":980,"line_end":980,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Right(j)` when `i > j`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31904,"byte_end":31953,"line_start":981,"line_end":981,"column_start":5,"column_end":54}},{"value":"/   and remove `j` from its source iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":31958,"byte_end":32003,"line_start":982,"line_end":982,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Both(i, j)` when  `i == j`,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32008,"byte_end":32061,"line_start":983,"line_end":983,"column_start":5,"column_end":58}},{"value":"/   and remove both `i` and `j` from their respective source iterators","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32066,"byte_end":32138,"line_start":984,"line_end":984,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32143,"byte_end":32146,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32151,"byte_end":32158,"line_start":986,"line_end":986,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32163,"byte_end":32192,"line_start":987,"line_end":987,"column_start":5,"column_end":34}},{"value":"/ use itertools::EitherOrBoth::{Left, Right, Both};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32197,"byte_end":32250,"line_start":988,"line_end":988,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32255,"byte_end":32258,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ let multiples_of_2 = (0..10).step(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32263,"byte_end":32304,"line_start":990,"line_end":990,"column_start":5,"column_end":46}},{"value":"/ let multiples_of_3 = (0..10).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32309,"byte_end":32350,"line_start":991,"line_end":991,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32355,"byte_end":32358,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32363,"byte_end":32391,"line_start":993,"line_end":993,"column_start":5,"column_end":33}},{"value":"/     multiples_of_2.merge_join_by(multiples_of_3, |i, j| i.cmp(j)),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32396,"byte_end":32466,"line_start":994,"line_end":994,"column_start":5,"column_end":75}},{"value":"/     vec![Both(0, 0), Left(2), Right(3), Left(4), Both(6, 6), Left(8), Right(9)]","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32471,"byte_end":32554,"line_start":995,"line_end":995,"column_start":5,"column_end":88}},{"value":"/ );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32559,"byte_end":32565,"line_start":996,"line_end":996,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32570,"byte_end":32577,"line_start":997,"line_end":997,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32582,"byte_end":32591,"line_start":998,"line_end":998,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33447,"byte_end":33453,"line_start":1024,"line_end":1024,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"pub fn kmerge(Self) -> KMerge<<Self::Item as IntoIterator>::IntoIter> where\nSelf: Sized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: PartialOrd","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32869,"byte_end":32941,"line_start":1007,"line_end":1007,"column_start":5,"column_end":77}},{"value":"/ merging them in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32946,"byte_end":32982,"line_start":1008,"line_end":1008,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32987,"byte_end":32990,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":32995,"byte_end":33066,"line_start":1010,"line_end":1010,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33071,"byte_end":33074,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33079,"byte_end":33121,"line_start":1012,"line_end":1012,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33126,"byte_end":33129,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33134,"byte_end":33141,"line_start":1014,"line_end":1014,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33146,"byte_end":33175,"line_start":1015,"line_end":1015,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33180,"byte_end":33183,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ let a = (0..6).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33188,"byte_end":33215,"line_start":1017,"line_end":1017,"column_start":5,"column_end":32}},{"value":"/ let b = (1..6).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33220,"byte_end":33247,"line_start":1018,"line_end":1018,"column_start":5,"column_end":32}},{"value":"/ let c = (2..6).step(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33252,"byte_end":33279,"line_start":1019,"line_end":1019,"column_start":5,"column_end":32}},{"value":"/ let it = vec![a, b, c].into_iter().kmerge();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33284,"byte_end":33332,"line_start":1020,"line_end":1020,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33337,"byte_end":33393,"line_start":1021,"line_end":1021,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33398,"byte_end":33405,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33410,"byte_end":33439,"line_start":1023,"line_end":1023,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34460,"byte_end":34469,"line_start":1053,"line_end":1053,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"pub fn kmerge_by<F>(Self, F)\n-> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F> where Self: Sized,\nSelf::Item: IntoIterator,\nF: FnMut(&<Self::Item as IntoIterator>::Item,\n         &<Self::Item as IntoIterator>::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33677,"byte_end":33749,"line_start":1032,"line_end":1032,"column_start":5,"column_end":77}},{"value":"/ merging them according to the given closure.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33754,"byte_end":33802,"line_start":1033,"line_end":1033,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33807,"byte_end":33810,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ The closure `first` is called with two elements *a*, *b* and should","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33815,"byte_end":33886,"line_start":1035,"line_end":1035,"column_start":5,"column_end":76}},{"value":"/ return `true` if *a* is ordered before *b*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33891,"byte_end":33938,"line_start":1036,"line_end":1036,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33943,"byte_end":33946,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted according to `first`, the result is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":33951,"byte_end":34023,"line_start":1038,"line_end":1038,"column_start":5,"column_end":77}},{"value":"/ sorted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34028,"byte_end":34039,"line_start":1039,"line_end":1039,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34044,"byte_end":34047,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34052,"byte_end":34094,"line_start":1041,"line_end":1041,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34099,"byte_end":34102,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34107,"byte_end":34114,"line_start":1043,"line_end":1043,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34119,"byte_end":34148,"line_start":1044,"line_end":1044,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34153,"byte_end":34156,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ let a = vec![-1f64, 2., 3., -5., 6., -7.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34161,"byte_end":34207,"line_start":1046,"line_end":1046,"column_start":5,"column_end":51}},{"value":"/ let b = vec![0., 2., -4.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34212,"byte_end":34242,"line_start":1047,"line_end":1047,"column_start":5,"column_end":35}},{"value":"/ let mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34247,"byte_end":34323,"line_start":1048,"line_end":1048,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(it.next(), Some(0.));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34328,"byte_end":34364,"line_start":1049,"line_end":1049,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(it.last(), Some(-7.));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34369,"byte_end":34406,"line_start":1050,"line_end":1050,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34411,"byte_end":34418,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34423,"byte_end":34452,"line_start":1052,"line_end":1052,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35221,"byte_end":35238,"line_start":1074,"line_end":1074,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"pub fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34795,"byte_end":34869,"line_start":1063,"line_end":1063,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34874,"byte_end":34927,"line_start":1064,"line_end":1064,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34932,"byte_end":34935,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34940,"byte_end":34993,"line_start":1066,"line_end":1066,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":34998,"byte_end":35001,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35006,"byte_end":35013,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35018,"byte_end":35047,"line_start":1069,"line_end":1069,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35052,"byte_end":35055,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35060,"byte_end":35114,"line_start":1071,"line_end":1071,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35119,"byte_end":35201,"line_start":1072,"line_end":1072,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35206,"byte_end":35213,"line_start":1073,"line_end":1073,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36674,"byte_end":36697,"line_start":1109,"line_end":1109,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"pub fn multi_cartesian_product(Self)\n-> MultiProduct<<Self::Item as IntoIterator>::IntoIter> where Self: Iterator +\nSized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::IntoIter: Clone,\n<Self::Item as IntoIterator>::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35490,"byte_end":35564,"line_start":1083,"line_end":1083,"column_start":5,"column_end":79}},{"value":"/ all subiterators returned by meta-iterator `self`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35569,"byte_end":35623,"line_start":1084,"line_end":1084,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35628,"byte_end":35631,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ All provided iterators must yield the same `Item` type. To generate","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35636,"byte_end":35707,"line_start":1086,"line_end":1086,"column_start":5,"column_end":76}},{"value":"/ the product of iterators yielding multiple types, use the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35712,"byte_end":35773,"line_start":1087,"line_end":1087,"column_start":5,"column_end":66}},{"value":"/ [`iproduct`] macro instead.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35778,"byte_end":35809,"line_start":1088,"line_end":1088,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35814,"byte_end":35817,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35822,"byte_end":35825,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ The iterator element type is `Vec<T>`, where `T` is the iterator element","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35830,"byte_end":35906,"line_start":1091,"line_end":1091,"column_start":5,"column_end":81}},{"value":"/ of the subiterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35911,"byte_end":35935,"line_start":1092,"line_end":1092,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35940,"byte_end":35943,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35948,"byte_end":35955,"line_start":1094,"line_end":1094,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35960,"byte_end":35989,"line_start":1095,"line_end":1095,"column_start":5,"column_end":34}},{"value":"/ let mut multi_prod = (0..3).map(|i| (i * 2)..(i * 2 + 2))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":35994,"byte_end":36055,"line_start":1096,"line_end":1096,"column_start":5,"column_end":66}},{"value":"/     .multi_cartesian_product();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36060,"byte_end":36095,"line_start":1097,"line_end":1097,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 4]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36100,"byte_end":36155,"line_start":1098,"line_end":1098,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 5]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36160,"byte_end":36215,"line_start":1099,"line_end":1099,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 4]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36220,"byte_end":36275,"line_start":1100,"line_end":1100,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 5]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36280,"byte_end":36335,"line_start":1101,"line_end":1101,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 4]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36340,"byte_end":36395,"line_start":1102,"line_end":1102,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 5]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36400,"byte_end":36455,"line_start":1103,"line_end":1103,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 4]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36460,"byte_end":36515,"line_start":1104,"line_end":1104,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 5]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36520,"byte_end":36575,"line_start":1105,"line_end":1105,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36580,"byte_end":36620,"line_start":1106,"line_end":1106,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36625,"byte_end":36632,"line_start":1107,"line_end":1107,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":36637,"byte_end":36666,"line_start":1108,"line_end":1108,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38190,"byte_end":38198,"line_start":1146,"line_end":1146,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"pub fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37020,"byte_end":37085,"line_start":1118,"line_end":1118,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37090,"byte_end":37141,"line_start":1119,"line_end":1119,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37146,"byte_end":37149,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37154,"byte_end":37230,"line_start":1121,"line_end":1121,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37235,"byte_end":37298,"line_start":1122,"line_end":1122,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37303,"byte_end":37373,"line_start":1123,"line_end":1123,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37378,"byte_end":37439,"line_start":1124,"line_end":1124,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37444,"byte_end":37514,"line_start":1125,"line_end":1125,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37519,"byte_end":37591,"line_start":1126,"line_end":1126,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37596,"byte_end":37662,"line_start":1127,"line_end":1127,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37667,"byte_end":37670,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37675,"byte_end":37717,"line_start":1129,"line_end":1129,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37722,"byte_end":37725,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37730,"byte_end":37759,"line_start":1131,"line_end":1131,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37764,"byte_end":37767,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37772,"byte_end":37779,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37784,"byte_end":37813,"line_start":1134,"line_end":1134,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37818,"byte_end":37821,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37826,"byte_end":37860,"line_start":1136,"line_end":1136,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37865,"byte_end":37917,"line_start":1137,"line_end":1137,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37922,"byte_end":37982,"line_start":1138,"line_end":1138,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":37987,"byte_end":38026,"line_start":1139,"line_end":1139,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38031,"byte_end":38056,"line_start":1140,"line_end":1140,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38061,"byte_end":38081,"line_start":1141,"line_end":1141,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38086,"byte_end":38113,"line_start":1142,"line_end":1142,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38118,"byte_end":38133,"line_start":1143,"line_end":1143,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38138,"byte_end":38170,"line_start":1144,"line_end":1144,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38175,"byte_end":38182,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38912,"byte_end":38917,"line_start":1168,"line_end":1168,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"pub fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38433,"byte_end":38503,"line_start":1154,"line_end":1154,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38508,"byte_end":38567,"line_start":1155,"line_end":1155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38572,"byte_end":38575,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38580,"byte_end":38622,"line_start":1157,"line_end":1157,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38627,"byte_end":38630,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38635,"byte_end":38664,"line_start":1159,"line_end":1159,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38669,"byte_end":38672,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38677,"byte_end":38684,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38689,"byte_end":38718,"line_start":1162,"line_end":1162,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38723,"byte_end":38726,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38731,"byte_end":38779,"line_start":1164,"line_end":1164,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38784,"byte_end":38837,"line_start":1165,"line_end":1165,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38842,"byte_end":38892,"line_start":1166,"line_end":1166,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":38897,"byte_end":38904,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39662,"byte_end":39670,"line_start":1190,"line_end":1190,"column_start":8,"column_end":16},"name":"dedup_by","qualname":"::Itertools::dedup_by","value":"pub fn dedup_by<Cmp>(Self, Cmp) -> DedupBy<Self, Cmp> where Self: Sized,\nCmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements,\n determining equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39050,"byte_end":39120,"line_start":1175,"line_end":1175,"column_start":5,"column_end":75}},{"value":"/ determining equality using a comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39125,"byte_end":39178,"line_start":1176,"line_end":1176,"column_start":5,"column_end":58}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39183,"byte_end":39242,"line_start":1177,"line_end":1177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39247,"byte_end":39250,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39255,"byte_end":39297,"line_start":1179,"line_end":1179,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39302,"byte_end":39305,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39310,"byte_end":39339,"line_start":1181,"line_end":1181,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39344,"byte_end":39347,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39352,"byte_end":39359,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39364,"byte_end":39393,"line_start":1184,"line_end":1184,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39398,"byte_end":39401,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 1.), (1, 1.), (0, 2.), (0, 3.), (1, 3.), (1, 2.), (2, 2.)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39406,"byte_end":39489,"line_start":1186,"line_end":1186,"column_start":5,"column_end":88}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by(|x, y| x.1 == y.1),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39494,"byte_end":39567,"line_start":1187,"line_end":1187,"column_start":5,"column_end":78}},{"value":"/                         vec![(0, 1.), (0, 2.), (0, 3.), (1, 2.)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39572,"byte_end":39642,"line_start":1188,"line_end":1188,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39647,"byte_end":39654,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40458,"byte_end":40474,"line_start":1212,"line_end":1212,"column_start":8,"column_end":24},"name":"dedup_with_count","qualname":"::Itertools::dedup_with_count","value":"pub fn dedup_with_count(Self) -> DedupWithCount<Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39854,"byte_end":39949,"line_start":1197,"line_end":1197,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":39954,"byte_end":39998,"line_start":1198,"line_end":1198,"column_start":5,"column_end":49}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40003,"byte_end":40062,"line_start":1199,"line_end":1199,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40067,"byte_end":40070,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40075,"byte_end":40126,"line_start":1201,"line_end":1201,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40131,"byte_end":40134,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40139,"byte_end":40168,"line_start":1203,"line_end":1203,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40173,"byte_end":40176,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40181,"byte_end":40188,"line_start":1205,"line_end":1205,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40193,"byte_end":40222,"line_start":1206,"line_end":1206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40227,"byte_end":40230,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ let data = vec!['a', 'a', 'b', 'c', 'c', 'b', 'b'];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40235,"byte_end":40290,"line_start":1208,"line_end":1208,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_with_count(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40295,"byte_end":40359,"line_start":1209,"line_end":1209,"column_start":5,"column_end":69}},{"value":"/                         vec![(2, 'a'), (1, 'b'), (2, 'c'), (2, 'b')]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40364,"byte_end":40438,"line_start":1210,"line_end":1210,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40443,"byte_end":40450,"line_start":1211,"line_end":1211,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41339,"byte_end":41358,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"dedup_by_with_count","qualname":"::Itertools::dedup_by_with_count","value":"pub fn dedup_by_with_count<Cmp>(Self, Cmp) -> DedupByWithCount<Self, Cmp>\nwhere Self: Sized, Cmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n This will determine equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40594,"byte_end":40689,"line_start":1219,"line_end":1219,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40694,"byte_end":40738,"line_start":1220,"line_end":1220,"column_start":5,"column_end":49}},{"value":"/ This will determine equality using a comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40743,"byte_end":40804,"line_start":1221,"line_end":1221,"column_start":5,"column_end":66}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40809,"byte_end":40868,"line_start":1222,"line_end":1222,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40873,"byte_end":40876,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40881,"byte_end":40932,"line_start":1224,"line_end":1224,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40937,"byte_end":40940,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40945,"byte_end":40974,"line_start":1226,"line_end":1226,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40979,"byte_end":40982,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40987,"byte_end":40994,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":40999,"byte_end":41028,"line_start":1229,"line_end":1229,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41033,"byte_end":41036,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 'a'), (1, 'a'), (0, 'b'), (0, 'c'), (1, 'c'), (1, 'b'), (2, 'b')];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41041,"byte_end":41131,"line_start":1231,"line_end":1231,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by_with_count(|x, y| x.1 == y.1),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41136,"byte_end":41220,"line_start":1232,"line_end":1232,"column_start":5,"column_end":89}},{"value":"/                         vec![(2, (0, 'a')), (1, (0, 'b')), (2, (0, 'c')), (2, (1, 'b'))]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41225,"byte_end":41319,"line_start":1233,"line_end":1233,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41324,"byte_end":41331,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42289,"byte_end":42299,"line_start":1258,"line_end":1258,"column_start":8,"column_end":18},"name":"duplicates","qualname":"::Itertools::duplicates","value":"pub fn duplicates(Self) -> Duplicates<Self> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41562,"byte_end":41653,"line_start":1243,"line_end":1243,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41658,"byte_end":41721,"line_start":1244,"line_end":1244,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41726,"byte_end":41729,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41734,"byte_end":41827,"line_start":1246,"line_end":1246,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41832,"byte_end":41927,"line_start":1247,"line_end":1247,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":41932,"byte_end":42012,"line_start":1248,"line_end":1248,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42017,"byte_end":42020,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42025,"byte_end":42032,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42037,"byte_end":42066,"line_start":1251,"line_end":1251,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42071,"byte_end":42074,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42079,"byte_end":42127,"line_start":1253,"line_end":1253,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42132,"byte_end":42190,"line_start":1254,"line_end":1254,"column_start":5,"column_end":63}},{"value":"/                         vec![20, 10]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42195,"byte_end":42237,"line_start":1255,"line_end":1255,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42242,"byte_end":42249,"line_start":1256,"line_end":1256,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42254,"byte_end":42281,"line_start":1257,"line_end":1257,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43376,"byte_end":43389,"line_start":1283,"line_end":1283,"column_start":8,"column_end":21},"name":"duplicates_by","qualname":"::Itertools::duplicates_by","value":"pub fn duplicates_by<V, F>(Self, F) -> DuplicatesBy<Self, V, F> where\nSelf: Sized, V: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42448,"byte_end":42539,"line_start":1265,"line_end":1265,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42544,"byte_end":42607,"line_start":1266,"line_end":1266,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42612,"byte_end":42615,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to with the keying function `f` by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42620,"byte_end":42712,"line_start":1268,"line_end":1268,"column_start":5,"column_end":97}},{"value":"/ hash and equality. The keys are stored in a hash map in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42717,"byte_end":42790,"line_start":1269,"line_end":1269,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42795,"byte_end":42798,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42803,"byte_end":42896,"line_start":1271,"line_end":1271,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":42901,"byte_end":42996,"line_start":1272,"line_end":1272,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43001,"byte_end":43081,"line_start":1273,"line_end":1273,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43086,"byte_end":43089,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43094,"byte_end":43101,"line_start":1275,"line_end":1275,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43106,"byte_end":43135,"line_start":1276,"line_end":1276,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43140,"byte_end":43143,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43148,"byte_end":43197,"line_start":1278,"line_end":1278,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates_by(|s| s.len()),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43202,"byte_end":43274,"line_start":1279,"line_end":1279,"column_start":5,"column_end":77}},{"value":"/                         vec![\"aa\", \"c\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43279,"byte_end":43324,"line_start":1280,"line_end":1280,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43329,"byte_end":43336,"line_start":1281,"line_end":1281,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43341,"byte_end":43368,"line_start":1282,"line_end":1282,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44381,"byte_end":44387,"line_start":1310,"line_end":1310,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"pub fn unique(Self) -> Unique<Self> where Self: Sized, Self::Item: Clone +\nEq + Hash","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43597,"byte_end":43663,"line_start":1291,"line_end":1291,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration. Duplicates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43668,"byte_end":43731,"line_start":1292,"line_end":1292,"column_start":5,"column_end":68}},{"value":"/ are detected using hash and equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43736,"byte_end":43777,"line_start":1293,"line_end":1293,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43782,"byte_end":43785,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ Clones of visited elements are stored in a hash set in the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43790,"byte_end":43852,"line_start":1295,"line_end":1295,"column_start":5,"column_end":67}},{"value":"/ iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43857,"byte_end":43870,"line_start":1296,"line_end":1296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43875,"byte_end":43878,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43883,"byte_end":43957,"line_start":1298,"line_end":1298,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":43962,"byte_end":44032,"line_start":1299,"line_end":1299,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44037,"byte_end":44096,"line_start":1300,"line_end":1300,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44101,"byte_end":44104,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44109,"byte_end":44116,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44121,"byte_end":44150,"line_start":1303,"line_end":1303,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44155,"byte_end":44158,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44163,"byte_end":44211,"line_start":1305,"line_end":1305,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().unique(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44216,"byte_end":44270,"line_start":1306,"line_end":1306,"column_start":5,"column_end":59}},{"value":"/                         vec![10, 20, 30, 40, 50]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44275,"byte_end":44329,"line_start":1307,"line_end":1307,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44334,"byte_end":44341,"line_start":1308,"line_end":1308,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44346,"byte_end":44373,"line_start":1309,"line_end":1309,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45370,"byte_end":45379,"line_start":1336,"line_end":1336,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"pub fn unique_by<V, F>(Self, F) -> UniqueBy<Self, V, F> where Self: Sized,\nV: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44532,"byte_end":44598,"line_start":1317,"line_end":1317,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44603,"byte_end":44655,"line_start":1318,"line_end":1318,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44660,"byte_end":44663,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44668,"byte_end":44728,"line_start":1320,"line_end":1320,"column_start":5,"column_end":65}},{"value":"/ with the keying function `f` by hash and equality.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44733,"byte_end":44787,"line_start":1321,"line_end":1321,"column_start":5,"column_end":59}},{"value":"/ The keys are stored in a hash set in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44792,"byte_end":44846,"line_start":1322,"line_end":1322,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44851,"byte_end":44854,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44859,"byte_end":44933,"line_start":1324,"line_end":1324,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":44938,"byte_end":45008,"line_start":1325,"line_end":1325,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45013,"byte_end":45072,"line_start":1326,"line_end":1326,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45077,"byte_end":45080,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45085,"byte_end":45092,"line_start":1328,"line_end":1328,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45097,"byte_end":45126,"line_start":1329,"line_end":1329,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45131,"byte_end":45134,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45139,"byte_end":45188,"line_start":1331,"line_end":1331,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().unique_by(|s| s.len()),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45193,"byte_end":45261,"line_start":1332,"line_end":1332,"column_start":5,"column_end":73}},{"value":"/                         vec![\"a\", \"bb\", \"ccc\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45266,"byte_end":45318,"line_start":1333,"line_end":1333,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45323,"byte_end":45330,"line_start":1334,"line_end":1334,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45335,"byte_end":45362,"line_start":1335,"line_end":1335,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46119,"byte_end":46137,"line_start":1356,"line_end":1356,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"pub fn peeking_take_while<F>(&mut Self, F) -> PeekingTakeWhile<, Self, F>\nwhere Self: Sized + PeekingNext, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45575,"byte_end":45641,"line_start":1344,"line_end":1344,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45646,"byte_end":45704,"line_start":1345,"line_end":1345,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45709,"byte_end":45712,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45717,"byte_end":45792,"line_start":1347,"line_end":1347,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45797,"byte_end":45869,"line_start":1348,"line_end":1348,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45874,"byte_end":45877,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45882,"byte_end":45955,"line_start":1350,"line_end":1350,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45960,"byte_end":45993,"line_start":1351,"line_end":1351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":45998,"byte_end":46001,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46006,"byte_end":46009,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](Itertools::take_while_ref)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46014,"byte_end":46075,"line_start":1354,"line_end":1354,"column_start":5,"column_end":66}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46080,"byte_end":46111,"line_start":1355,"line_end":1355,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47083,"byte_end":47097,"line_start":1381,"line_end":1381,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"pub fn take_while_ref<F>(&mut Self, F) -> TakeWhileRef<, Self, F> where\nSelf: Clone, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46356,"byte_end":46428,"line_start":1363,"line_end":1363,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46433,"byte_end":46507,"line_start":1364,"line_end":1364,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46512,"byte_end":46515,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46520,"byte_end":46594,"line_start":1366,"line_end":1366,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46599,"byte_end":46668,"line_start":1367,"line_end":1367,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46673,"byte_end":46702,"line_start":1368,"line_end":1368,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46707,"byte_end":46710,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46715,"byte_end":46722,"line_start":1370,"line_end":1370,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46727,"byte_end":46756,"line_start":1371,"line_end":1371,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46761,"byte_end":46764,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46769,"byte_end":46823,"line_start":1373,"line_end":1373,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46828,"byte_end":46831,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46836,"byte_end":46902,"line_start":1375,"line_end":1375,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46907,"byte_end":46959,"line_start":1376,"line_end":1376,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":46964,"byte_end":47003,"line_start":1377,"line_end":1377,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47008,"byte_end":47055,"line_start":1378,"line_end":1378,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47060,"byte_end":47063,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47068,"byte_end":47075,"line_start":1380,"line_end":1380,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47763,"byte_end":47773,"line_start":1402,"line_end":1402,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"pub fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized +\nIterator<Item = Option<A>>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47283,"byte_end":47356,"line_start":1388,"line_end":1388,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47361,"byte_end":47421,"line_start":1389,"line_end":1389,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47426,"byte_end":47429,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47434,"byte_end":47490,"line_start":1391,"line_end":1391,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47495,"byte_end":47498,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47503,"byte_end":47510,"line_start":1393,"line_end":1393,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47515,"byte_end":47544,"line_start":1394,"line_end":1394,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47549,"byte_end":47552,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47557,"byte_end":47591,"line_start":1396,"line_end":1396,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47596,"byte_end":47624,"line_start":1397,"line_end":1397,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47629,"byte_end":47694,"line_start":1398,"line_end":1398,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47699,"byte_end":47735,"line_start":1399,"line_end":1399,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47740,"byte_end":47743,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47748,"byte_end":47755,"line_start":1401,"line_end":1401,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49205,"byte_end":49223,"line_start":1441,"line_end":1441,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"pub fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47909,"byte_end":47982,"line_start":1408,"line_end":1408,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":47987,"byte_end":48017,"line_start":1409,"line_end":1409,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48022,"byte_end":48025,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48030,"byte_end":48105,"line_start":1411,"line_end":1411,"column_start":5,"column_end":80}},{"value":"/ size up to 12.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48110,"byte_end":48128,"line_start":1412,"line_end":1412,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48133,"byte_end":48136,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48141,"byte_end":48148,"line_start":1414,"line_end":1414,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48153,"byte_end":48182,"line_start":1415,"line_end":1415,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48187,"byte_end":48190,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48195,"byte_end":48222,"line_start":1417,"line_end":1417,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48227,"byte_end":48274,"line_start":1418,"line_end":1418,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48279,"byte_end":48302,"line_start":1419,"line_end":1419,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48307,"byte_end":48312,"line_start":1420,"line_end":1420,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48317,"byte_end":48389,"line_start":1421,"line_end":1421,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48394,"byte_end":48397,"line_start":1422,"line_end":1422,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48402,"byte_end":48447,"line_start":1423,"line_end":1423,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48452,"byte_end":48495,"line_start":1424,"line_end":1424,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48500,"byte_end":48543,"line_start":1425,"line_end":1425,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48548,"byte_end":48591,"line_start":1426,"line_end":1426,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48596,"byte_end":48639,"line_start":1427,"line_end":1427,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48644,"byte_end":48676,"line_start":1428,"line_end":1428,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48681,"byte_end":48684,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48689,"byte_end":48721,"line_start":1430,"line_end":1430,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48726,"byte_end":48780,"line_start":1431,"line_end":1431,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48785,"byte_end":48867,"line_start":1432,"line_end":1432,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48872,"byte_end":48875,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48880,"byte_end":48925,"line_start":1434,"line_end":1434,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48930,"byte_end":48967,"line_start":1435,"line_end":1435,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":48972,"byte_end":48996,"line_start":1436,"line_end":1436,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49001,"byte_end":49004,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49009,"byte_end":49098,"line_start":1438,"line_end":1438,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49103,"byte_end":49185,"line_start":1439,"line_end":1439,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49190,"byte_end":49197,"line_start":1440,"line_end":1440,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50434,"byte_end":50446,"line_start":1479,"line_end":1479,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"pub fn combinations(Self, usize) -> Combinations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `k`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the `k`-length combinations of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49440,"byte_end":49520,"line_start":1449,"line_end":1449,"column_start":5,"column_end":85}},{"value":"/ the elements from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49525,"byte_end":49559,"line_start":1450,"line_end":1450,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49564,"byte_end":49567,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49572,"byte_end":49666,"line_start":1452,"line_end":1452,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49671,"byte_end":49708,"line_start":1453,"line_end":1453,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49713,"byte_end":49716,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49721,"byte_end":49728,"line_start":1455,"line_end":1455,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49733,"byte_end":49762,"line_start":1456,"line_end":1456,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49767,"byte_end":49770,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ let it = (1..5).combinations(3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49775,"byte_end":49811,"line_start":1458,"line_end":1458,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49816,"byte_end":49853,"line_start":1459,"line_end":1459,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49858,"byte_end":49880,"line_start":1460,"line_end":1460,"column_start":5,"column_end":27}},{"value":"/     vec![1, 2, 4],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49885,"byte_end":49907,"line_start":1461,"line_end":1461,"column_start":5,"column_end":27}},{"value":"/     vec![1, 3, 4],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49912,"byte_end":49934,"line_start":1462,"line_end":1462,"column_start":5,"column_end":27}},{"value":"/     vec![2, 3, 4],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49939,"byte_end":49961,"line_start":1463,"line_end":1463,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49966,"byte_end":49973,"line_start":1464,"line_end":1464,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49978,"byte_end":49985,"line_start":1465,"line_end":1465,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49990,"byte_end":49993,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ Note: Combinations does not take into account the equality of the iterated values.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":49998,"byte_end":50084,"line_start":1467,"line_end":1467,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50089,"byte_end":50096,"line_start":1468,"line_end":1468,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50101,"byte_end":50130,"line_start":1469,"line_end":1469,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50135,"byte_end":50138,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ let it = vec![1, 2, 2].into_iter().combinations(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50143,"byte_end":50198,"line_start":1471,"line_end":1471,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50203,"byte_end":50240,"line_start":1472,"line_end":1472,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50245,"byte_end":50292,"line_start":1473,"line_end":1473,"column_start":5,"column_end":52}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50297,"byte_end":50344,"line_start":1474,"line_end":1474,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50349,"byte_end":50368,"line_start":1475,"line_end":1475,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50373,"byte_end":50380,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50385,"byte_end":50392,"line_start":1477,"line_end":1477,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50397,"byte_end":50426,"line_start":1478,"line_end":1478,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51255,"byte_end":51284,"line_start":1506,"line_end":1506,"column_start":8,"column_end":37},"name":"combinations_with_replacement","qualname":"::Itertools::combinations_with_replacement","value":"pub fn combinations_with_replacement(Self, usize)\n-> CombinationsWithReplacement<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator that iterates over the `k`-length combinations of\n the elements from an iterator, with replacement.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates over the `k`-length combinations of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50605,"byte_end":50677,"line_start":1486,"line_end":1486,"column_start":5,"column_end":77}},{"value":"/ the elements from an iterator, with replacement.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50682,"byte_end":50734,"line_start":1487,"line_end":1487,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50739,"byte_end":50742,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50747,"byte_end":50841,"line_start":1489,"line_end":1489,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50846,"byte_end":50883,"line_start":1490,"line_end":1490,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50888,"byte_end":50891,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50896,"byte_end":50903,"line_start":1492,"line_end":1492,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50908,"byte_end":50937,"line_start":1493,"line_end":1493,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50942,"byte_end":50945,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ let it = (1..4).combinations_with_replacement(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":50950,"byte_end":51003,"line_start":1495,"line_end":1495,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51008,"byte_end":51045,"line_start":1496,"line_end":1496,"column_start":5,"column_end":42}},{"value":"/     vec![1, 1],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51050,"byte_end":51069,"line_start":1497,"line_end":1497,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51074,"byte_end":51093,"line_start":1498,"line_end":1498,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51098,"byte_end":51117,"line_start":1499,"line_end":1499,"column_start":5,"column_end":24}},{"value":"/     vec![2, 2],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51122,"byte_end":51141,"line_start":1500,"line_end":1500,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51146,"byte_end":51165,"line_start":1501,"line_end":1501,"column_start":5,"column_end":24}},{"value":"/     vec![3, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51170,"byte_end":51189,"line_start":1502,"line_end":1502,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51194,"byte_end":51201,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51206,"byte_end":51213,"line_start":1504,"line_end":1504,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51218,"byte_end":51247,"line_start":1505,"line_end":1505,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52799,"byte_end":52811,"line_start":1552,"line_end":1552,"column_start":8,"column_end":20},"name":"permutations","qualname":"::Itertools::permutations","value":"pub fn permutations(Self, usize) -> Permutations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over all k-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over all k-permutations of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51491,"byte_end":51566,"line_start":1514,"line_end":1514,"column_start":5,"column_end":80}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51571,"byte_end":51601,"line_start":1515,"line_end":1515,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51606,"byte_end":51609,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>` with length `k`. The iterator","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51614,"byte_end":51690,"line_start":1517,"line_end":1517,"column_start":5,"column_end":81}},{"value":"/ produces a new Vec per iteration, and clones the iterator elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51695,"byte_end":51766,"line_start":1518,"line_end":1518,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51771,"byte_end":51774,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than the length of the input iterator, the resultant","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51779,"byte_end":51853,"line_start":1520,"line_end":1520,"column_start":5,"column_end":79}},{"value":"/ iterator adaptor will be empty.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51858,"byte_end":51893,"line_start":1521,"line_end":1521,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51898,"byte_end":51901,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51906,"byte_end":51913,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51918,"byte_end":51947,"line_start":1524,"line_end":1524,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51952,"byte_end":51955,"line_start":1525,"line_end":1525,"column_start":5,"column_end":8}},{"value":"/ let perms = (5..8).permutations(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":51960,"byte_end":51999,"line_start":1526,"line_end":1526,"column_start":5,"column_end":44}},{"value":"/ itertools::assert_equal(perms, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52004,"byte_end":52044,"line_start":1527,"line_end":1527,"column_start":5,"column_end":45}},{"value":"/     vec![5, 6],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52049,"byte_end":52068,"line_start":1528,"line_end":1528,"column_start":5,"column_end":24}},{"value":"/     vec![5, 7],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52073,"byte_end":52092,"line_start":1529,"line_end":1529,"column_start":5,"column_end":24}},{"value":"/     vec![6, 5],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52097,"byte_end":52116,"line_start":1530,"line_end":1530,"column_start":5,"column_end":24}},{"value":"/     vec![6, 7],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52121,"byte_end":52140,"line_start":1531,"line_end":1531,"column_start":5,"column_end":24}},{"value":"/     vec![7, 5],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52145,"byte_end":52164,"line_start":1532,"line_end":1532,"column_start":5,"column_end":24}},{"value":"/     vec![7, 6],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52169,"byte_end":52188,"line_start":1533,"line_end":1533,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52193,"byte_end":52200,"line_start":1534,"line_end":1534,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52205,"byte_end":52212,"line_start":1535,"line_end":1535,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52217,"byte_end":52220,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ Note: Permutations does not take into account the equality of the iterated values.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52225,"byte_end":52311,"line_start":1537,"line_end":1537,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52316,"byte_end":52319,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52324,"byte_end":52331,"line_start":1539,"line_end":1539,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52336,"byte_end":52365,"line_start":1540,"line_end":1540,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52370,"byte_end":52373,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ let it = vec![2, 2].into_iter().permutations(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52378,"byte_end":52430,"line_start":1542,"line_end":1542,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52435,"byte_end":52472,"line_start":1543,"line_end":1543,"column_start":5,"column_end":42}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52477,"byte_end":52524,"line_start":1544,"line_end":1544,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52529,"byte_end":52576,"line_start":1545,"line_end":1545,"column_start":5,"column_end":52}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52581,"byte_end":52588,"line_start":1546,"line_end":1546,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52593,"byte_end":52600,"line_start":1547,"line_end":1547,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52605,"byte_end":52608,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ Note: The source iterator is collected lazily, and will not be","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52613,"byte_end":52679,"line_start":1549,"line_end":1549,"column_start":5,"column_end":71}},{"value":"/ re-iterated if the permutations adaptor is completed and re-iterated.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52684,"byte_end":52757,"line_start":1550,"line_end":1550,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52762,"byte_end":52791,"line_start":1551,"line_end":1551,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53955,"byte_end":53963,"line_start":1588,"line_end":1588,"column_start":8,"column_end":16},"name":"powerset","qualname":"::Itertools::powerset","value":"pub fn powerset(Self) -> Powerset<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator that iterates through the powerset of the elements from an\n iterator.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates through the powerset of the elements from an","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":52970,"byte_end":53051,"line_start":1559,"line_end":1559,"column_start":5,"column_end":86}},{"value":"/ iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53056,"byte_end":53069,"line_start":1560,"line_end":1560,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53074,"byte_end":53077,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new `Vec`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53082,"byte_end":53163,"line_start":1562,"line_end":1562,"column_start":5,"column_end":86}},{"value":"/ per iteration, and clones the iterator elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53168,"byte_end":53220,"line_start":1563,"line_end":1563,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53225,"byte_end":53228,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ The powerset of a set contains all subsets including the empty set and the full","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53233,"byte_end":53316,"line_start":1565,"line_end":1565,"column_start":5,"column_end":88}},{"value":"/ input set. A powerset has length _2^n_ where _n_ is the length of the input","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53321,"byte_end":53400,"line_start":1566,"line_end":1566,"column_start":5,"column_end":84}},{"value":"/ set.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53405,"byte_end":53413,"line_start":1567,"line_end":1567,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53418,"byte_end":53421,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ Each `Vec` produced by this iterator represents a subset of the elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53426,"byte_end":53502,"line_start":1569,"line_end":1569,"column_start":5,"column_end":81}},{"value":"/ produced by the source iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53507,"byte_end":53543,"line_start":1570,"line_end":1570,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53548,"byte_end":53551,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53556,"byte_end":53563,"line_start":1572,"line_end":1572,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53568,"byte_end":53597,"line_start":1573,"line_end":1573,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53602,"byte_end":53605,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ let sets = (1..4).powerset().collect::<Vec<_>>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53610,"byte_end":53663,"line_start":1575,"line_end":1575,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(sets, vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53668,"byte_end":53707,"line_start":1576,"line_end":1576,"column_start":5,"column_end":44}},{"value":"/     vec![],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53712,"byte_end":53727,"line_start":1577,"line_end":1577,"column_start":5,"column_end":20}},{"value":"/     vec![1],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53732,"byte_end":53748,"line_start":1578,"line_end":1578,"column_start":5,"column_end":21}},{"value":"/     vec![2],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53753,"byte_end":53769,"line_start":1579,"line_end":1579,"column_start":5,"column_end":21}},{"value":"/     vec![3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53774,"byte_end":53790,"line_start":1580,"line_end":1580,"column_start":5,"column_end":21}},{"value":"/     vec![1, 2],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53795,"byte_end":53814,"line_start":1581,"line_end":1581,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53819,"byte_end":53838,"line_start":1582,"line_end":1582,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53843,"byte_end":53862,"line_start":1583,"line_end":1583,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53867,"byte_end":53889,"line_start":1584,"line_end":1584,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53894,"byte_end":53901,"line_start":1585,"line_end":1585,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53906,"byte_end":53913,"line_start":1586,"line_end":1586,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":53918,"byte_end":53947,"line_start":1587,"line_end":1587,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2542},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54769,"byte_end":54778,"line_start":1612,"line_end":1612,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"pub fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54098,"byte_end":54174,"line_start":1595,"line_end":1595,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54179,"byte_end":54237,"line_start":1596,"line_end":1596,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54242,"byte_end":54245,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54250,"byte_end":54292,"line_start":1598,"line_end":1598,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54297,"byte_end":54300,"line_start":1599,"line_end":1599,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54305,"byte_end":54312,"line_start":1600,"line_end":1600,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54317,"byte_end":54346,"line_start":1601,"line_end":1601,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54351,"byte_end":54354,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54359,"byte_end":54402,"line_start":1603,"line_end":1603,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54407,"byte_end":54480,"line_start":1604,"line_end":1604,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54485,"byte_end":54488,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54493,"byte_end":54536,"line_start":1606,"line_end":1606,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54541,"byte_end":54609,"line_start":1607,"line_end":1607,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54614,"byte_end":54617,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54622,"byte_end":54671,"line_start":1609,"line_end":1609,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54676,"byte_end":54749,"line_start":1610,"line_end":1610,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54754,"byte_end":54761,"line_start":1611,"line_end":1611,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55693,"byte_end":55706,"line_start":1638,"line_end":1638,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"pub fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":54957,"byte_end":55030,"line_start":1619,"line_end":1619,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55035,"byte_end":55096,"line_start":1620,"line_end":1620,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55101,"byte_end":55104,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55109,"byte_end":55137,"line_start":1622,"line_end":1622,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](Position)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55142,"byte_end":55180,"line_start":1623,"line_end":1623,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55185,"byte_end":55188,"line_start":1624,"line_end":1624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55193,"byte_end":55200,"line_start":1625,"line_end":1625,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55205,"byte_end":55246,"line_start":1626,"line_end":1626,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55251,"byte_end":55254,"line_start":1627,"line_end":1627,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55259,"byte_end":55295,"line_start":1628,"line_end":1628,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55300,"byte_end":55331,"line_start":1629,"line_end":1629,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55336,"byte_end":55388,"line_start":1630,"line_end":1630,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55393,"byte_end":55446,"line_start":1631,"line_end":1631,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55451,"byte_end":55504,"line_start":1632,"line_end":1632,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55509,"byte_end":55562,"line_start":1633,"line_end":1633,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55567,"byte_end":55570,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55575,"byte_end":55611,"line_start":1635,"line_end":1635,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55616,"byte_end":55673,"line_start":1636,"line_end":1636,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55678,"byte_end":55685,"line_start":1637,"line_end":1637,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2545},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56385,"byte_end":56394,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55822,"byte_end":55892,"line_start":1644,"line_end":1644,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55897,"byte_end":55964,"line_start":1645,"line_end":1645,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55969,"byte_end":55972,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":55977,"byte_end":56060,"line_start":1647,"line_end":1647,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56065,"byte_end":56068,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56073,"byte_end":56080,"line_start":1649,"line_end":1649,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56085,"byte_end":56114,"line_start":1650,"line_end":1650,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56119,"byte_end":56122,"line_start":1651,"line_end":1651,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56127,"byte_end":56171,"line_start":1652,"line_end":1652,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56176,"byte_end":56258,"line_start":1653,"line_end":1653,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56263,"byte_end":56266,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56271,"byte_end":56365,"line_start":1655,"line_end":1655,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56370,"byte_end":56377,"line_start":1656,"line_end":1656,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56947,"byte_end":56953,"line_start":1674,"line_end":1674,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where Self: Sized,\nF: FnMut(&mut Self::Item) -> ()","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies a mutating function","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56573,"byte_end":56636,"line_start":1664,"line_end":1664,"column_start":5,"column_end":68}},{"value":"/ to each element before yielding it.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56641,"byte_end":56680,"line_start":1665,"line_end":1665,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56685,"byte_end":56688,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56693,"byte_end":56700,"line_start":1667,"line_end":1667,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56705,"byte_end":56734,"line_start":1668,"line_end":1668,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56739,"byte_end":56742,"line_start":1669,"line_end":1669,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![3, 2, 1]];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56747,"byte_end":56792,"line_start":1670,"line_end":1670,"column_start":5,"column_end":50}},{"value":"/ let it = input.into_iter().update(|mut v| v.push(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56797,"byte_end":56854,"line_start":1671,"line_end":1671,"column_start":5,"column_end":62}},{"value":"/ itertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56859,"byte_end":56927,"line_start":1672,"line_end":1672,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":56932,"byte_end":56939,"line_start":1673,"line_end":1673,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57579,"byte_end":57589,"line_start":1695,"line_end":1695,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"pub fn next_tuple<T>(&mut Self) -> Option<T> where Self: Sized + Iterator<Item\n= T::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57146,"byte_end":57220,"line_start":1682,"line_end":1682,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 12).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57225,"byte_end":57256,"line_start":1683,"line_end":1683,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57261,"byte_end":57264,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57269,"byte_end":57345,"line_start":1685,"line_end":1685,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57350,"byte_end":57407,"line_start":1686,"line_end":1686,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57412,"byte_end":57415,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57420,"byte_end":57427,"line_start":1688,"line_end":1688,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57432,"byte_end":57461,"line_start":1689,"line_end":1689,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57466,"byte_end":57469,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57474,"byte_end":57498,"line_start":1691,"line_end":1691,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57503,"byte_end":57506,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57511,"byte_end":57559,"line_start":1693,"line_end":1693,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57564,"byte_end":57571,"line_start":1694,"line_end":1694,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58332,"byte_end":58345,"line_start":1720,"line_end":1720,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"pub fn collect_tuple<T>(Self) -> Option<T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 12).","sig":null,"attributes":[{"value":"/ Collects all items from the iterator into a tuple of a specific size","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57772,"byte_end":57844,"line_start":1702,"line_end":1702,"column_start":5,"column_end":77}},{"value":"/ (up to 12).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57849,"byte_end":57864,"line_start":1703,"line_end":1703,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57869,"byte_end":57872,"line_start":1704,"line_end":1704,"column_start":5,"column_end":8}},{"value":"/ If the number of elements inside the iterator is **exactly** equal to","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57877,"byte_end":57950,"line_start":1705,"line_end":1705,"column_start":5,"column_end":78}},{"value":"/ the tuple size, then the tuple is returned inside `Some`, otherwise","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":57955,"byte_end":58026,"line_start":1706,"line_end":1706,"column_start":5,"column_end":76}},{"value":"/ `None` is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58031,"byte_end":58054,"line_start":1707,"line_end":1707,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58059,"byte_end":58062,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58067,"byte_end":58074,"line_start":1709,"line_end":1709,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58079,"byte_end":58108,"line_start":1710,"line_end":1710,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58113,"byte_end":58116,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ let iter = 1..3;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58121,"byte_end":58141,"line_start":1712,"line_end":1712,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58146,"byte_end":58149,"line_start":1713,"line_end":1713,"column_start":5,"column_end":8}},{"value":"/ if let Some((x, y)) = iter.collect_tuple() {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58154,"byte_end":58202,"line_start":1714,"line_end":1714,"column_start":5,"column_end":53}},{"value":"/     assert_eq!((x, y), (1, 2))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58207,"byte_end":58241,"line_start":1715,"line_end":1715,"column_start":5,"column_end":39}},{"value":"/ } else {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58246,"byte_end":58258,"line_start":1716,"line_end":1716,"column_start":5,"column_end":17}},{"value":"/     panic!(\"Expected two elements\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58263,"byte_end":58302,"line_start":1717,"line_end":1717,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58307,"byte_end":58312,"line_start":1718,"line_end":1718,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58317,"byte_end":58324,"line_start":1719,"line_end":1719,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59026,"byte_end":59039,"line_start":1744,"line_end":1744,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"pub fn find_position<P>(&mut Self, P) -> Option<(usize, Self::Item)> where\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58678,"byte_end":58754,"line_start":1734,"line_end":1734,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58759,"byte_end":58762,"line_start":1735,"line_end":1735,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58767,"byte_end":58829,"line_start":1736,"line_end":1736,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58834,"byte_end":58837,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58842,"byte_end":58849,"line_start":1738,"line_end":1738,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58854,"byte_end":58883,"line_start":1739,"line_end":1739,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58888,"byte_end":58891,"line_start":1740,"line_end":1740,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58896,"byte_end":58917,"line_start":1741,"line_end":1741,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":58922,"byte_end":59006,"line_start":1742,"line_end":1742,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59011,"byte_end":59018,"line_start":1743,"line_end":1743,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59861,"byte_end":59873,"line_start":1768,"line_end":1768,"column_start":8,"column_end":20},"name":"find_or_last","qualname":"::Itertools::find_or_last","value":"pub fn find_or_last<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the last element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the last element, if any.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59348,"byte_end":59446,"line_start":1756,"line_end":1756,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59451,"byte_end":59454,"line_start":1757,"line_end":1757,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59459,"byte_end":59521,"line_start":1758,"line_end":1758,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59526,"byte_end":59529,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59534,"byte_end":59541,"line_start":1760,"line_end":1760,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59546,"byte_end":59575,"line_start":1761,"line_end":1761,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59580,"byte_end":59583,"line_start":1762,"line_end":1762,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59588,"byte_end":59619,"line_start":1763,"line_end":1763,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 5), Some(&4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59624,"byte_end":59691,"line_start":1764,"line_end":1764,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 2), Some(&3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59696,"byte_end":59763,"line_start":1765,"line_end":1765,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_last(|&x| x > 5), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59768,"byte_end":59841,"line_start":1766,"line_end":1766,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":59846,"byte_end":59853,"line_start":1767,"line_end":1767,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60669,"byte_end":60682,"line_start":1788,"line_end":1788,"column_start":8,"column_end":21},"name":"find_or_first","qualname":"::Itertools::find_or_first","value":"pub fn find_or_first<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the first element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the first element, if any.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60152,"byte_end":60251,"line_start":1776,"line_end":1776,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60256,"byte_end":60259,"line_start":1777,"line_end":1777,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60264,"byte_end":60326,"line_start":1778,"line_end":1778,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60331,"byte_end":60334,"line_start":1779,"line_end":1779,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60339,"byte_end":60346,"line_start":1780,"line_end":1780,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60351,"byte_end":60380,"line_start":1781,"line_end":1781,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60385,"byte_end":60388,"line_start":1782,"line_end":1782,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60393,"byte_end":60424,"line_start":1783,"line_end":1783,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 5), Some(&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60429,"byte_end":60497,"line_start":1784,"line_end":1784,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 2), Some(&3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60502,"byte_end":60570,"line_start":1785,"line_end":1785,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_first(|&x| x > 5), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60575,"byte_end":60649,"line_start":1786,"line_end":1786,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60654,"byte_end":60661,"line_start":1787,"line_end":1787,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61991,"byte_end":61999,"line_start":1824,"line_end":1824,"column_start":8,"column_end":16},"name":"contains","qualname":"::Itertools::contains","value":"pub fn contains<Q>(&mut Self, &Q) -> bool where Self: Sized,\nSelf::Item: Borrow<Q>, Q: PartialEq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Returns `true` if the given item is present in this iterator.","sig":null,"attributes":[{"value":"/ Returns `true` if the given item is present in this iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":60998,"byte_end":61063,"line_start":1799,"line_end":1799,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61068,"byte_end":61071,"line_start":1800,"line_end":1800,"column_start":5,"column_end":8}},{"value":"/ This method is short-circuiting. If the given item is present in this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61076,"byte_end":61149,"line_start":1801,"line_end":1801,"column_start":5,"column_end":78}},{"value":"/ iterator, this method will consume the iterator up-to-and-including","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61154,"byte_end":61225,"line_start":1802,"line_end":1802,"column_start":5,"column_end":76}},{"value":"/ the item. If the given item is not present in this iterator, the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61230,"byte_end":61298,"line_start":1803,"line_end":1803,"column_start":5,"column_end":73}},{"value":"/ iterator will be exhausted.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61303,"byte_end":61334,"line_start":1804,"line_end":1804,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61339,"byte_end":61342,"line_start":1805,"line_end":1805,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61347,"byte_end":61354,"line_start":1806,"line_end":1806,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61359,"byte_end":61388,"line_start":1807,"line_end":1807,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61393,"byte_end":61396,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ #[derive(PartialEq, Debug)]","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61401,"byte_end":61432,"line_start":1809,"line_end":1809,"column_start":5,"column_end":36}},{"value":"/ enum Enum { A, B, C, D, E, }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61437,"byte_end":61469,"line_start":1810,"line_end":1810,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61474,"byte_end":61478,"line_start":1811,"line_end":1811,"column_start":5,"column_end":9}},{"value":"/ let mut iter = vec![Enum::A, Enum::B, Enum::C, Enum::D].into_iter();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61483,"byte_end":61555,"line_start":1812,"line_end":1812,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61560,"byte_end":61564,"line_start":1813,"line_end":1813,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `B`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61569,"byte_end":61597,"line_start":1814,"line_end":1814,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::B), true);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61602,"byte_end":61648,"line_start":1815,"line_end":1815,"column_start":5,"column_end":51}},{"value":"/ // `B` was found, so the iterator now rests at the item after `B` (i.e, `C`).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61653,"byte_end":61734,"line_start":1816,"line_end":1816,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(iter.next(), Some(Enum::C));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61739,"byte_end":61782,"line_start":1817,"line_end":1817,"column_start":5,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61787,"byte_end":61791,"line_start":1818,"line_end":1818,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `E`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61796,"byte_end":61824,"line_start":1819,"line_end":1819,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::E), false);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61829,"byte_end":61876,"line_start":1820,"line_end":1820,"column_start":5,"column_end":52}},{"value":"/ // `E` wasn't found, so `iter` is now exhausted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61881,"byte_end":61932,"line_start":1821,"line_end":1821,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61937,"byte_end":61971,"line_start":1822,"line_end":1822,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":61976,"byte_end":61983,"line_start":1823,"line_end":1823,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62715,"byte_end":62724,"line_start":1849,"line_end":1849,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"pub fn all_equal(&mut Self) -> bool where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62176,"byte_end":62221,"line_start":1833,"line_end":1833,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62226,"byte_end":62229,"line_start":1834,"line_end":1834,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62234,"byte_end":62292,"line_start":1835,"line_end":1835,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62297,"byte_end":62300,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62305,"byte_end":62312,"line_start":1837,"line_end":1837,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62317,"byte_end":62346,"line_start":1838,"line_end":1838,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62351,"byte_end":62354,"line_start":1839,"line_end":1839,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62359,"byte_end":62412,"line_start":1840,"line_end":1840,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62417,"byte_end":62455,"line_start":1841,"line_end":1841,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62460,"byte_end":62503,"line_start":1842,"line_end":1842,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62508,"byte_end":62551,"line_start":1843,"line_end":1843,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62556,"byte_end":62599,"line_start":1844,"line_end":1844,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62604,"byte_end":62607,"line_start":1845,"line_end":1845,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62612,"byte_end":62648,"line_start":1846,"line_end":1846,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62653,"byte_end":62695,"line_start":1847,"line_end":1847,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62700,"byte_end":62707,"line_start":1848,"line_end":1848,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63456,"byte_end":63466,"line_start":1875,"line_end":1875,"column_start":8,"column_end":18},"name":"all_unique","qualname":"::Itertools::all_unique","value":"pub fn all_unique(&mut Self) -> bool where Self: Sized, Self::Item: Eq + Hash","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Check whether all elements are unique (non equal).","sig":null,"attributes":[{"value":"/ Check whether all elements are unique (non equal).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62934,"byte_end":62988,"line_start":1859,"line_end":1859,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":62993,"byte_end":62996,"line_start":1860,"line_end":1860,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have unique elements:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63001,"byte_end":63060,"line_start":1861,"line_end":1861,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63065,"byte_end":63068,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63073,"byte_end":63080,"line_start":1863,"line_end":1863,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63085,"byte_end":63114,"line_start":1864,"line_end":1864,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63119,"byte_end":63122,"line_start":1865,"line_end":1865,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 4, 1, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63127,"byte_end":63165,"line_start":1866,"line_end":1866,"column_start":5,"column_end":43}},{"value":"/ assert!(!data.iter().all_unique());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63170,"byte_end":63209,"line_start":1867,"line_end":1867,"column_start":5,"column_end":44}},{"value":"/ assert!(data[0..4].iter().all_unique());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63214,"byte_end":63258,"line_start":1868,"line_end":1868,"column_start":5,"column_end":49}},{"value":"/ assert!(data[1..6].iter().all_unique());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63263,"byte_end":63307,"line_start":1869,"line_end":1869,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63312,"byte_end":63315,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63320,"byte_end":63356,"line_start":1871,"line_end":1871,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_unique());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63361,"byte_end":63404,"line_start":1872,"line_end":1872,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63409,"byte_end":63416,"line_start":1873,"line_end":1873,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63421,"byte_end":63448,"line_start":1874,"line_end":1874,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64219,"byte_end":64227,"line_start":1898,"line_end":1898,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"pub fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63651,"byte_end":63712,"line_start":1883,"line_end":1883,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63717,"byte_end":63756,"line_start":1884,"line_end":1884,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63761,"byte_end":63764,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63769,"byte_end":63834,"line_start":1886,"line_end":1886,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63839,"byte_end":63871,"line_start":1887,"line_end":1887,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63876,"byte_end":63879,"line_start":1888,"line_end":1888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63884,"byte_end":63891,"line_start":1889,"line_end":1889,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63896,"byte_end":63925,"line_start":1890,"line_end":1890,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63930,"byte_end":63933,"line_start":1891,"line_end":1891,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63938,"byte_end":63986,"line_start":1892,"line_end":1892,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":63991,"byte_end":64039,"line_start":1893,"line_end":1893,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64044,"byte_end":64051,"line_start":1894,"line_end":1894,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64056,"byte_end":64059,"line_start":1895,"line_end":1895,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64064,"byte_end":64124,"line_start":1896,"line_end":1896,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64129,"byte_end":64211,"line_start":1897,"line_end":1897,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64920,"byte_end":64933,"line_start":1922,"line_end":1922,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"pub fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64370,"byte_end":64430,"line_start":1907,"line_end":1907,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64435,"byte_end":64474,"line_start":1908,"line_end":1908,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64479,"byte_end":64482,"line_start":1909,"line_end":1909,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64487,"byte_end":64550,"line_start":1910,"line_end":1910,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64555,"byte_end":64594,"line_start":1911,"line_end":1911,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64599,"byte_end":64602,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64607,"byte_end":64681,"line_start":1913,"line_end":1913,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64686,"byte_end":64718,"line_start":1914,"line_end":1914,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64723,"byte_end":64726,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64731,"byte_end":64738,"line_start":1916,"line_end":1916,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64743,"byte_end":64772,"line_start":1917,"line_end":1917,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64777,"byte_end":64780,"line_start":1918,"line_end":1918,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64785,"byte_end":64846,"line_start":1919,"line_end":1919,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64851,"byte_end":64900,"line_start":1920,"line_end":1920,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":64905,"byte_end":64912,"line_start":1921,"line_end":1921,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65721,"byte_end":65728,"line_start":1950,"line_end":1950,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"pub fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65130,"byte_end":65194,"line_start":1932,"line_end":1932,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65199,"byte_end":65202,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65207,"byte_end":65247,"line_start":1934,"line_end":1934,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65252,"byte_end":65255,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65260,"byte_end":65267,"line_start":1936,"line_end":1936,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65272,"byte_end":65305,"line_start":1937,"line_end":1937,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65310,"byte_end":65339,"line_start":1938,"line_end":1938,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65344,"byte_end":65347,"line_start":1939,"line_end":1939,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65352,"byte_end":65381,"line_start":1940,"line_end":1940,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65386,"byte_end":65389,"line_start":1941,"line_end":1941,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65394,"byte_end":65463,"line_start":1942,"line_end":1942,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65468,"byte_end":65537,"line_start":1943,"line_end":1943,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65542,"byte_end":65545,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65550,"byte_end":65563,"line_start":1945,"line_end":1945,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65568,"byte_end":65571,"line_start":1946,"line_end":1946,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65576,"byte_end":65636,"line_start":1947,"line_end":1947,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65641,"byte_end":65648,"line_start":1948,"line_end":1948,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65653,"byte_end":65713,"line_start":1949,"line_end":1949,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66361,"byte_end":66367,"line_start":1970,"line_end":1970,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"pub fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65849,"byte_end":65925,"line_start":1957,"line_end":1957,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65930,"byte_end":65933,"line_start":1958,"line_end":1958,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":65938,"byte_end":66013,"line_start":1959,"line_end":1959,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66018,"byte_end":66091,"line_start":1960,"line_end":1960,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66096,"byte_end":66122,"line_start":1961,"line_end":1961,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66127,"byte_end":66130,"line_start":1962,"line_end":1962,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66135,"byte_end":66146,"line_start":1963,"line_end":1963,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66151,"byte_end":66180,"line_start":1964,"line_end":1964,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66185,"byte_end":66188,"line_start":1965,"line_end":1965,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66193,"byte_end":66250,"line_start":1966,"line_end":1966,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66255,"byte_end":66297,"line_start":1967,"line_end":1967,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66302,"byte_end":66341,"line_start":1968,"line_end":1968,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66346,"byte_end":66353,"line_start":1969,"line_end":1969,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66706,"byte_end":66717,"line_start":1980,"line_end":1980,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"pub fn collect_vec(Self) -> Vec<Self::Item> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of [`Iterator::collect`],\n for convenience.\n","sig":null,"attributes":[{"value":"/ `.collect_vec()` is simply a type specialization of [`Iterator::collect`],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66561,"byte_end":66639,"line_start":1977,"line_end":1977,"column_start":5,"column_end":83}},{"value":"/ for convenience.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66644,"byte_end":66664,"line_start":1978,"line_end":1978,"column_start":5,"column_end":25}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66669,"byte_end":66698,"line_start":1979,"line_end":1979,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67361,"byte_end":67372,"line_start":2007,"line_end":2007,"column_start":8,"column_end":19},"name":"try_collect","qualname":"::Itertools::try_collect","value":"pub fn try_collect<T, U, E>(Self) -> Result<U, E> where Self: Sized +\nIterator<Item = Result<T, E>>, Result<U, E>: FromIterator<Result<T, E>>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" `.try_collect()` is more convenient way of writing\n `.collect::<Result<_, _>>()`","sig":null,"attributes":[{"value":"/ `.try_collect()` is more convenient way of writing","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66809,"byte_end":66863,"line_start":1986,"line_end":1986,"column_start":5,"column_end":59}},{"value":"/ `.collect::<Result<_, _>>()`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66868,"byte_end":66900,"line_start":1987,"line_end":1987,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66905,"byte_end":66908,"line_start":1988,"line_end":1988,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66913,"byte_end":66926,"line_start":1989,"line_end":1989,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66931,"byte_end":66934,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66939,"byte_end":66946,"line_start":1991,"line_end":1991,"column_start":5,"column_end":12}},{"value":"/ use std::{fs, io};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66951,"byte_end":66973,"line_start":1992,"line_end":1992,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":66978,"byte_end":67007,"line_start":1993,"line_end":1993,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67012,"byte_end":67015,"line_start":1994,"line_end":1994,"column_start":5,"column_end":8}},{"value":"/ fn process_dir_entries(entries: &[fs::DirEntry]) {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67020,"byte_end":67074,"line_start":1995,"line_end":1995,"column_start":5,"column_end":59}},{"value":"/     // ...","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67079,"byte_end":67093,"line_start":1996,"line_end":1996,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67098,"byte_end":67103,"line_start":1997,"line_end":1997,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67108,"byte_end":67111,"line_start":1998,"line_end":1998,"column_start":5,"column_end":8}},{"value":"/ fn do_stuff() -> std::io::Result<()> {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67116,"byte_end":67158,"line_start":1999,"line_end":1999,"column_start":5,"column_end":47}},{"value":"/     let entries: Vec<_> = fs::read_dir(\".\")?.try_collect()?;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67163,"byte_end":67227,"line_start":2000,"line_end":2000,"column_start":5,"column_end":69}},{"value":"/     process_dir_entries(&entries);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67232,"byte_end":67270,"line_start":2001,"line_end":2001,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67275,"byte_end":67278,"line_start":2002,"line_end":2002,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67283,"byte_end":67297,"line_start":2003,"line_end":2003,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67302,"byte_end":67307,"line_start":2004,"line_end":2004,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67312,"byte_end":67319,"line_start":2005,"line_end":2005,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67324,"byte_end":67353,"line_start":2006,"line_end":2006,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68082,"byte_end":68090,"line_start":2031,"line_end":2031,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"pub fn set_from<'a, A: 'a, J>(&mut Self, J) -> usize where Self: Iterator<Item\n= &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67557,"byte_end":67621,"line_start":2015,"line_end":2015,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67626,"byte_end":67676,"line_start":2016,"line_end":2016,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67681,"byte_end":67684,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67689,"byte_end":67762,"line_start":2018,"line_end":2018,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67767,"byte_end":67827,"line_start":2019,"line_end":2019,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67832,"byte_end":67835,"line_start":2020,"line_end":2020,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67840,"byte_end":67882,"line_start":2021,"line_end":2021,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67887,"byte_end":67890,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67895,"byte_end":67902,"line_start":2023,"line_end":2023,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67907,"byte_end":67936,"line_start":2024,"line_end":2024,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67941,"byte_end":67944,"line_start":2025,"line_end":2025,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67949,"byte_end":67973,"line_start":2026,"line_end":2026,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":67978,"byte_end":68010,"line_start":2027,"line_end":2027,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68015,"byte_end":68048,"line_start":2028,"line_end":2028,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68053,"byte_end":68060,"line_start":2029,"line_end":2029,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68065,"byte_end":68074,"line_start":2030,"line_end":2030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68836,"byte_end":68840,"line_start":2057,"line_end":2057,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"pub fn join(&mut Self, &str) -> String where Self::Item: std::fmt::Display","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, separated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68458,"byte_end":68528,"line_start":2046,"line_end":2046,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68533,"byte_end":68536,"line_start":2047,"line_end":2047,"column_start":5,"column_end":8}},{"value":"/ Use the `Display` implementation of each element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68541,"byte_end":68594,"line_start":2048,"line_end":2048,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68599,"byte_end":68602,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68607,"byte_end":68614,"line_start":2050,"line_end":2050,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68619,"byte_end":68648,"line_start":2051,"line_end":2051,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68653,"byte_end":68656,"line_start":2052,"line_end":2052,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68661,"byte_end":68722,"line_start":2053,"line_end":2053,"column_start":5,"column_end":66}},{"value":"/ assert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68727,"byte_end":68782,"line_start":2054,"line_end":2054,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68787,"byte_end":68794,"line_start":2055,"line_end":2055,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":68799,"byte_end":68828,"line_start":2056,"line_end":2056,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2584},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69974,"byte_end":69980,"line_start":2091,"line_end":2091,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"pub fn format(Self, &str) -> Format<, Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69486,"byte_end":69539,"line_start":2076,"line_end":2076,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69544,"byte_end":69547,"line_start":2077,"line_end":2077,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69552,"byte_end":69605,"line_start":2078,"line_end":2078,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69610,"byte_end":69655,"line_start":2079,"line_end":2079,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69660,"byte_end":69663,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69668,"byte_end":69735,"line_start":2081,"line_end":2081,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69740,"byte_end":69743,"line_start":2082,"line_end":2082,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69748,"byte_end":69755,"line_start":2083,"line_end":2083,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69760,"byte_end":69789,"line_start":2084,"line_end":2084,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69794,"byte_end":69797,"line_start":2085,"line_end":2085,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69802,"byte_end":69837,"line_start":2086,"line_end":2086,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69842,"byte_end":69857,"line_start":2087,"line_end":2087,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69862,"byte_end":69913,"line_start":2088,"line_end":2088,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69918,"byte_end":69954,"line_start":2089,"line_end":2089,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":69959,"byte_end":69966,"line_start":2090,"line_end":2090,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71479,"byte_end":71490,"line_start":2129,"line_end":2129,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"pub fn format_with<F>(Self, &str, F) -> FormatWith<, Self, F> where\nSelf: Sized,\nF: FnMut(Self::Item, &mut dyn FnMut(&dyn fmt::Display) -> fmt::Result) ->\nfmt::Result","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70104,"byte_end":70157,"line_start":2097,"line_end":2097,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70162,"byte_end":70165,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of [`.format()`](Itertools::format).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70170,"byte_end":70241,"line_start":2099,"line_end":2099,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70246,"byte_end":70249,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70254,"byte_end":70324,"line_start":2101,"line_end":2101,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70329,"byte_end":70392,"line_start":2102,"line_end":2102,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70397,"byte_end":70472,"line_start":2103,"line_end":2103,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70477,"byte_end":70480,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70485,"byte_end":70557,"line_start":2105,"line_end":2105,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70562,"byte_end":70638,"line_start":2106,"line_end":2106,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70643,"byte_end":70646,"line_start":2107,"line_end":2107,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70651,"byte_end":70718,"line_start":2108,"line_end":2108,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70723,"byte_end":70726,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70731,"byte_end":70738,"line_start":2110,"line_end":2110,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70743,"byte_end":70772,"line_start":2111,"line_end":2111,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70777,"byte_end":70780,"line_start":2112,"line_end":2112,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70785,"byte_end":70820,"line_start":2113,"line_end":2113,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70825,"byte_end":70921,"line_start":2114,"line_end":2114,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70926,"byte_end":70971,"line_start":2115,"line_end":2115,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":70976,"byte_end":71012,"line_start":2116,"line_end":2116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71017,"byte_end":71020,"line_start":2117,"line_end":2117,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71025,"byte_end":71072,"line_start":2118,"line_end":2118,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71077,"byte_end":71108,"line_start":2119,"line_end":2119,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71113,"byte_end":71145,"line_start":2120,"line_end":2120,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71150,"byte_end":71219,"line_start":2121,"line_end":2121,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71224,"byte_end":71310,"line_start":2122,"line_end":2122,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71315,"byte_end":71351,"line_start":2123,"line_end":2123,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71356,"byte_end":71403,"line_start":2124,"line_end":2124,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71408,"byte_end":71443,"line_start":2125,"line_end":2125,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71448,"byte_end":71451,"line_start":2126,"line_end":2126,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71456,"byte_end":71459,"line_start":2127,"line_end":2127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71464,"byte_end":71471,"line_start":2128,"line_end":2128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71852,"byte_end":71864,"line_start":2138,"line_end":2138,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"pub fn fold_results<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" See [`.fold_ok()`](Itertools::fold_ok).\n","sig":null,"attributes":[{"value":"/ See [`.fold_ok()`](Itertools::fold_ok).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71736,"byte_end":71779,"line_start":2136,"line_end":2136,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"Use .fold_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":71784,"byte_end":71844,"line_start":2137,"line_end":2137,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73527,"byte_end":73534,"line_start":2187,"line_end":2187,"column_start":8,"column_end":15},"name":"fold_ok","qualname":"::Itertools::fold_ok","value":"pub fn fold_ok<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72053,"byte_end":72095,"line_start":2145,"line_end":2145,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72100,"byte_end":72103,"line_start":2146,"line_end":2146,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72108,"byte_end":72179,"line_start":2147,"line_end":2147,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72184,"byte_end":72254,"line_start":2148,"line_end":2148,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72259,"byte_end":72336,"line_start":2149,"line_end":2149,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72341,"byte_end":72376,"line_start":2150,"line_end":2150,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72381,"byte_end":72384,"line_start":2151,"line_end":2151,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72389,"byte_end":72446,"line_start":2152,"line_end":2152,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72451,"byte_end":72529,"line_start":2153,"line_end":2153,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72534,"byte_end":72618,"line_start":2154,"line_end":2154,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72623,"byte_end":72626,"line_start":2155,"line_end":2155,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72631,"byte_end":72698,"line_start":2156,"line_end":2156,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72703,"byte_end":72729,"line_start":2157,"line_end":2157,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72734,"byte_end":72737,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72742,"byte_end":72755,"line_start":2159,"line_end":2159,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72760,"byte_end":72786,"line_start":2160,"line_end":2160,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72791,"byte_end":72815,"line_start":2161,"line_end":2161,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72820,"byte_end":72844,"line_start":2162,"line_end":2162,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72849,"byte_end":72873,"line_start":2163,"line_end":2163,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72878,"byte_end":72885,"line_start":2164,"line_end":2164,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72890,"byte_end":72893,"line_start":2165,"line_end":2165,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72898,"byte_end":72964,"line_start":2166,"line_end":2166,"column_start":5,"column_end":71}},{"value":"/ this effectively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":72969,"byte_end":73020,"line_start":2167,"line_end":2167,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73025,"byte_end":73028,"line_start":2168,"line_end":2168,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73033,"byte_end":73040,"line_start":2169,"line_end":2169,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73045,"byte_end":73067,"line_start":2170,"line_end":2170,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73072,"byte_end":73101,"line_start":2171,"line_end":2171,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73106,"byte_end":73109,"line_start":2172,"line_end":2172,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73114,"byte_end":73152,"line_start":2173,"line_end":2173,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73157,"byte_end":73172,"line_start":2174,"line_end":2174,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73177,"byte_end":73198,"line_start":2175,"line_end":2175,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73203,"byte_end":73234,"line_start":2176,"line_end":2176,"column_start":5,"column_end":36}},{"value":"/           .fold_ok(0, Add::add),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73239,"byte_end":73275,"line_start":2177,"line_end":2177,"column_start":5,"column_end":41}},{"value":"/     Ok(3)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73280,"byte_end":73293,"line_start":2178,"line_end":2178,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73298,"byte_end":73304,"line_start":2179,"line_end":2179,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73309,"byte_end":73321,"line_start":2180,"line_end":2180,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73326,"byte_end":73347,"line_start":2181,"line_end":2181,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73352,"byte_end":73428,"line_start":2182,"line_end":2182,"column_start":5,"column_end":81}},{"value":"/           .fold_ok(0, Add::add)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73433,"byte_end":73468,"line_start":2183,"line_end":2183,"column_start":5,"column_end":40}},{"value":"/           .is_err()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73473,"byte_end":73496,"line_start":2184,"line_end":2184,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73501,"byte_end":73507,"line_start":2185,"line_end":2185,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73512,"byte_end":73519,"line_start":2186,"line_end":2186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74708,"byte_end":74720,"line_start":2219,"line_end":2219,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"pub fn fold_options<A, B, F>(&mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73879,"byte_end":73921,"line_start":2200,"line_end":2200,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73926,"byte_end":73929,"line_start":2201,"line_end":2201,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":73934,"byte_end":74008,"line_start":2202,"line_end":2202,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74013,"byte_end":74085,"line_start":2203,"line_end":2203,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74090,"byte_end":74165,"line_start":2204,"line_end":2204,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74170,"byte_end":74173,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to [`fold_ok`](Itertools::fold_ok).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74178,"byte_end":74249,"line_start":2206,"line_end":2206,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74254,"byte_end":74257,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74262,"byte_end":74269,"line_start":2208,"line_end":2208,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74274,"byte_end":74296,"line_start":2209,"line_end":2209,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74301,"byte_end":74330,"line_start":2210,"line_end":2210,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74335,"byte_end":74338,"line_start":2211,"line_end":2211,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74343,"byte_end":74409,"line_start":2212,"line_end":2212,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74414,"byte_end":74484,"line_start":2213,"line_end":2213,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74489,"byte_end":74492,"line_start":2214,"line_end":2214,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74497,"byte_end":74564,"line_start":2215,"line_end":2215,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74569,"byte_end":74630,"line_start":2216,"line_end":2216,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74635,"byte_end":74688,"line_start":2217,"line_end":2217,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":74693,"byte_end":74700,"line_start":2218,"line_end":2218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75520,"byte_end":75525,"line_start":2244,"line_end":2244,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"pub fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75056,"byte_end":75104,"line_start":2232,"line_end":2232,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75109,"byte_end":75112,"line_start":2233,"line_end":2233,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75117,"byte_end":75176,"line_start":2234,"line_end":2234,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75181,"byte_end":75240,"line_start":2235,"line_end":2235,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75245,"byte_end":75318,"line_start":2236,"line_end":2236,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75323,"byte_end":75326,"line_start":2237,"line_end":2237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75331,"byte_end":75338,"line_start":2238,"line_end":2238,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75343,"byte_end":75372,"line_start":2239,"line_end":2239,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75377,"byte_end":75380,"line_start":2240,"line_end":2240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75385,"byte_end":75446,"line_start":2241,"line_end":2241,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75451,"byte_end":75500,"line_start":2242,"line_end":2242,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75505,"byte_end":75512,"line_start":2243,"line_end":2243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2604},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77513,"byte_end":77523,"line_start":2299,"line_end":2299,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"pub fn tree_fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[{"value":"/ Accumulate the elements in the iterator in a tree-like manner.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75723,"byte_end":75789,"line_start":2251,"line_end":2251,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75794,"byte_end":75797,"line_start":2252,"line_end":2252,"column_start":5,"column_end":8}},{"value":"/ You can think of it as, while there's more than one item, repeatedly","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75802,"byte_end":75874,"line_start":2253,"line_end":2253,"column_start":5,"column_end":77}},{"value":"/ combining adjacent items.  It does so in bottom-up-merge-sort order,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75879,"byte_end":75951,"line_start":2254,"line_end":2254,"column_start":5,"column_end":77}},{"value":"/ however, so that it needs only logarithmic stack space.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":75956,"byte_end":76015,"line_start":2255,"line_end":2255,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76020,"byte_end":76023,"line_start":2256,"line_end":2256,"column_start":5,"column_end":8}},{"value":"/ This produces a call tree like the following (where the calls under","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76028,"byte_end":76099,"line_start":2257,"line_end":2257,"column_start":5,"column_end":76}},{"value":"/ an item are done after reading that item):","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76104,"byte_end":76150,"line_start":2258,"line_end":2258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76155,"byte_end":76158,"line_start":2259,"line_end":2259,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76163,"byte_end":76174,"line_start":2260,"line_end":2260,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76179,"byte_end":76196,"line_start":2261,"line_end":2261,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76201,"byte_end":76232,"line_start":2262,"line_end":2262,"column_start":5,"column_end":22}},{"value":"/ └─f └─f └─f │","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76237,"byte_end":76268,"line_start":2263,"line_end":2263,"column_start":5,"column_end":22}},{"value":"/   │   │   │ │","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76273,"byte_end":76298,"line_start":2264,"line_end":2264,"column_start":5,"column_end":22}},{"value":"/   └───f   └─f","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76303,"byte_end":76332,"line_start":2265,"line_end":2265,"column_start":5,"column_end":22}},{"value":"/       │     │","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76337,"byte_end":76358,"line_start":2266,"line_end":2266,"column_start":5,"column_end":22}},{"value":"/       └─────f","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76363,"byte_end":76392,"line_start":2267,"line_end":2267,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76397,"byte_end":76404,"line_start":2268,"line_end":2268,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76409,"byte_end":76412,"line_start":2269,"line_end":2269,"column_start":5,"column_end":8}},{"value":"/ Which, for non-associative functions, will typically produce a different","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76417,"byte_end":76493,"line_start":2270,"line_end":2270,"column_start":5,"column_end":81}},{"value":"/ result than the linear call tree used by `fold1`:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76498,"byte_end":76551,"line_start":2271,"line_end":2271,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76556,"byte_end":76559,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76564,"byte_end":76575,"line_start":2273,"line_end":2273,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76580,"byte_end":76597,"line_start":2274,"line_end":2274,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76602,"byte_end":76633,"line_start":2275,"line_end":2275,"column_start":5,"column_end":22}},{"value":"/ └─f─f─f─f─f─f","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76638,"byte_end":76669,"line_start":2276,"line_end":2276,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76674,"byte_end":76681,"line_start":2277,"line_end":2277,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76686,"byte_end":76689,"line_start":2278,"line_end":2278,"column_start":5,"column_end":8}},{"value":"/ If `f` is associative, prefer the normal `fold1` instead.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76694,"byte_end":76755,"line_start":2279,"line_end":2279,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76760,"byte_end":76763,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76768,"byte_end":76775,"line_start":2281,"line_end":2281,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76780,"byte_end":76809,"line_start":2282,"line_end":2282,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76814,"byte_end":76817,"line_start":2283,"line_end":2283,"column_start":5,"column_end":8}},{"value":"/ // The same tree as above","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76822,"byte_end":76851,"line_start":2284,"line_end":2284,"column_start":5,"column_end":34}},{"value":"/ let num_strings = (1..8).map(|x| x.to_string());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76856,"byte_end":76908,"line_start":2285,"line_end":2285,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76913,"byte_end":76986,"line_start":2286,"line_end":2286,"column_start":5,"column_end":78}},{"value":"/     Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":76991,"byte_end":77060,"line_start":2287,"line_end":2287,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77065,"byte_end":77068,"line_start":2288,"line_end":2288,"column_start":5,"column_end":8}},{"value":"/ // Like fold1, an empty iterator produces None","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77073,"byte_end":77123,"line_start":2289,"line_end":2289,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((0..0).tree_fold1(|x, y| x * y), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77128,"byte_end":77182,"line_start":2290,"line_end":2290,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77187,"byte_end":77190,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ // tree_fold1 matches fold1 for associative operations...","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77195,"byte_end":77256,"line_start":2292,"line_end":2292,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..10).tree_fold1(|x, y| x + y),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77261,"byte_end":77309,"line_start":2293,"line_end":2293,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x + y));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77314,"byte_end":77351,"line_start":2294,"line_end":2294,"column_start":5,"column_end":42}},{"value":"/ // ...but not for non-associative ones","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77356,"byte_end":77398,"line_start":2295,"line_end":2295,"column_start":5,"column_end":47}},{"value":"/ assert_ne!((0..10).tree_fold1(|x, y| x - y),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77403,"byte_end":77451,"line_start":2296,"line_end":2296,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x - y));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77456,"byte_end":77493,"line_start":2297,"line_end":2297,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":77498,"byte_end":77505,"line_start":2298,"line_end":2298,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81024,"byte_end":81034,"line_start":2397,"line_end":2397,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"pub fn fold_while<B, F>(&mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79698,"byte_end":79778,"line_start":2358,"line_end":2358,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79783,"byte_end":79786,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to [`Iterator::fold`] but with additional support for","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79791,"byte_end":79887,"line_start":2360,"line_end":2360,"column_start":5,"column_end":101}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79892,"byte_end":79928,"line_start":2361,"line_end":2361,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79933,"byte_end":79936,"line_start":2362,"line_end":2362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79941,"byte_end":79948,"line_start":2363,"line_end":2363,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79953,"byte_end":79982,"line_start":2364,"line_end":2364,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":79987,"byte_end":80034,"line_start":2365,"line_end":2365,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80039,"byte_end":80042,"line_start":2366,"line_end":2366,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80047,"byte_end":80097,"line_start":2367,"line_end":2367,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80102,"byte_end":80105,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80110,"byte_end":80133,"line_start":2369,"line_end":2369,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80138,"byte_end":80141,"line_start":2370,"line_end":2370,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80146,"byte_end":80162,"line_start":2371,"line_end":2371,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80167,"byte_end":80190,"line_start":2372,"line_end":2372,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80195,"byte_end":80214,"line_start":2373,"line_end":2373,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80219,"byte_end":80237,"line_start":2374,"line_end":2374,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80242,"byte_end":80251,"line_start":2375,"line_end":2375,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80256,"byte_end":80284,"line_start":2376,"line_end":2376,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80289,"byte_end":80294,"line_start":2377,"line_end":2377,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80299,"byte_end":80302,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80307,"byte_end":80319,"line_start":2379,"line_end":2379,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80324,"byte_end":80375,"line_start":2380,"line_end":2380,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80380,"byte_end":80422,"line_start":2381,"line_end":2381,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80427,"byte_end":80434,"line_start":2382,"line_end":2382,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80439,"byte_end":80442,"line_start":2383,"line_end":2383,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80447,"byte_end":80465,"line_start":2384,"line_end":2384,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80470,"byte_end":80527,"line_start":2385,"line_end":2385,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80532,"byte_end":80590,"line_start":2386,"line_end":2386,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80595,"byte_end":80615,"line_start":2387,"line_end":2387,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80620,"byte_end":80623,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80628,"byte_end":80651,"line_start":2389,"line_end":2389,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80656,"byte_end":80688,"line_start":2390,"line_end":2390,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80693,"byte_end":80726,"line_start":2391,"line_end":2391,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80731,"byte_end":80738,"line_start":2392,"line_end":2392,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80743,"byte_end":80746,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80751,"byte_end":80839,"line_start":2394,"line_end":2394,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80844,"byte_end":80923,"line_start":2395,"line_end":2395,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":80928,"byte_end":81016,"line_start":2396,"line_end":2396,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82282,"byte_end":82286,"line_start":2440,"line_end":2440,"column_start":8,"column_end":12},"name":"sum1","qualname":"::Itertools::sum1","value":"pub fn sum1<S>(Self) -> Option<S> where Self: Sized,\nS: std::iter::Sum<Self::Item>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and add all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and add all the elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81640,"byte_end":81702,"line_start":2419,"line_end":2419,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81707,"byte_end":81710,"line_start":2420,"line_end":2420,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(sum)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81715,"byte_end":81775,"line_start":2421,"line_end":2421,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81780,"byte_end":81783,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81788,"byte_end":81800,"line_start":2423,"line_end":2423,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81805,"byte_end":81808,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ When calling `sum1()` and a primitive integer type is being returned, this","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81813,"byte_end":81891,"line_start":2425,"line_end":2425,"column_start":5,"column_end":83}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81896,"byte_end":81971,"line_start":2426,"line_end":2426,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81976,"byte_end":81988,"line_start":2427,"line_end":2427,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":81993,"byte_end":81996,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82001,"byte_end":82015,"line_start":2429,"line_end":2429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82020,"byte_end":82023,"line_start":2430,"line_end":2430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82028,"byte_end":82035,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82040,"byte_end":82069,"line_start":2432,"line_end":2432,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82074,"byte_end":82077,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ let empty_sum = (1..1).sum1::<i32>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82082,"byte_end":82123,"line_start":2434,"line_end":2434,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(empty_sum, None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82128,"byte_end":82160,"line_start":2435,"line_end":2435,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82165,"byte_end":82168,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let nonempty_sum = (1..11).sum1::<i32>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82173,"byte_end":82218,"line_start":2437,"line_end":2437,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(nonempty_sum, Some(55));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82223,"byte_end":82262,"line_start":2438,"line_end":2438,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82267,"byte_end":82274,"line_start":2439,"line_end":2439,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83149,"byte_end":83157,"line_start":2468,"line_end":2468,"column_start":8,"column_end":16},"name":"product1","qualname":"::Itertools::product1","value":"pub fn product1<P>(Self) -> Option<P> where Self: Sized,\nP: std::iter::Product<Self::Item>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and multiply all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and multiply all the elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82478,"byte_end":82545,"line_start":2448,"line_end":2448,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82550,"byte_end":82553,"line_start":2449,"line_end":2449,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(product)`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82558,"byte_end":82622,"line_start":2450,"line_end":2450,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82627,"byte_end":82630,"line_start":2451,"line_end":2451,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82635,"byte_end":82647,"line_start":2452,"line_end":2452,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82652,"byte_end":82655,"line_start":2453,"line_end":2453,"column_start":5,"column_end":8}},{"value":"/ When calling `product1()` and a primitive integer type is being returned,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82660,"byte_end":82737,"line_start":2454,"line_end":2454,"column_start":5,"column_end":82}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82742,"byte_end":82817,"line_start":2455,"line_end":2455,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82822,"byte_end":82834,"line_start":2456,"line_end":2456,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82839,"byte_end":82842,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82847,"byte_end":82861,"line_start":2458,"line_end":2458,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82866,"byte_end":82873,"line_start":2459,"line_end":2459,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82878,"byte_end":82907,"line_start":2460,"line_end":2460,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82912,"byte_end":82915,"line_start":2461,"line_end":2461,"column_start":5,"column_end":8}},{"value":"/ let empty_product = (1..1).product1::<i32>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82920,"byte_end":82969,"line_start":2462,"line_end":2462,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(empty_product, None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":82974,"byte_end":83010,"line_start":2463,"line_end":2463,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83015,"byte_end":83018,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ let nonempty_product = (1..11).product1::<i32>();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83023,"byte_end":83076,"line_start":2465,"line_end":2465,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(nonempty_product, Some(3628800));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83081,"byte_end":83129,"line_start":2466,"line_end":2466,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83134,"byte_end":83141,"line_start":2467,"line_end":2467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84067,"byte_end":84082,"line_start":2494,"line_end":2494,"column_start":8,"column_end":23},"name":"sorted_unstable","qualname":"::Itertools::sorted_unstable","value":"pub fn sorted_unstable(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83357,"byte_end":83427,"line_start":2476,"line_end":2476,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83432,"byte_end":83435,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83440,"byte_end":83497,"line_start":2478,"line_end":2478,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83502,"byte_end":83569,"line_start":2479,"line_end":2479,"column_start":5,"column_end":72}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83574,"byte_end":83610,"line_start":2480,"line_end":2480,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83615,"byte_end":83618,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83623,"byte_end":83694,"line_start":2482,"line_end":2482,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83699,"byte_end":83748,"line_start":2483,"line_end":2483,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83753,"byte_end":83756,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83761,"byte_end":83768,"line_start":2485,"line_end":2485,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83773,"byte_end":83802,"line_start":2486,"line_end":2486,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83807,"byte_end":83810,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83815,"byte_end":83869,"line_start":2488,"line_end":2488,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83874,"byte_end":83898,"line_start":2489,"line_end":2489,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted_unstable(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83903,"byte_end":83962,"line_start":2490,"line_end":2490,"column_start":5,"column_end":64}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":83967,"byte_end":84013,"line_start":2491,"line_end":2491,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84018,"byte_end":84025,"line_start":2492,"line_end":2492,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84030,"byte_end":84059,"line_start":2493,"line_end":2493,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85342,"byte_end":85360,"line_start":2529,"line_end":2529,"column_start":8,"column_end":26},"name":"sorted_unstable_by","qualname":"::Itertools::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84389,"byte_end":84459,"line_start":2505,"line_end":2505,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84464,"byte_end":84467,"line_start":2506,"line_end":2506,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84472,"byte_end":84529,"line_start":2507,"line_end":2507,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84534,"byte_end":84604,"line_start":2508,"line_end":2508,"column_start":5,"column_end":75}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84609,"byte_end":84645,"line_start":2509,"line_end":2509,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84650,"byte_end":84653,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84658,"byte_end":84729,"line_start":2511,"line_end":2511,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84734,"byte_end":84783,"line_start":2512,"line_end":2512,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84788,"byte_end":84791,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84796,"byte_end":84803,"line_start":2514,"line_end":2514,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84808,"byte_end":84837,"line_start":2515,"line_end":2515,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84842,"byte_end":84845,"line_start":2516,"line_end":2516,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84850,"byte_end":84895,"line_start":2517,"line_end":2517,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84900,"byte_end":84978,"line_start":2518,"line_end":2518,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84983,"byte_end":84986,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":84991,"byte_end":85027,"line_start":2520,"line_end":2520,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85032,"byte_end":85052,"line_start":2521,"line_end":2521,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85057,"byte_end":85113,"line_start":2522,"line_end":2522,"column_start":5,"column_end":61}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85118,"byte_end":85156,"line_start":2523,"line_end":2523,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85161,"byte_end":85164,"line_start":2524,"line_end":2524,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85169,"byte_end":85217,"line_start":2525,"line_end":2525,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85222,"byte_end":85288,"line_start":2526,"line_end":2526,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85293,"byte_end":85300,"line_start":2527,"line_end":2527,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85305,"byte_end":85334,"line_start":2528,"line_end":2528,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86550,"byte_end":86572,"line_start":2562,"line_end":2562,"column_start":8,"column_end":30},"name":"sorted_unstable_by_key","qualname":"::Itertools::sorted_unstable_by_key","value":"pub fn sorted_unstable_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85608,"byte_end":85678,"line_start":2538,"line_end":2538,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85683,"byte_end":85686,"line_start":2539,"line_end":2539,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85691,"byte_end":85748,"line_start":2540,"line_end":2540,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by_key`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85753,"byte_end":85827,"line_start":2541,"line_end":2541,"column_start":5,"column_end":79}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85832,"byte_end":85868,"line_start":2542,"line_end":2542,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85873,"byte_end":85876,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85881,"byte_end":85952,"line_start":2544,"line_end":2544,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":85957,"byte_end":86006,"line_start":2545,"line_end":2545,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86011,"byte_end":86014,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86019,"byte_end":86026,"line_start":2547,"line_end":2547,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86031,"byte_end":86060,"line_start":2548,"line_end":2548,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86065,"byte_end":86068,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86073,"byte_end":86118,"line_start":2550,"line_end":2550,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86123,"byte_end":86201,"line_start":2551,"line_end":2551,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86206,"byte_end":86209,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86214,"byte_end":86250,"line_start":2553,"line_end":2553,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86255,"byte_end":86275,"line_start":2554,"line_end":2554,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by_key(|x| -x.1)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86280,"byte_end":86321,"line_start":2555,"line_end":2555,"column_start":5,"column_end":46}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86326,"byte_end":86364,"line_start":2556,"line_end":2556,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86369,"byte_end":86372,"line_start":2557,"line_end":2557,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86377,"byte_end":86425,"line_start":2558,"line_end":2558,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86430,"byte_end":86496,"line_start":2559,"line_end":2559,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86501,"byte_end":86508,"line_start":2560,"line_end":2560,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86513,"byte_end":86542,"line_start":2561,"line_end":2561,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87517,"byte_end":87523,"line_start":2590,"line_end":2590,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"pub fn sorted(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86825,"byte_end":86895,"line_start":2572,"line_end":2572,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86900,"byte_end":86903,"line_start":2573,"line_end":2573,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86908,"byte_end":86965,"line_start":2574,"line_end":2574,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":86970,"byte_end":87028,"line_start":2575,"line_end":2575,"column_start":5,"column_end":63}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87033,"byte_end":87069,"line_start":2576,"line_end":2576,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87074,"byte_end":87077,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87082,"byte_end":87153,"line_start":2578,"line_end":2578,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87158,"byte_end":87207,"line_start":2579,"line_end":2579,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87212,"byte_end":87215,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87220,"byte_end":87227,"line_start":2581,"line_end":2581,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87232,"byte_end":87261,"line_start":2582,"line_end":2582,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87266,"byte_end":87269,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87274,"byte_end":87328,"line_start":2584,"line_end":2584,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87333,"byte_end":87357,"line_start":2585,"line_end":2585,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted(),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87362,"byte_end":87412,"line_start":2586,"line_end":2586,"column_start":5,"column_end":55}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87417,"byte_end":87463,"line_start":2587,"line_end":2587,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87468,"byte_end":87475,"line_start":2588,"line_end":2588,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87480,"byte_end":87509,"line_start":2589,"line_end":2589,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88747,"byte_end":88756,"line_start":2625,"line_end":2625,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> VecIntoIter<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87812,"byte_end":87882,"line_start":2601,"line_end":2601,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87887,"byte_end":87890,"line_start":2602,"line_end":2602,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87895,"byte_end":87952,"line_start":2603,"line_end":2603,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":87957,"byte_end":88018,"line_start":2604,"line_end":2604,"column_start":5,"column_end":66}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88023,"byte_end":88059,"line_start":2605,"line_end":2605,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88064,"byte_end":88067,"line_start":2606,"line_end":2606,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88072,"byte_end":88143,"line_start":2607,"line_end":2607,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88148,"byte_end":88197,"line_start":2608,"line_end":2608,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88202,"byte_end":88205,"line_start":2609,"line_end":2609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88210,"byte_end":88217,"line_start":2610,"line_end":2610,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88222,"byte_end":88251,"line_start":2611,"line_end":2611,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88256,"byte_end":88259,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88264,"byte_end":88309,"line_start":2613,"line_end":2613,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88314,"byte_end":88392,"line_start":2614,"line_end":2614,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88397,"byte_end":88400,"line_start":2615,"line_end":2615,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88405,"byte_end":88441,"line_start":2616,"line_end":2616,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88446,"byte_end":88466,"line_start":2617,"line_end":2617,"column_start":5,"column_end":25}},{"value":"/     .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88471,"byte_end":88518,"line_start":2618,"line_end":2618,"column_start":5,"column_end":52}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88523,"byte_end":88561,"line_start":2619,"line_end":2619,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88566,"byte_end":88569,"line_start":2620,"line_end":2620,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88574,"byte_end":88622,"line_start":2621,"line_end":2621,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88627,"byte_end":88693,"line_start":2622,"line_end":2622,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88698,"byte_end":88705,"line_start":2623,"line_end":2623,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88710,"byte_end":88739,"line_start":2624,"line_end":2624,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89919,"byte_end":89932,"line_start":2658,"line_end":2658,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"pub fn sorted_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":88995,"byte_end":89065,"line_start":2634,"line_end":2634,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89070,"byte_end":89073,"line_start":2635,"line_end":2635,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89078,"byte_end":89135,"line_start":2636,"line_end":2636,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by_key`] method and returns the result as a new","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89140,"byte_end":89205,"line_start":2637,"line_end":2637,"column_start":5,"column_end":70}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89210,"byte_end":89246,"line_start":2638,"line_end":2638,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89251,"byte_end":89254,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89259,"byte_end":89330,"line_start":2640,"line_end":2640,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89335,"byte_end":89384,"line_start":2641,"line_end":2641,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89389,"byte_end":89392,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89397,"byte_end":89404,"line_start":2643,"line_end":2643,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89409,"byte_end":89438,"line_start":2644,"line_end":2644,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89443,"byte_end":89446,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89451,"byte_end":89496,"line_start":2646,"line_end":2646,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89501,"byte_end":89579,"line_start":2647,"line_end":2647,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89584,"byte_end":89587,"line_start":2648,"line_end":2648,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89592,"byte_end":89628,"line_start":2649,"line_end":2649,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89633,"byte_end":89653,"line_start":2650,"line_end":2650,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_key(|x| -x.1)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89658,"byte_end":89690,"line_start":2651,"line_end":2651,"column_start":5,"column_end":37}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89695,"byte_end":89733,"line_start":2652,"line_end":2652,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89738,"byte_end":89741,"line_start":2653,"line_end":2653,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89746,"byte_end":89794,"line_start":2654,"line_end":2654,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89799,"byte_end":89865,"line_start":2655,"line_end":2655,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89870,"byte_end":89877,"line_start":2656,"line_end":2656,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":89882,"byte_end":89911,"line_start":2657,"line_end":2657,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91289,"byte_end":91299,"line_start":2696,"line_end":2696,"column_start":8,"column_end":18},"name":"k_smallest","qualname":"::Itertools::k_smallest","value":"pub fn k_smallest(Self, usize) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Sort the k smallest elements into a new iterator, in ascending order.","sig":null,"attributes":[{"value":"/ Sort the k smallest elements into a new iterator, in ascending order.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90176,"byte_end":90249,"line_start":2668,"line_end":2668,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90254,"byte_end":90257,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, and returns the result","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90262,"byte_end":90333,"line_start":2670,"line_end":2670,"column_start":5,"column_end":76}},{"value":"/ as a new iterator that owns its elements.  If the input contains","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90338,"byte_end":90406,"line_start":2671,"line_end":2671,"column_start":5,"column_end":73}},{"value":"/ less than k elements, the result is equivalent to `self.sorted()`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90411,"byte_end":90481,"line_start":2672,"line_end":2672,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90486,"byte_end":90489,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to use `k * sizeof(Self::Item) + O(1)` memory","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90494,"byte_end":90562,"line_start":2674,"line_end":2674,"column_start":5,"column_end":73}},{"value":"/ and `O(n log k)` time, with `n` the number of elements in the input.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90567,"byte_end":90639,"line_start":2675,"line_end":2675,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90644,"byte_end":90647,"line_start":2676,"line_end":2676,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90652,"byte_end":90723,"line_start":2677,"line_end":2677,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90728,"byte_end":90777,"line_start":2678,"line_end":2678,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90782,"byte_end":90785,"line_start":2679,"line_end":2679,"column_start":5,"column_end":8}},{"value":"/ **Note:** This is functionally-equivalent to `self.sorted().take(k)`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90790,"byte_end":90862,"line_start":2680,"line_end":2680,"column_start":5,"column_end":77}},{"value":"/ but much more efficient.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90867,"byte_end":90895,"line_start":2681,"line_end":2681,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90900,"byte_end":90903,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90908,"byte_end":90915,"line_start":2683,"line_end":2683,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90920,"byte_end":90949,"line_start":2684,"line_end":2684,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90954,"byte_end":90957,"line_start":2685,"line_end":2685,"column_start":5,"column_end":8}},{"value":"/ // A random permutation of 0..15","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":90962,"byte_end":90998,"line_start":2686,"line_end":2686,"column_start":5,"column_end":41}},{"value":"/ let numbers = vec![6, 9, 1, 14, 0, 4, 8, 7, 11, 2, 10, 3, 13, 12, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91003,"byte_end":91076,"line_start":2687,"line_end":2687,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91081,"byte_end":91084,"line_start":2688,"line_end":2688,"column_start":5,"column_end":8}},{"value":"/ let five_smallest = numbers","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91089,"byte_end":91120,"line_start":2689,"line_end":2689,"column_start":5,"column_end":36}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91125,"byte_end":91145,"line_start":2690,"line_end":2690,"column_start":5,"column_end":25}},{"value":"/     .k_smallest(5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91150,"byte_end":91173,"line_start":2691,"line_end":2691,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91178,"byte_end":91181,"line_start":2692,"line_end":2692,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(five_smallest, 0..5);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91186,"byte_end":91235,"line_start":2693,"line_end":2693,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91240,"byte_end":91247,"line_start":2694,"line_end":2694,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91252,"byte_end":91281,"line_start":2695,"line_end":2695,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92231,"byte_end":92244,"line_start":2726,"line_end":2726,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"pub fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: FnMut(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike [`Iterator::partition`], each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91520,"byte_end":91569,"line_start":2705,"line_end":2705,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike [`Iterator::partition`], each partition may","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91574,"byte_end":91640,"line_start":2706,"line_end":2706,"column_start":5,"column_end":71}},{"value":"/ have a distinct type.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91645,"byte_end":91670,"line_start":2707,"line_end":2707,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91675,"byte_end":91678,"line_start":2708,"line_end":2708,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91683,"byte_end":91690,"line_start":2709,"line_end":2709,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91695,"byte_end":91734,"line_start":2710,"line_end":2710,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91739,"byte_end":91742,"line_start":2711,"line_end":2711,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91747,"byte_end":91822,"line_start":2712,"line_end":2712,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91827,"byte_end":91830,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91835,"byte_end":91907,"line_start":2714,"line_end":2714,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91912,"byte_end":91932,"line_start":2715,"line_end":2715,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91937,"byte_end":91965,"line_start":2716,"line_end":2716,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91970,"byte_end":91991,"line_start":2717,"line_end":2717,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":91996,"byte_end":92037,"line_start":2718,"line_end":2718,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92042,"byte_end":92085,"line_start":2719,"line_end":2719,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92090,"byte_end":92103,"line_start":2720,"line_end":2720,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92108,"byte_end":92119,"line_start":2721,"line_end":2721,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92124,"byte_end":92127,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92132,"byte_end":92166,"line_start":2723,"line_end":2723,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92171,"byte_end":92211,"line_start":2724,"line_end":2724,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92216,"byte_end":92223,"line_start":2725,"line_end":2725,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93261,"byte_end":93277,"line_start":2758,"line_end":2758,"column_start":8,"column_end":24},"name":"partition_result","qualname":"::Itertools::partition_result","value":"pub fn partition_result<A, B, T, E>(Self) -> (A, B) where Self: Iterator<Item\n= Result<T, E>> + Sized, A: Default + Extend<T>, B: Default + Extend<E>","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Partition a sequence of `Result`s into one list of all the `Ok` elements\n and another list of all the `Err` elements.","sig":null,"attributes":[{"value":"/ Partition a sequence of `Result`s into one list of all the `Ok` elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92736,"byte_end":92812,"line_start":2743,"line_end":2743,"column_start":5,"column_end":81}},{"value":"/ and another list of all the `Err` elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92817,"byte_end":92864,"line_start":2744,"line_end":2744,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92869,"byte_end":92872,"line_start":2745,"line_end":2745,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92877,"byte_end":92884,"line_start":2746,"line_end":2746,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92889,"byte_end":92918,"line_start":2747,"line_end":2747,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92923,"byte_end":92926,"line_start":2748,"line_end":2748,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":92931,"byte_end":93006,"line_start":2749,"line_end":2749,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93011,"byte_end":93014,"line_start":2750,"line_end":2750,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93019,"byte_end":93091,"line_start":2751,"line_end":2751,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93096,"byte_end":93116,"line_start":2752,"line_end":2752,"column_start":5,"column_end":25}},{"value":"/     .partition_result();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93121,"byte_end":93149,"line_start":2753,"line_end":2753,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93154,"byte_end":93157,"line_start":2754,"line_end":2754,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93162,"byte_end":93196,"line_start":2755,"line_end":2755,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93201,"byte_end":93241,"line_start":2756,"line_end":2756,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93246,"byte_end":93253,"line_start":2757,"line_end":2757,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94188,"byte_end":94202,"line_start":2785,"line_end":2785,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"pub fn into_group_map<K, V>(Self) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","sig":null,"attributes":[{"value":"/ Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93596,"byte_end":93670,"line_start":2770,"line_end":2770,"column_start":5,"column_end":79}},{"value":"/ are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93675,"byte_end":93751,"line_start":2771,"line_end":2771,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93756,"byte_end":93759,"line_start":2772,"line_end":2772,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93764,"byte_end":93771,"line_start":2773,"line_end":2773,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93776,"byte_end":93805,"line_start":2774,"line_end":2774,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93810,"byte_end":93813,"line_start":2775,"line_end":2775,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93818,"byte_end":93892,"line_start":2776,"line_end":2776,"column_start":5,"column_end":79}},{"value":"/ let lookup = data.into_iter().into_group_map();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93897,"byte_end":93948,"line_start":2777,"line_end":2777,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93953,"byte_end":93956,"line_start":2778,"line_end":2778,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![10, 20]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":93961,"byte_end":94002,"line_start":2779,"line_end":2779,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94007,"byte_end":94044,"line_start":2780,"line_end":2780,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![12, 42]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94049,"byte_end":94090,"line_start":2781,"line_end":2781,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&3], vec![13, 33]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94095,"byte_end":94136,"line_start":2782,"line_end":2782,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94141,"byte_end":94148,"line_start":2783,"line_end":2783,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94153,"byte_end":94180,"line_start":2784,"line_end":2784,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95496,"byte_end":95513,"line_start":2820,"line_end":2820,"column_start":8,"column_end":25},"name":"into_group_map_by","qualname":"::Itertools::into_group_map_by","value":"pub fn into_group_map_by<K, V, F>(Self, F) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: Fn(&V) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified\n in the closure.\n Different to `into_group_map_by` because the key is still present. It is also more general.\n You can also fold the `group_map`.","sig":null,"attributes":[{"value":"/ Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94373,"byte_end":94467,"line_start":2792,"line_end":2792,"column_start":5,"column_end":99}},{"value":"/ in the closure.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94472,"byte_end":94491,"line_start":2793,"line_end":2793,"column_start":5,"column_end":24}},{"value":"/ Different to `into_group_map_by` because the key is still present. It is also more general.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94496,"byte_end":94591,"line_start":2794,"line_end":2794,"column_start":5,"column_end":100}},{"value":"/ You can also fold the `group_map`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94596,"byte_end":94634,"line_start":2795,"line_end":2795,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94639,"byte_end":94642,"line_start":2796,"line_end":2796,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94647,"byte_end":94654,"line_start":2797,"line_end":2797,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94659,"byte_end":94688,"line_start":2798,"line_end":2798,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94693,"byte_end":94727,"line_start":2799,"line_end":2799,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94732,"byte_end":94735,"line_start":2800,"line_end":2800,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94740,"byte_end":94814,"line_start":2801,"line_end":2801,"column_start":5,"column_end":79}},{"value":"/ let lookup: HashMap<u32,Vec<(u32, u32)>> =","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94819,"byte_end":94865,"line_start":2802,"line_end":2802,"column_start":5,"column_end":51}},{"value":"/     data.clone().into_iter().into_group_map_by(|a| a.0);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94870,"byte_end":94930,"line_start":2803,"line_end":2803,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94935,"byte_end":94938,"line_start":2804,"line_end":2804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![(0,10),(0,20)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94943,"byte_end":94991,"line_start":2805,"line_end":2805,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":94996,"byte_end":95033,"line_start":2806,"line_end":2806,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![(2,12), (2,42)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95038,"byte_end":95087,"line_start":2807,"line_end":2807,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lookup[&3], vec![(3,13), (3,33)]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95092,"byte_end":95141,"line_start":2808,"line_end":2808,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95146,"byte_end":95149,"line_start":2809,"line_end":2809,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95154,"byte_end":95169,"line_start":2810,"line_end":2810,"column_start":5,"column_end":20}},{"value":"/     data.into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95174,"byte_end":95198,"line_start":2811,"line_end":2811,"column_start":5,"column_end":29}},{"value":"/         .into_group_map_by(|x| x.0)","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95203,"byte_end":95242,"line_start":2812,"line_end":2812,"column_start":5,"column_end":44}},{"value":"/         .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95247,"byte_end":95271,"line_start":2813,"line_end":2813,"column_start":5,"column_end":29}},{"value":"/         .map(|(key, values)| (key, values.into_iter().fold(0,|acc, (_,v)| acc + v )))","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95276,"byte_end":95365,"line_start":2814,"line_end":2814,"column_start":5,"column_end":94}},{"value":"/         .collect::<HashMap<u32,u32>>()[&0],","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95370,"byte_end":95417,"line_start":2815,"line_end":2815,"column_start":5,"column_end":52}},{"value":"/     30,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95422,"byte_end":95433,"line_start":2816,"line_end":2816,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95438,"byte_end":95444,"line_start":2817,"line_end":2817,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95449,"byte_end":95456,"line_start":2818,"line_end":2818,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95461,"byte_end":95488,"line_start":2819,"line_end":2819,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96228,"byte_end":96245,"line_start":2839,"line_end":2839,"column_start":8,"column_end":25},"name":"into_grouping_map","qualname":"::Itertools::into_grouping_map","value":"pub fn into_grouping_map<K, V>(Self) -> GroupingMap<Self> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The input iterator must yield item in the form of `(K, V)` where the\n value of type `K` will be used as key to identify the groups and the\n value of type `V` as value for the folding operation.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95732,"byte_end":95806,"line_start":2829,"line_end":2829,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95811,"byte_end":95862,"line_start":2830,"line_end":2830,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95867,"byte_end":95871,"line_start":2831,"line_end":2831,"column_start":5,"column_end":9}},{"value":"/ The input iterator must yield item in the form of `(K, V)` where the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95876,"byte_end":95948,"line_start":2832,"line_end":2832,"column_start":5,"column_end":77}},{"value":"/ value of type `K` will be used as key to identify the groups and the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":95953,"byte_end":96025,"line_start":2833,"line_end":2833,"column_start":5,"column_end":77}},{"value":"/ value of type `V` as value for the folding operation.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96030,"byte_end":96087,"line_start":2834,"line_end":2834,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96092,"byte_end":96096,"line_start":2835,"line_end":2835,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96101,"byte_end":96146,"line_start":2836,"line_end":2836,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96151,"byte_end":96188,"line_start":2837,"line_end":2837,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96193,"byte_end":96220,"line_start":2838,"line_end":2838,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96855,"byte_end":96875,"line_start":2855,"line_end":2855,"column_start":8,"column_end":28},"name":"into_grouping_map_by","qualname":"::Itertools::into_grouping_map_by","value":"pub fn into_grouping_map_by<K, V, F>(Self, F) -> GroupingMapBy<Self, F> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: FnMut(&V) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The values from this iterator will be used as values for the folding operation\n while the keys will be obtained from the values by calling `key_mapper`.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96407,"byte_end":96481,"line_start":2846,"line_end":2846,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96486,"byte_end":96537,"line_start":2847,"line_end":2847,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96542,"byte_end":96546,"line_start":2848,"line_end":2848,"column_start":5,"column_end":9}},{"value":"/ The values from this iterator will be used as values for the folding operation","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96551,"byte_end":96633,"line_start":2849,"line_end":2849,"column_start":5,"column_end":87}},{"value":"/ while the keys will be obtained from the values by calling `key_mapper`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96638,"byte_end":96714,"line_start":2850,"line_end":2850,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96719,"byte_end":96723,"line_start":2851,"line_end":2851,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96728,"byte_end":96773,"line_start":2852,"line_end":2852,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96778,"byte_end":96815,"line_start":2853,"line_end":2853,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":96820,"byte_end":96847,"line_start":2854,"line_end":2854,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98426,"byte_end":98432,"line_start":2898,"line_end":2898,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"pub fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97134,"byte_end":97194,"line_start":2863,"line_end":2863,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97199,"byte_end":97202,"line_start":2864,"line_end":2864,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97207,"byte_end":97271,"line_start":2865,"line_end":2865,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97276,"byte_end":97279,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97284,"byte_end":97328,"line_start":2867,"line_end":2867,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97333,"byte_end":97395,"line_start":2868,"line_end":2868,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97400,"byte_end":97463,"line_start":2869,"line_end":2869,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97468,"byte_end":97529,"line_start":2870,"line_end":2870,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97534,"byte_end":97592,"line_start":2871,"line_end":2871,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97597,"byte_end":97600,"line_start":2872,"line_end":2872,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97605,"byte_end":97675,"line_start":2873,"line_end":2873,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97680,"byte_end":97751,"line_start":2874,"line_end":2874,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97756,"byte_end":97780,"line_start":2875,"line_end":2875,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97785,"byte_end":97788,"line_start":2876,"line_end":2876,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97793,"byte_end":97807,"line_start":2877,"line_end":2877,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97812,"byte_end":97815,"line_start":2878,"line_end":2878,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97820,"byte_end":97827,"line_start":2879,"line_end":2879,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97832,"byte_end":97861,"line_start":2880,"line_end":2880,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97866,"byte_end":97932,"line_start":2881,"line_end":2881,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97937,"byte_end":97940,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97945,"byte_end":97970,"line_start":2883,"line_end":2883,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":97975,"byte_end":98021,"line_start":2884,"line_end":2884,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98026,"byte_end":98029,"line_start":2885,"line_end":2885,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98034,"byte_end":98050,"line_start":2886,"line_end":2886,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98055,"byte_end":98105,"line_start":2887,"line_end":2887,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98110,"byte_end":98113,"line_start":2888,"line_end":2888,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98118,"byte_end":98146,"line_start":2889,"line_end":2889,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98151,"byte_end":98201,"line_start":2890,"line_end":2890,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98206,"byte_end":98209,"line_start":2891,"line_end":2891,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98214,"byte_end":98239,"line_start":2892,"line_end":2892,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98244,"byte_end":98294,"line_start":2893,"line_end":2893,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98299,"byte_end":98306,"line_start":2894,"line_end":2894,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98311,"byte_end":98314,"line_start":2895,"line_end":2895,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98319,"byte_end":98388,"line_start":2896,"line_end":2896,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98393,"byte_end":98418,"line_start":2897,"line_end":2897,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99152,"byte_end":99165,"line_start":2915,"line_end":2915,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"pub fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98596,"byte_end":98671,"line_start":2904,"line_end":2904,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98676,"byte_end":98703,"line_start":2905,"line_end":2905,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98708,"byte_end":98711,"line_start":2906,"line_end":2906,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98716,"byte_end":98812,"line_start":2907,"line_end":2907,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98817,"byte_end":98820,"line_start":2908,"line_end":2908,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98825,"byte_end":98902,"line_start":2909,"line_end":2909,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98907,"byte_end":98984,"line_start":2910,"line_end":2910,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":98989,"byte_end":99041,"line_start":2911,"line_end":2911,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99046,"byte_end":99049,"line_start":2912,"line_end":2912,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99054,"byte_end":99119,"line_start":2913,"line_end":2913,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99124,"byte_end":99144,"line_start":2914,"line_end":2914,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99827,"byte_end":99836,"line_start":2929,"line_end":2929,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99363,"byte_end":99438,"line_start":2921,"line_end":2921,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99443,"byte_end":99481,"line_start":2922,"line_end":2922,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99486,"byte_end":99489,"line_start":2923,"line_end":2923,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99494,"byte_end":99590,"line_start":2924,"line_end":2924,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99595,"byte_end":99598,"line_start":2925,"line_end":2925,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99603,"byte_end":99680,"line_start":2926,"line_end":2926,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99685,"byte_end":99762,"line_start":2927,"line_end":2927,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":99767,"byte_end":99819,"line_start":2928,"line_end":2928,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100671,"byte_end":100683,"line_start":2958,"line_end":2958,"column_start":8,"column_end":20},"name":"position_max","qualname":"::Itertools::position_max","value":"pub fn position_max(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100115,"byte_end":100178,"line_start":2939,"line_end":2939,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100183,"byte_end":100186,"line_start":2940,"line_end":2940,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100191,"byte_end":100255,"line_start":2941,"line_end":2941,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100260,"byte_end":100289,"line_start":2942,"line_end":2942,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100294,"byte_end":100297,"line_start":2943,"line_end":2943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100302,"byte_end":100316,"line_start":2944,"line_end":2944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100321,"byte_end":100324,"line_start":2945,"line_end":2945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100329,"byte_end":100336,"line_start":2946,"line_end":2946,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100341,"byte_end":100370,"line_start":2947,"line_end":2947,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100375,"byte_end":100378,"line_start":2948,"line_end":2948,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100383,"byte_end":100408,"line_start":2949,"line_end":2949,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100413,"byte_end":100459,"line_start":2950,"line_end":2950,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100464,"byte_end":100467,"line_start":2951,"line_end":2951,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100472,"byte_end":100503,"line_start":2952,"line_end":2952,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max(), Some(3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100508,"byte_end":100557,"line_start":2953,"line_end":2953,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100562,"byte_end":100565,"line_start":2954,"line_end":2954,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100570,"byte_end":100597,"line_start":2955,"line_end":2955,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_max(), Some(1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100602,"byte_end":100651,"line_start":2956,"line_end":2956,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100656,"byte_end":100663,"line_start":2957,"line_end":2957,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2687},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101534,"byte_end":101553,"line_start":2986,"line_end":2986,"column_start":8,"column_end":27},"name":"position_max_by_key","qualname":"::Itertools::position_max_by_key","value":"pub fn position_max_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100867,"byte_end":100933,"line_start":2966,"line_end":2966,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100938,"byte_end":100979,"line_start":2967,"line_end":2967,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100984,"byte_end":100987,"line_start":2968,"line_end":2968,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":100992,"byte_end":101056,"line_start":2969,"line_end":2969,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101061,"byte_end":101090,"line_start":2970,"line_end":2970,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101095,"byte_end":101098,"line_start":2971,"line_end":2971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101103,"byte_end":101117,"line_start":2972,"line_end":2972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101122,"byte_end":101125,"line_start":2973,"line_end":2973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101130,"byte_end":101137,"line_start":2974,"line_end":2974,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101142,"byte_end":101171,"line_start":2975,"line_end":2975,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101176,"byte_end":101179,"line_start":2976,"line_end":2976,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101184,"byte_end":101209,"line_start":2977,"line_end":2977,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101214,"byte_end":101278,"line_start":2978,"line_end":2978,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101283,"byte_end":101286,"line_start":2979,"line_end":2979,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101291,"byte_end":101326,"line_start":2980,"line_end":2980,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101331,"byte_end":101398,"line_start":2981,"line_end":2981,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101403,"byte_end":101406,"line_start":2982,"line_end":2982,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101411,"byte_end":101442,"line_start":2983,"line_end":2983,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101447,"byte_end":101514,"line_start":2984,"line_end":2984,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101519,"byte_end":101526,"line_start":2985,"line_end":2985,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102464,"byte_end":102479,"line_start":3014,"line_end":3014,"column_start":8,"column_end":23},"name":"position_max_by","qualname":"::Itertools::position_max_by","value":"pub fn position_max_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101786,"byte_end":101852,"line_start":2994,"line_end":2994,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101857,"byte_end":101909,"line_start":2995,"line_end":2995,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101914,"byte_end":101917,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101922,"byte_end":101986,"line_start":2997,"line_end":2997,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":101991,"byte_end":102020,"line_start":2998,"line_end":2998,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102025,"byte_end":102028,"line_start":2999,"line_end":2999,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102033,"byte_end":102047,"line_start":3000,"line_end":3000,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102052,"byte_end":102055,"line_start":3001,"line_end":3001,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102060,"byte_end":102067,"line_start":3002,"line_end":3002,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102072,"byte_end":102101,"line_start":3003,"line_end":3003,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102106,"byte_end":102109,"line_start":3004,"line_end":3004,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102114,"byte_end":102139,"line_start":3005,"line_end":3005,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102144,"byte_end":102208,"line_start":3006,"line_end":3006,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102213,"byte_end":102216,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102221,"byte_end":102256,"line_start":3008,"line_end":3008,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102261,"byte_end":102328,"line_start":3009,"line_end":3009,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102333,"byte_end":102336,"line_start":3010,"line_end":3010,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102341,"byte_end":102372,"line_start":3011,"line_end":3011,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102377,"byte_end":102444,"line_start":3012,"line_end":3012,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102449,"byte_end":102456,"line_start":3013,"line_end":3013,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103269,"byte_end":103281,"line_start":3041,"line_end":3041,"column_start":8,"column_end":20},"name":"position_min","qualname":"::Itertools::position_min","value":"pub fn position_min(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102712,"byte_end":102775,"line_start":3022,"line_end":3022,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102780,"byte_end":102783,"line_start":3023,"line_end":3023,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102788,"byte_end":102852,"line_start":3024,"line_end":3024,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102857,"byte_end":102887,"line_start":3025,"line_end":3025,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102892,"byte_end":102895,"line_start":3026,"line_end":3026,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102900,"byte_end":102914,"line_start":3027,"line_end":3027,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102919,"byte_end":102922,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102927,"byte_end":102934,"line_start":3029,"line_end":3029,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102939,"byte_end":102968,"line_start":3030,"line_end":3030,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102973,"byte_end":102976,"line_start":3031,"line_end":3031,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":102981,"byte_end":103006,"line_start":3032,"line_end":3032,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103011,"byte_end":103057,"line_start":3033,"line_end":3033,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103062,"byte_end":103065,"line_start":3034,"line_end":3034,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103070,"byte_end":103101,"line_start":3035,"line_end":3035,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min(), Some(4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103106,"byte_end":103155,"line_start":3036,"line_end":3036,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103160,"byte_end":103163,"line_start":3037,"line_end":3037,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103168,"byte_end":103195,"line_start":3038,"line_end":3038,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_min(), Some(2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103200,"byte_end":103249,"line_start":3039,"line_end":3039,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103254,"byte_end":103261,"line_start":3040,"line_end":3040,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104133,"byte_end":104152,"line_start":3069,"line_end":3069,"column_start":8,"column_end":27},"name":"position_min_by_key","qualname":"::Itertools::position_min_by_key","value":"pub fn position_min_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103465,"byte_end":103531,"line_start":3049,"line_end":3049,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103536,"byte_end":103577,"line_start":3050,"line_end":3050,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103582,"byte_end":103585,"line_start":3051,"line_end":3051,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103590,"byte_end":103654,"line_start":3052,"line_end":3052,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103659,"byte_end":103689,"line_start":3053,"line_end":3053,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103694,"byte_end":103697,"line_start":3054,"line_end":3054,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103702,"byte_end":103716,"line_start":3055,"line_end":3055,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103721,"byte_end":103724,"line_start":3056,"line_end":3056,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103729,"byte_end":103736,"line_start":3057,"line_end":3057,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103741,"byte_end":103770,"line_start":3058,"line_end":3058,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103775,"byte_end":103778,"line_start":3059,"line_end":3059,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103783,"byte_end":103808,"line_start":3060,"line_end":3060,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103813,"byte_end":103877,"line_start":3061,"line_end":3061,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103882,"byte_end":103885,"line_start":3062,"line_end":3062,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103890,"byte_end":103925,"line_start":3063,"line_end":3063,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":103930,"byte_end":103997,"line_start":3064,"line_end":3064,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104002,"byte_end":104005,"line_start":3065,"line_end":3065,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104010,"byte_end":104041,"line_start":3066,"line_end":3066,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104046,"byte_end":104113,"line_start":3067,"line_end":3067,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104118,"byte_end":104125,"line_start":3068,"line_end":3068,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105064,"byte_end":105079,"line_start":3097,"line_end":3097,"column_start":8,"column_end":23},"name":"position_min_by","qualname":"::Itertools::position_min_by","value":"pub fn position_min_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104385,"byte_end":104451,"line_start":3077,"line_end":3077,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104456,"byte_end":104508,"line_start":3078,"line_end":3078,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104513,"byte_end":104516,"line_start":3079,"line_end":3079,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104521,"byte_end":104585,"line_start":3080,"line_end":3080,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104590,"byte_end":104620,"line_start":3081,"line_end":3081,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104625,"byte_end":104628,"line_start":3082,"line_end":3082,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104633,"byte_end":104647,"line_start":3083,"line_end":3083,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104652,"byte_end":104655,"line_start":3084,"line_end":3084,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104660,"byte_end":104667,"line_start":3085,"line_end":3085,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104672,"byte_end":104701,"line_start":3086,"line_end":3086,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104706,"byte_end":104709,"line_start":3087,"line_end":3087,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104714,"byte_end":104739,"line_start":3088,"line_end":3088,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104744,"byte_end":104808,"line_start":3089,"line_end":3089,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104813,"byte_end":104816,"line_start":3090,"line_end":3090,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104821,"byte_end":104856,"line_start":3091,"line_end":3091,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104861,"byte_end":104928,"line_start":3092,"line_end":3092,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104933,"byte_end":104936,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104941,"byte_end":104972,"line_start":3094,"line_end":3094,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":104977,"byte_end":105044,"line_start":3095,"line_end":3095,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105049,"byte_end":105056,"line_start":3096,"line_end":3096,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106980,"byte_end":106995,"line_start":3147,"line_end":3147,"column_start":8,"column_end":23},"name":"position_minmax","qualname":"::Itertools::position_minmax","value":"pub fn position_minmax(Self) -> MinMaxResult<usize> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the positions of the minimum and maximum elements in\n the iterator.","sig":null,"attributes":[{"value":"/ Return the positions of the minimum and maximum elements in","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105312,"byte_end":105375,"line_start":3105,"line_end":3105,"column_start":5,"column_end":68}},{"value":"/ the iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105380,"byte_end":105397,"line_start":3106,"line_end":3106,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105402,"byte_end":105405,"line_start":3107,"line_end":3107,"column_start":5,"column_end":8}},{"value":"/ The return type [`MinMaxResult`] is an enum of three variants:","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105410,"byte_end":105476,"line_start":3108,"line_end":3108,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105481,"byte_end":105484,"line_start":3109,"line_end":3109,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105489,"byte_end":105533,"line_start":3110,"line_end":3110,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(xpos)` if the iterator has exactly one element.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105538,"byte_end":105603,"line_start":3111,"line_end":3111,"column_start":5,"column_end":70}},{"value":"/ - `MinMax(xpos, ypos)` is returned otherwise, where the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105608,"byte_end":105667,"line_start":3112,"line_end":3112,"column_start":5,"column_end":64}},{"value":"/    element at `xpos` ≤ the element at `ypos`. While the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105672,"byte_end":105733,"line_start":3113,"line_end":3113,"column_start":5,"column_end":64}},{"value":"/    referenced elements themselves may be equal, `xpos` cannot","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105738,"byte_end":105803,"line_start":3114,"line_end":3114,"column_start":5,"column_end":70}},{"value":"/    be equal to `ypos`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105808,"byte_end":105834,"line_start":3115,"line_end":3115,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105839,"byte_end":105842,"line_start":3116,"line_end":3116,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `position_minmax` does `1.5 * n`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105847,"byte_end":105913,"line_start":3117,"line_end":3117,"column_start":5,"column_end":71}},{"value":"/ comparisons, and so is faster than calling `positon_min` and","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105918,"byte_end":105982,"line_start":3118,"line_end":3118,"column_start":5,"column_end":69}},{"value":"/ `position_max` separately which does `2 * n` comparisons.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":105987,"byte_end":106048,"line_start":3119,"line_end":3119,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106053,"byte_end":106056,"line_start":3120,"line_end":3120,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106061,"byte_end":106126,"line_start":3121,"line_end":3121,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106131,"byte_end":106197,"line_start":3122,"line_end":3122,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106202,"byte_end":106268,"line_start":3123,"line_end":3123,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106273,"byte_end":106297,"line_start":3124,"line_end":3124,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106302,"byte_end":106305,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106310,"byte_end":106368,"line_start":3126,"line_end":3126,"column_start":5,"column_end":63}},{"value":"/ guaranteed if an element is NaN.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106373,"byte_end":106409,"line_start":3127,"line_end":3127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106414,"byte_end":106417,"line_start":3128,"line_end":3128,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106422,"byte_end":106436,"line_start":3129,"line_end":3129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106441,"byte_end":106444,"line_start":3130,"line_end":3130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106449,"byte_end":106456,"line_start":3131,"line_end":3131,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106461,"byte_end":106490,"line_start":3132,"line_end":3132,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106495,"byte_end":106561,"line_start":3133,"line_end":3133,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106566,"byte_end":106569,"line_start":3134,"line_end":3134,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106574,"byte_end":106599,"line_start":3135,"line_end":3135,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax(), NoElements);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106604,"byte_end":106659,"line_start":3136,"line_end":3136,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106664,"byte_end":106667,"line_start":3137,"line_end":3137,"column_start":5,"column_end":8}},{"value":"/ let a = [10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106672,"byte_end":106689,"line_start":3138,"line_end":3138,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(a.iter().position_minmax(), OneElement(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106694,"byte_end":106752,"line_start":3139,"line_end":3139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106757,"byte_end":106760,"line_start":3140,"line_end":3140,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106765,"byte_end":106796,"line_start":3141,"line_end":3141,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(4, 3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106801,"byte_end":106858,"line_start":3142,"line_end":3142,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106863,"byte_end":106866,"line_start":3143,"line_end":3143,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106871,"byte_end":106898,"line_start":3144,"line_end":3144,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(2, 1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106903,"byte_end":106960,"line_start":3145,"line_end":3145,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":106965,"byte_end":106972,"line_start":3146,"line_end":3146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2721},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108679,"byte_end":108701,"line_start":3192,"line_end":3192,"column_start":8,"column_end":30},"name":"position_minmax_by_key","qualname":"::Itertools::position_minmax_by_key","value":"pub fn position_minmax_by_key<K, F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107385,"byte_end":107450,"line_start":3158,"line_end":3158,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107455,"byte_end":107509,"line_start":3159,"line_end":3159,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107514,"byte_end":107517,"line_start":3160,"line_end":3160,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107522,"byte_end":107584,"line_start":3161,"line_end":3161,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107589,"byte_end":107613,"line_start":3162,"line_end":3162,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107618,"byte_end":107621,"line_start":3163,"line_end":3163,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107626,"byte_end":107691,"line_start":3164,"line_end":3164,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107696,"byte_end":107762,"line_start":3165,"line_end":3165,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107767,"byte_end":107833,"line_start":3166,"line_end":3166,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107838,"byte_end":107862,"line_start":3167,"line_end":3167,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107867,"byte_end":107870,"line_start":3168,"line_end":3168,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107875,"byte_end":107940,"line_start":3169,"line_end":3169,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107945,"byte_end":107965,"line_start":3170,"line_end":3170,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107970,"byte_end":107973,"line_start":3171,"line_end":3171,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107978,"byte_end":107992,"line_start":3172,"line_end":3172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":107997,"byte_end":108000,"line_start":3173,"line_end":3173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108005,"byte_end":108012,"line_start":3174,"line_end":3174,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108017,"byte_end":108046,"line_start":3175,"line_end":3175,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108051,"byte_end":108117,"line_start":3176,"line_end":3176,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108122,"byte_end":108125,"line_start":3177,"line_end":3177,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108130,"byte_end":108155,"line_start":3178,"line_end":3178,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), NoElements);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108160,"byte_end":108233,"line_start":3179,"line_end":3179,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108238,"byte_end":108241,"line_start":3180,"line_end":3180,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108246,"byte_end":108267,"line_start":3181,"line_end":3181,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), OneElement(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108272,"byte_end":108348,"line_start":3182,"line_end":3182,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108353,"byte_end":108356,"line_start":3183,"line_end":3183,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108361,"byte_end":108396,"line_start":3184,"line_end":3184,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(1, 4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108401,"byte_end":108476,"line_start":3185,"line_end":3185,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108481,"byte_end":108484,"line_start":3186,"line_end":3186,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108489,"byte_end":108520,"line_start":3187,"line_end":3187,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(0, 3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108525,"byte_end":108600,"line_start":3188,"line_end":3188,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108605,"byte_end":108612,"line_start":3189,"line_end":3189,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108617,"byte_end":108620,"line_start":3190,"line_end":3190,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":108625,"byte_end":108671,"line_start":3191,"line_end":3191,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2735},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110306,"byte_end":110324,"line_start":3234,"line_end":3234,"column_start":8,"column_end":26},"name":"position_minmax_by","qualname":"::Itertools::position_minmax_by","value":"pub fn position_minmax_by<F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109104,"byte_end":109169,"line_start":3203,"line_end":3203,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified comparison function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109174,"byte_end":109239,"line_start":3204,"line_end":3204,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109244,"byte_end":109247,"line_start":3205,"line_end":3205,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109252,"byte_end":109314,"line_start":3206,"line_end":3206,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109319,"byte_end":109343,"line_start":3207,"line_end":3207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109348,"byte_end":109351,"line_start":3208,"line_end":3208,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109356,"byte_end":109421,"line_start":3209,"line_end":3209,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109426,"byte_end":109492,"line_start":3210,"line_end":3210,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109497,"byte_end":109563,"line_start":3211,"line_end":3211,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109568,"byte_end":109592,"line_start":3212,"line_end":3212,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109597,"byte_end":109600,"line_start":3213,"line_end":3213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109605,"byte_end":109619,"line_start":3214,"line_end":3214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109624,"byte_end":109627,"line_start":3215,"line_end":3215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109632,"byte_end":109639,"line_start":3216,"line_end":3216,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109644,"byte_end":109673,"line_start":3217,"line_end":3217,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109678,"byte_end":109744,"line_start":3218,"line_end":3218,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109749,"byte_end":109752,"line_start":3219,"line_end":3219,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109757,"byte_end":109782,"line_start":3220,"line_end":3220,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), NoElements);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109787,"byte_end":109860,"line_start":3221,"line_end":3221,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109865,"byte_end":109868,"line_start":3222,"line_end":3222,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109873,"byte_end":109894,"line_start":3223,"line_end":3223,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), OneElement(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109899,"byte_end":109975,"line_start":3224,"line_end":3224,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109980,"byte_end":109983,"line_start":3225,"line_end":3225,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":109988,"byte_end":110023,"line_start":3226,"line_end":3226,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(4, 3));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110028,"byte_end":110103,"line_start":3227,"line_end":3227,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110108,"byte_end":110111,"line_start":3228,"line_end":3228,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110116,"byte_end":110147,"line_start":3229,"line_end":3229,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(2, 1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110152,"byte_end":110227,"line_start":3230,"line_end":3230,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110232,"byte_end":110239,"line_start":3231,"line_end":3231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110244,"byte_end":110247,"line_start":3232,"line_end":3232,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110252,"byte_end":110298,"line_start":3233,"line_end":3233,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111662,"byte_end":111673,"line_start":3262,"line_end":3262,"column_start":8,"column_end":19},"name":"exactly_one","qualname":"::Itertools::exactly_one","value":"pub fn exactly_one(Self) -> Result<Self::Item, ExactlyOneError<Self>> where\nSelf: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" If the iterator yields exactly one element, that element will be returned, otherwise\n an error will be returned containing an iterator that has the same output as the input\n iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields exactly one element, that element will be returned, otherwise","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110742,"byte_end":110830,"line_start":3245,"line_end":3245,"column_start":5,"column_end":93}},{"value":"/ an error will be returned containing an iterator that has the same output as the input","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110835,"byte_end":110925,"line_start":3246,"line_end":3246,"column_start":5,"column_end":95}},{"value":"/ iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110930,"byte_end":110943,"line_start":3247,"line_end":3247,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110948,"byte_end":110951,"line_start":3248,"line_end":3248,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":110956,"byte_end":111045,"line_start":3249,"line_end":3249,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should only be one element yielded is false this provides","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111050,"byte_end":111141,"line_start":3250,"line_end":3250,"column_start":5,"column_end":96}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111146,"byte_end":111225,"line_start":3251,"line_end":3251,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111230,"byte_end":111233,"line_start":3252,"line_end":3252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111238,"byte_end":111252,"line_start":3253,"line_end":3253,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111257,"byte_end":111264,"line_start":3254,"line_end":3254,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111269,"byte_end":111298,"line_start":3255,"line_end":3255,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111303,"byte_end":111306,"line_start":3256,"line_end":3256,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).exactly_one().unwrap(), 2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111311,"byte_end":111381,"line_start":3257,"line_end":3257,"column_start":5,"column_end":75}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).exactly_one().unwrap_err().eq(2..4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111386,"byte_end":111471,"line_start":3258,"line_end":3258,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).exactly_one().unwrap_err().eq(2..5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111476,"byte_end":111561,"line_start":3259,"line_end":3259,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&_| false).exactly_one().unwrap_err().eq(0..0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111566,"byte_end":111642,"line_start":3260,"line_end":3260,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":111647,"byte_end":111654,"line_start":3261,"line_end":3261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2749},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113198,"byte_end":113209,"line_start":3298,"line_end":3298,"column_start":8,"column_end":19},"name":"at_most_one","qualname":"::Itertools::at_most_one","value":"pub fn at_most_one(Self) -> Result<Option<Self::Item>, ExactlyOneError<Self>>\nwhere Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" If the iterator yields no elements, Ok(None) will be returned. If the iterator yields\n exactly one element, that element will be returned, otherwise an error will be returned\n containing an iterator that has the same output as the input iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields no elements, Ok(None) will be returned. If the iterator yields","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112210,"byte_end":112299,"line_start":3281,"line_end":3281,"column_start":5,"column_end":94}},{"value":"/ exactly one element, that element will be returned, otherwise an error will be returned","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112304,"byte_end":112395,"line_start":3282,"line_end":3282,"column_start":5,"column_end":96}},{"value":"/ containing an iterator that has the same output as the input iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112400,"byte_end":112474,"line_start":3283,"line_end":3283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112479,"byte_end":112482,"line_start":3284,"line_end":3284,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112487,"byte_end":112576,"line_start":3285,"line_end":3285,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should be at most one element yielded is false this provides","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112581,"byte_end":112675,"line_start":3286,"line_end":3286,"column_start":5,"column_end":99}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112680,"byte_end":112759,"line_start":3287,"line_end":3287,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112764,"byte_end":112767,"line_start":3288,"line_end":3288,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112772,"byte_end":112786,"line_start":3289,"line_end":3289,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112791,"byte_end":112798,"line_start":3290,"line_end":3290,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112803,"byte_end":112832,"line_start":3291,"line_end":3291,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112837,"byte_end":112840,"line_start":3292,"line_end":3292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).at_most_one().unwrap(), Some(2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112845,"byte_end":112921,"line_start":3293,"line_end":3293,"column_start":5,"column_end":81}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).at_most_one().unwrap_err().eq(2..4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":112926,"byte_end":113011,"line_start":3294,"line_end":3294,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).at_most_one().unwrap_err().eq(2..5));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113016,"byte_end":113101,"line_start":3295,"line_end":3295,"column_start":5,"column_end":90}},{"value":"/ assert_eq!((0..10).filter(|&_| false).at_most_one().unwrap(), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113106,"byte_end":113178,"line_start":3296,"line_end":3296,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113183,"byte_end":113190,"line_start":3297,"line_end":3297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114250,"byte_end":114259,"line_start":3332,"line_end":3332,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::Itertools::multipeek","value":"pub fn multipeek(Self) -> MultiPeek<Self> where Self: Sized","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113731,"byte_end":113805,"line_start":3317,"line_end":3317,"column_start":5,"column_end":79}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113810,"byte_end":113857,"line_start":3318,"line_end":3318,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113862,"byte_end":113865,"line_start":3319,"line_end":3319,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113870,"byte_end":113884,"line_start":3320,"line_end":3320,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113889,"byte_end":113896,"line_start":3321,"line_end":3321,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113901,"byte_end":113930,"line_start":3322,"line_end":3322,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113935,"byte_end":113938,"line_start":3323,"line_end":3323,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..10).multipeek();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113943,"byte_end":113982,"line_start":3324,"line_end":3324,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.peek(), Some(&0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":113987,"byte_end":114025,"line_start":3325,"line_end":3325,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114030,"byte_end":114068,"line_start":3326,"line_end":3326,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&2));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114073,"byte_end":114111,"line_start":3327,"line_end":3327,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(0));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114116,"byte_end":114153,"line_start":3328,"line_end":3328,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114158,"byte_end":114196,"line_start":3329,"line_end":3329,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114201,"byte_end":114208,"line_start":3330,"line_end":3330,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114213,"byte_end":114242,"line_start":3331,"line_end":3331,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2751},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114876,"byte_end":114882,"line_start":3353,"line_end":3353,"column_start":8,"column_end":14},"name":"counts","qualname":"::Itertools::counts","value":"pub fn counts(Self) -> HashMap<Self::Item, usize> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114373,"byte_end":114440,"line_start":3339,"line_end":3339,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114445,"byte_end":114511,"line_start":3340,"line_end":3340,"column_start":5,"column_end":71}},{"value":"/ of times it appears.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114516,"byte_end":114540,"line_start":3341,"line_end":3341,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114545,"byte_end":114548,"line_start":3342,"line_end":3342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114553,"byte_end":114567,"line_start":3343,"line_end":3343,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114572,"byte_end":114579,"line_start":3344,"line_end":3344,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114584,"byte_end":114615,"line_start":3345,"line_end":3345,"column_start":5,"column_end":36}},{"value":"/ let counts = [1, 1, 1, 3, 3, 5].into_iter().counts();","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114620,"byte_end":114677,"line_start":3346,"line_end":3346,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(counts[&1], 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114682,"byte_end":114712,"line_start":3347,"line_end":3347,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&3], 2);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114717,"byte_end":114747,"line_start":3348,"line_end":3348,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&5], 1);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114752,"byte_end":114782,"line_start":3349,"line_end":3349,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts.get(&0), None);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114787,"byte_end":114824,"line_start":3350,"line_end":3350,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114829,"byte_end":114836,"line_start":3351,"line_end":3351,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":114841,"byte_end":114868,"line_start":3352,"line_end":3352,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116485,"byte_end":116494,"line_start":3396,"line_end":3396,"column_start":8,"column_end":17},"name":"counts_by","qualname":"::Itertools::counts_by","value":"pub fn counts_by<K, F>(Self, F) -> HashMap<K, usize> where Self: Sized,\nK: Eq + Hash, F: FnMut(Self::Item) -> K","parent":{"krate":0,"index":2449},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears,\n determining identity using a keying function.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115123,"byte_end":115190,"line_start":3363,"line_end":3363,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115195,"byte_end":115261,"line_start":3364,"line_end":3364,"column_start":5,"column_end":71}},{"value":"/ of times it appears,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115266,"byte_end":115290,"line_start":3365,"line_end":3365,"column_start":5,"column_end":29}},{"value":"/ determining identity using a keying function.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115295,"byte_end":115344,"line_start":3366,"line_end":3366,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115349,"byte_end":115352,"line_start":3367,"line_end":3367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115357,"byte_end":115364,"line_start":3368,"line_end":3368,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115369,"byte_end":115400,"line_start":3369,"line_end":3369,"column_start":5,"column_end":36}},{"value":"/ struct Character {","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115405,"byte_end":115427,"line_start":3370,"line_end":3370,"column_start":5,"column_end":27}},{"value":"/   first_name: &'static str,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115432,"byte_end":115463,"line_start":3371,"line_end":3371,"column_start":5,"column_end":36}},{"value":"/   last_name:  &'static str,","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115468,"byte_end":115499,"line_start":3372,"line_end":3372,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115504,"byte_end":115509,"line_start":3373,"line_end":3373,"column_start":5,"column_end":10}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115514,"byte_end":115518,"line_start":3374,"line_end":3374,"column_start":5,"column_end":9}},{"value":"/ let characters =","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115523,"byte_end":115543,"line_start":3375,"line_end":3375,"column_start":5,"column_end":25}},{"value":"/     vec![","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115548,"byte_end":115561,"line_start":3376,"line_end":3376,"column_start":5,"column_end":18}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Pond\"      },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115566,"byte_end":115636,"line_start":3377,"line_end":3377,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Wong\"      },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115641,"byte_end":115711,"line_start":3378,"line_end":3378,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Santiago\"  },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115716,"byte_end":115786,"line_start":3379,"line_end":3379,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Bond\"      },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115791,"byte_end":115861,"line_start":3380,"line_end":3380,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Sullivan\"  },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115866,"byte_end":115936,"line_start":3381,"line_end":3381,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Norington\" },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":115941,"byte_end":116011,"line_start":3382,"line_end":3382,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Kirk\"      },","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116016,"byte_end":116086,"line_start":3383,"line_end":3383,"column_start":5,"column_end":75}},{"value":"/     ];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116091,"byte_end":116101,"line_start":3384,"line_end":3384,"column_start":5,"column_end":15}},{"value":"/ ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116106,"byte_end":116110,"line_start":3385,"line_end":3385,"column_start":5,"column_end":9}},{"value":"/ let first_name_frequency = ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116115,"byte_end":116146,"line_start":3386,"line_end":3386,"column_start":5,"column_end":36}},{"value":"/     characters","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116151,"byte_end":116169,"line_start":3387,"line_end":3387,"column_start":5,"column_end":23}},{"value":"/         .into_iter()","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116174,"byte_end":116198,"line_start":3388,"line_end":3388,"column_start":5,"column_end":29}},{"value":"/         .counts_by(|c| c.first_name);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116203,"byte_end":116244,"line_start":3389,"line_end":3389,"column_start":5,"column_end":46}},{"value":"/     ","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116249,"byte_end":116257,"line_start":3390,"line_end":3390,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(first_name_frequency[\"Amy\"], 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116262,"byte_end":116309,"line_start":3391,"line_end":3391,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(first_name_frequency[\"James\"], 4);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116314,"byte_end":116363,"line_start":3392,"line_end":3392,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(first_name_frequency.contains_key(\"Asha\"), false);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116368,"byte_end":116433,"line_start":3393,"line_end":3393,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116438,"byte_end":116445,"line_start":3394,"line_end":3394,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116450,"byte_end":116477,"line_start":3395,"line_end":3395,"column_start":5,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":2758},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117122,"byte_end":117127,"line_start":3419,"line_end":3419,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"pub fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterables produce equal sequences","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116721,"byte_end":116780,"line_start":3408,"line_end":3408,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116781,"byte_end":116844,"line_start":3409,"line_end":3409,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116845,"byte_end":116867,"line_start":3410,"line_end":3410,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116868,"byte_end":116871,"line_start":3411,"line_end":3411,"column_start":1,"column_end":4}},{"value":"/ This is an [`IntoIterator`] enabled function that is similar to the standard","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116872,"byte_end":116952,"line_start":3412,"line_end":3412,"column_start":1,"column_end":81}},{"value":"/ library method [`Iterator::eq`].","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116953,"byte_end":116989,"line_start":3413,"line_end":3413,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116990,"byte_end":116993,"line_start":3414,"line_end":3414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116994,"byte_end":117001,"line_start":3415,"line_end":3415,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117002,"byte_end":117053,"line_start":3416,"line_end":3416,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117054,"byte_end":117106,"line_start":3417,"line_end":3417,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117107,"byte_end":117114,"line_start":3418,"line_end":3418,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2761},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117956,"byte_end":117968,"line_start":3447,"line_end":3447,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"pub fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as [`equal(a, b)`](equal).","sig":null,"attributes":[{"value":"/ Assert that two iterables produce equal sequences, with the same","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117565,"byte_end":117633,"line_start":3437,"line_end":3437,"column_start":1,"column_end":69}},{"value":"/ semantics as [`equal(a, b)`](equal).","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117634,"byte_end":117674,"line_start":3438,"line_end":3438,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117675,"byte_end":117678,"line_start":3439,"line_end":3439,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117679,"byte_end":117744,"line_start":3440,"line_end":3440,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117745,"byte_end":117772,"line_start":3441,"line_end":3441,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117773,"byte_end":117776,"line_start":3442,"line_end":3442,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117777,"byte_end":117790,"line_start":3443,"line_end":3443,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117791,"byte_end":117850,"line_start":3444,"line_end":3444,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117851,"byte_end":117940,"line_start":3445,"line_end":3445,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":117941,"byte_end":117948,"line_start":3446,"line_end":3446,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2764},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119195,"byte_end":119204,"line_start":3489,"line_end":3489,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"pub fn partition<'a, A: 'a, I, F>(I, F) -> usize where I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118656,"byte_end":118720,"line_start":3472,"line_end":3472,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118721,"byte_end":118792,"line_start":3473,"line_end":3473,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118793,"byte_end":118796,"line_start":3474,"line_end":3474,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118797,"byte_end":118846,"line_start":3475,"line_end":3475,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118847,"byte_end":118850,"line_start":3476,"line_end":3476,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118851,"byte_end":118891,"line_start":3477,"line_end":3477,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118892,"byte_end":118895,"line_start":3478,"line_end":3478,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118896,"byte_end":118903,"line_start":3479,"line_end":3479,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118904,"byte_end":118933,"line_start":3480,"line_end":3480,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118934,"byte_end":118937,"line_start":3481,"line_end":3481,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118938,"byte_end":118995,"line_start":3482,"line_end":3482,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":118996,"byte_end":119037,"line_start":3483,"line_end":3483,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119038,"byte_end":119098,"line_start":3484,"line_end":3484,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119099,"byte_end":119102,"line_start":3485,"line_end":3485,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119103,"byte_end":119147,"line_start":3486,"line_end":3486,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119148,"byte_end":119179,"line_start":3487,"line_end":3487,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119180,"byte_end":119187,"line_start":3488,"line_end":3488,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4747},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120120,"byte_end":120128,"line_start":3519,"line_end":3519,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":4745},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120079,"byte_end":120115,"line_start":3518,"line_end":3518,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4750},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120189,"byte_end":120193,"line_start":3521,"line_end":3521,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":4745},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120137,"byte_end":120184,"line_start":3520,"line_end":3520,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":4745},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120060,"byte_end":120069,"line_start":3517,"line_end":3517,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"pub enum FoldWhile<T> { Continue(T), Done(T), }","parent":null,"children":[{"krate":0,"index":4747},{"krate":0,"index":4750}],"decl_id":null,"docs":" An enum used for controlling the execution of `fold_while`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `fold_while`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119867,"byte_end":119930,"line_start":3513,"line_end":3513,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119931,"byte_end":119934,"line_start":3514,"line_end":3514,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](Itertools::fold_while) for more information.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":119935,"byte_end":120005,"line_start":3515,"line_end":3515,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120285,"byte_end":120295,"line_start":3526,"line_end":3526,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120228,"byte_end":120273,"line_start":3525,"line_end":3525,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120488,"byte_end":120495,"line_start":3533,"line_end":3533,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120413,"byte_end":120476,"line_start":3532,"line_end":3532,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":151986,"byte_end":151996,"line_start":15,"line_end":15,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152097,"byte_end":152107,"line_start":22,"line_end":22,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2774}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152359,"byte_end":152369,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":153885,"byte_end":153895,"line_start":84,"line_end":84,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154243,"byte_end":154244,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155236,"byte_end":155258,"line_start":127,"line_end":127,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155570,"byte_end":155577,"line_start":143,"line_end":143,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155713,"byte_end":155714,"line_start":149,"line_end":149,"column_start":57,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157003,"byte_end":157034,"line_start":192,"line_end":192,"column_start":50,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158429,"byte_end":158443,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159160,"byte_end":159174,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159399,"byte_end":159413,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159884,"byte_end":159902,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160613,"byte_end":160633,"line_start":104,"line_end":104,"column_start":45,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":162453,"byte_end":162465,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":164556,"byte_end":164572,"line_start":119,"line_end":119,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":165220,"byte_end":165232,"line_start":148,"line_end":148,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122854,"byte_end":122864,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123484,"byte_end":123494,"line_start":78,"line_end":78,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":124376,"byte_end":124394,"line_start":113,"line_end":113,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":125931,"byte_end":125949,"line_start":165,"line_end":165,"column_start":30,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126514,"byte_end":126521,"line_start":192,"line_end":192,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":127140,"byte_end":127147,"line_start":217,"line_end":217,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":129523,"byte_end":129530,"line_start":311,"line_end":311,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131468,"byte_end":131475,"line_start":374,"line_end":374,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132079,"byte_end":132087,"line_start":393,"line_end":393,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2903}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132306,"byte_end":132314,"line_start":402,"line_end":402,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":133338,"byte_end":133342,"line_start":444,"line_end":444,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":133964,"byte_end":133968,"line_start":472,"line_end":472,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134173,"byte_end":134181,"line_start":483,"line_end":483,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135721,"byte_end":135728,"line_start":534,"line_end":534,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2918}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135944,"byte_end":135945,"line_start":541,"line_end":541,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":136416,"byte_end":136423,"line_start":561,"line_end":561,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2919}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":136643,"byte_end":136650,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137687,"byte_end":137694,"line_start":607,"line_end":607,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138217,"byte_end":138229,"line_start":623,"line_end":623,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2920}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138557,"byte_end":138569,"line_start":636,"line_end":636,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139628,"byte_end":139637,"line_start":677,"line_end":677,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140878,"byte_end":140895,"line_start":725,"line_end":725,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141089,"byte_end":141106,"line_start":736,"line_end":736,"column_start":30,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141271,"byte_end":141288,"line_start":746,"line_end":746,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141400,"byte_end":141417,"line_start":752,"line_end":752,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":145115,"byte_end":145123,"line_start":863,"line_end":863,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146228,"byte_end":146236,"line_start":906,"line_end":906,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":147128,"byte_end":147139,"line_start":939,"line_end":939,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148258,"byte_end":148269,"line_start":982,"line_end":982,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148945,"byte_end":148954,"line_start":1010,"line_end":1010,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149443,"byte_end":149452,"line_start":1032,"line_end":1032,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149818,"byte_end":149827,"line_start":1046,"line_end":1046,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":150399,"byte_end":150405,"line_start":1070,"line_end":1070,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151271,"byte_end":151277,"line_start":1106,"line_end":1106,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151383,"byte_end":151389,"line_start":1112,"line_end":1112,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151697,"byte_end":151703,"line_start":1127,"line_end":1127,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167603,"byte_end":167615,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172784,"byte_end":172796,"line_start":183,"line_end":183,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":173159,"byte_end":173171,"line_start":197,"line_end":197,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181445,"byte_end":181455,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3627}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182249,"byte_end":182261,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3628}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182391,"byte_end":182403,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3629}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182861,"byte_end":182873,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":184126,"byte_end":184138,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":185484,"byte_end":185496,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186077,"byte_end":186104,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3638}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186249,"byte_end":186276,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186945,"byte_end":186972,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":188567,"byte_end":188594,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189425,"byte_end":189440,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189865,"byte_end":189880,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190522,"byte_end":190537,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190592,"byte_end":190607,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190971,"byte_end":190986,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":191660,"byte_end":191675,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":195142,"byte_end":195151,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":197323,"byte_end":197332,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":198857,"byte_end":198866,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":199071,"byte_end":199080,"line_start":145,"line_end":145,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":199580,"byte_end":199589,"line_start":161,"line_end":161,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":201053,"byte_end":201063,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":201824,"byte_end":201830,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203329,"byte_end":203343,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203478,"byte_end":203492,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204591,"byte_end":204602,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1266},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1304},{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224275,"byte_end":224276,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224581,"byte_end":224591,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224781,"byte_end":224791,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":225833,"byte_end":225843,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":232621,"byte_end":232631,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":234432,"byte_end":234439,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235633,"byte_end":235639,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236542,"byte_end":236547,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236718,"byte_end":236723,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238544,"byte_end":238554,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239527,"byte_end":239533,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240285,"byte_end":240290,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240449,"byte_end":240454,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":240986,"byte_end":241010,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241693,"byte_end":241694,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":242588,"byte_end":242603,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":243799,"byte_end":243814,"line_start":116,"line_end":116,"column_start":34,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":245112,"byte_end":245120,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":246016,"byte_end":246024,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3764}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248031,"byte_end":248041,"line_start":117,"line_end":117,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248176,"byte_end":248177,"line_start":123,"line_end":123,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249264,"byte_end":249272,"line_start":164,"line_end":164,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3769}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":250111,"byte_end":250119,"line_start":188,"line_end":188,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3770}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":250268,"byte_end":250276,"line_start":196,"line_end":196,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":251035,"byte_end":251043,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lazy_buffer.rs","byte_start":251287,"byte_end":251297,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lazy_buffer.rs","byte_start":252246,"byte_end":252256,"line_start":56,"line_end":56,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253581,"byte_end":253592,"line_start":34,"line_end":34,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3782}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253812,"byte_end":253823,"line_start":44,"line_end":44,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3783}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":254048,"byte_end":254059,"line_start":53,"line_end":53,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258749,"byte_end":258761,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262784,"byte_end":262793,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262946,"byte_end":262955,"line_start":37,"line_end":37,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":263599,"byte_end":263608,"line_start":59,"line_end":59,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":264075,"byte_end":264084,"line_start":78,"line_end":78,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":264447,"byte_end":264456,"line_start":94,"line_end":94,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":265279,"byte_end":265287,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266053,"byte_end":266061,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266521,"byte_end":266529,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266639,"byte_end":266647,"line_start":86,"line_end":86,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267563,"byte_end":267570,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268756,"byte_end":268763,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":269090,"byte_end":269097,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":269156,"byte_end":269163,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270215,"byte_end":270223,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270543,"byte_end":270550,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270969,"byte_end":270977,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271910,"byte_end":271926,"line_start":96,"line_end":96,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274247,"byte_end":274259,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3886}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274834,"byte_end":274846,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3913}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":275712,"byte_end":275724,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":278397,"byte_end":278409,"line_start":170,"line_end":170,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":279621,"byte_end":279634,"line_start":208,"line_end":208,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1877},{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282438,"byte_end":282446,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3914}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282566,"byte_end":282574,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3915}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282940,"byte_end":282948,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":284195,"byte_end":284203,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284683,"byte_end":284697,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287422,"byte_end":287430,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287932,"byte_end":287940,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1963}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289914,"byte_end":289920,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3943}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289994,"byte_end":290000,"line_start":58,"line_end":58,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":290544,"byte_end":290550,"line_start":76,"line_end":76,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":290996,"byte_end":291002,"line_start":98,"line_end":98,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291636,"byte_end":291643,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292033,"byte_end":292040,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2013}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292190,"byte_end":292197,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292250,"byte_end":292257,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295628,"byte_end":295638,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3960}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296479,"byte_end":296489,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298152,"byte_end":298158,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3961}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298541,"byte_end":298547,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299082,"byte_end":299089,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3980}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299192,"byte_end":299199,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300895,"byte_end":300898,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":301998,"byte_end":302001,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302643,"byte_end":302644,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302906,"byte_end":302917,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2127}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303089,"byte_end":303100,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303778,"byte_end":303789,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304454,"byte_end":304460,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304685,"byte_end":304691,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":306292,"byte_end":306304,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2158},{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":306848,"byte_end":306860,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307963,"byte_end":307983,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311347,"byte_end":311359,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4230}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311560,"byte_end":311572,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2205}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":312036,"byte_end":312040,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2209}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":312918,"byte_end":312930,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314041,"byte_end":314053,"line_start":100,"line_end":100,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2224}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314678,"byte_end":314682,"line_start":121,"line_end":121,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2235},{"krate":0,"index":2236}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314983,"byte_end":314987,"line_start":131,"line_end":131,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2246}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315575,"byte_end":315583,"line_start":151,"line_end":151,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315845,"byte_end":315854,"line_start":164,"line_end":164,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317528,"byte_end":317536,"line_start":20,"line_end":20,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4253}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":318325,"byte_end":318333,"line_start":51,"line_end":51,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319070,"byte_end":319078,"line_start":80,"line_end":80,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319485,"byte_end":319493,"line_start":96,"line_end":96,"column_start":33,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319614,"byte_end":319620,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320351,"byte_end":320357,"line_start":130,"line_end":130,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2341}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320798,"byte_end":320804,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":321195,"byte_end":321201,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4260}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322011,"byte_end":322023,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4261}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322836,"byte_end":322844,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":323123,"byte_end":323135,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2372},{"krate":0,"index":2373},{"krate":0,"index":2374}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":324371,"byte_end":324383,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":324460,"byte_end":324472,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325381,"byte_end":325386,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325964,"byte_end":325969,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326901,"byte_end":326911,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":327533,"byte_end":327543,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2431}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":328364,"byte_end":328374,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":328477,"byte_end":328487,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116696,"byte_end":116697,"line_start":3406,"line_end":3406,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120209,"byte_end":120218,"line_start":3524,"line_end":3524,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2771},{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":5535,"byte_end":5539,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":900}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":151986,"byte_end":151996,"line_start":15,"line_end":15,"column_start":46,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":336},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152097,"byte_end":152107,"line_start":22,"line_end":22,"column_start":30,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":336},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":152359,"byte_end":152369,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":336},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":153885,"byte_end":153895,"line_start":84,"line_end":84,"column_start":74,"column_end":84},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":336},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":154243,"byte_end":154244,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":376},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155236,"byte_end":155258,"line_start":127,"line_end":127,"column_start":41,"column_end":63},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2775},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155570,"byte_end":155577,"line_start":143,"line_end":143,"column_start":42,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2782},"to":{"krate":0,"index":386}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":155713,"byte_end":155714,"line_start":149,"line_end":149,"column_start":57,"column_end":58},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":398},"to":{"krate":0,"index":386}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/coalesce.rs","byte_start":157003,"byte_end":157034,"line_start":192,"line_end":192,"column_start":50,"column_end":81},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2786},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":158429,"byte_end":158443,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2793},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159160,"byte_end":159174,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2793},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159399,"byte_end":159413,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2793},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":159884,"byte_end":159902,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2802},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/map.rs","byte_start":160613,"byte_end":160633,"line_start":104,"line_end":104,"column_start":45,"column_end":65},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2809},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":162453,"byte_end":162465,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":164556,"byte_end":164572,"line_start":119,"line_end":119,"column_start":9,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/multi_product.rs","byte_start":165220,"byte_end":165232,"line_start":148,"line_end":148,"column_start":22,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2816},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":122854,"byte_end":122864,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2841},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":123484,"byte_end":123494,"line_start":78,"line_end":78,"column_start":30,"column_end":40},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2841},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":124376,"byte_end":124394,"line_start":113,"line_end":113,"column_start":25,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2855},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":125931,"byte_end":125949,"line_start":165,"line_end":165,"column_start":30,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2855},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":126514,"byte_end":126521,"line_start":192,"line_end":192,"column_start":9,"column_end":16},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":127140,"byte_end":127147,"line_start":217,"line_end":217,"column_start":22,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2869},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":129523,"byte_end":129530,"line_start":311,"line_end":311,"column_start":25,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2879},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":131468,"byte_end":131475,"line_start":374,"line_end":374,"column_start":30,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2879},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132079,"byte_end":132087,"line_start":393,"line_end":393,"column_start":27,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2894},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":132306,"byte_end":132314,"line_start":402,"line_end":402,"column_start":28,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2894},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":133338,"byte_end":133342,"line_start":444,"line_end":444,"column_start":22,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":133964,"byte_end":133968,"line_start":472,"line_end":472,"column_start":31,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":134173,"byte_end":134181,"line_start":483,"line_end":483,"column_start":43,"column_end":51},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2914},"to":{"krate":0,"index":648}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135721,"byte_end":135728,"line_start":534,"line_end":534,"column_start":30,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":660},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":135944,"byte_end":135945,"line_start":541,"line_end":541,"column_start":55,"column_end":56},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":674},"to":{"krate":0,"index":648}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":136416,"byte_end":136423,"line_start":561,"line_end":561,"column_start":25,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":660},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":136643,"byte_end":136650,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":660},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":137687,"byte_end":137694,"line_start":607,"line_end":607,"column_start":33,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":660},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138217,"byte_end":138229,"line_start":623,"line_end":623,"column_start":31,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":138557,"byte_end":138569,"line_start":636,"line_end":636,"column_start":29,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":139628,"byte_end":139637,"line_start":677,"line_end":677,"column_start":25,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2921},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140465,"byte_end":140470,"line_start":709,"line_end":709,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":140878,"byte_end":140895,"line_start":725,"line_end":725,"column_start":25,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2930},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141089,"byte_end":141106,"line_start":736,"line_end":736,"column_start":30,"column_end":47},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2930},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141271,"byte_end":141288,"line_start":746,"line_end":746,"column_start":21,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2943},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":141400,"byte_end":141417,"line_start":752,"line_end":752,"column_start":32,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2943},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":145115,"byte_end":145123,"line_start":863,"line_end":863,"column_start":31,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":146228,"byte_end":146236,"line_start":906,"line_end":906,"column_start":36,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":147128,"byte_end":147139,"line_start":939,"line_end":939,"column_start":34,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":774},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148258,"byte_end":148269,"line_start":982,"line_end":982,"column_start":39,"column_end":50},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":774},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":148945,"byte_end":148954,"line_start":1010,"line_end":1010,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3269},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149443,"byte_end":149452,"line_start":1032,"line_end":1032,"column_start":36,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3269},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":149818,"byte_end":149827,"line_start":1046,"line_end":1046,"column_start":30,"column_end":39},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3269},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":150399,"byte_end":150405,"line_start":1070,"line_end":1070,"column_start":25,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151271,"byte_end":151277,"line_start":1106,"line_end":1106,"column_start":34,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151383,"byte_end":151389,"line_start":1112,"line_end":1112,"column_start":36,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/adaptors/mod.rs","byte_start":151697,"byte_end":151703,"line_start":1127,"line_end":1127,"column_start":30,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":167603,"byte_end":167615,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":172784,"byte_end":172796,"line_start":183,"line_end":183,"column_start":9,"column_end":21},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/either_or_both.rs","byte_start":173159,"byte_end":173171,"line_start":197,"line_end":197,"column_start":43,"column_end":55},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3288},"to":{"krate":2,"index":2892}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/cons_tuples_impl.rs","byte_start":181445,"byte_end":181455,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3619},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182249,"byte_end":182261,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182391,"byte_end":182403,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":182861,"byte_end":182873,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":184126,"byte_end":184138,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations.rs","byte_start":185484,"byte_end":185496,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186077,"byte_end":186104,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3630},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186249,"byte_end":186276,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":186945,"byte_end":186972,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3630},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/combinations_with_replacement.rs","byte_start":188567,"byte_end":188594,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3630},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189425,"byte_end":189440,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":189865,"byte_end":189880,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190522,"byte_end":190537,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190592,"byte_end":190607,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":190971,"byte_end":190986,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3639},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/exactly_one_err.rs","byte_start":191660,"byte_end":191675,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3639},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":195142,"byte_end":195151,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":197323,"byte_end":197332,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":198857,"byte_end":198866,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":199071,"byte_end":199080,"line_start":145,"line_end":145,"column_start":30,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/flatten_ok.rs","byte_start":199580,"byte_end":199589,"line_start":161,"line_end":161,"column_start":33,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":201053,"byte_end":201063,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3648},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/format.rs","byte_start":201824,"byte_end":201830,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203329,"byte_end":203343,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":203478,"byte_end":203492,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3704},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/grouping_map.rs","byte_start":204591,"byte_end":204602,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224275,"byte_end":224276,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1352},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224581,"byte_end":224591,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":224781,"byte_end":224791,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3727},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":225833,"byte_end":225843,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":232621,"byte_end":232631,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":234432,"byte_end":234439,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":235633,"byte_end":235639,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1420},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236542,"byte_end":236547,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1434},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":236718,"byte_end":236723,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1434},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":238544,"byte_end":238554,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":239527,"byte_end":239533,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240285,"byte_end":240290,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/groupbylazy.rs","byte_start":240449,"byte_end":240454,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":240986,"byte_end":241010,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3733},"to":{"krate":0,"index":1507}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":241693,"byte_end":241694,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1519},"to":{"krate":0,"index":1507}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":242588,"byte_end":242603,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3743},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/intersperse.rs","byte_start":243799,"byte_end":243814,"line_start":116,"line_end":116,"column_start":34,"column_end":49},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3743},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":245112,"byte_end":245120,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":246016,"byte_end":246024,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3757},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248031,"byte_end":248041,"line_start":117,"line_end":117,"column_start":44,"column_end":54},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3765},"to":{"krate":0,"index":1583}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":248176,"byte_end":248177,"line_start":123,"line_end":123,"column_start":56,"column_end":57},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1591},"to":{"krate":0,"index":1583}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":249264,"byte_end":249272,"line_start":164,"line_end":164,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1595},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":250111,"byte_end":250119,"line_start":188,"line_end":188,"column_start":22,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1595},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":250268,"byte_end":250276,"line_start":196,"line_end":196,"column_start":25,"column_end":33},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1595},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/kmerge_impl.rs","byte_start":251035,"byte_end":251043,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1595},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lazy_buffer.rs","byte_start":251287,"byte_end":251297,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lazy_buffer.rs","byte_start":252246,"byte_end":252256,"line_start":56,"line_end":56,"column_start":25,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3771},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253581,"byte_end":253592,"line_start":34,"line_end":34,"column_start":25,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1664},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":253812,"byte_end":253823,"line_start":44,"line_end":44,"column_start":30,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1664},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/merge_join.rs","byte_start":254048,"byte_end":254059,"line_start":53,"line_end":53,"column_start":28,"column_end":39},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1664},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/minmax.rs","byte_start":258749,"byte_end":258761,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262784,"byte_end":262793,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":262946,"byte_end":262955,"line_start":37,"line_end":37,"column_start":19,"column_end":28},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":263599,"byte_end":263608,"line_start":59,"line_end":59,"column_start":25,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3809},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":264075,"byte_end":264084,"line_start":78,"line_end":78,"column_start":22,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3809},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/multipeek_impl.rs","byte_start":264447,"byte_end":264456,"line_start":94,"line_end":94,"column_start":31,"column_end":40},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3809},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":265279,"byte_end":265287,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3820},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266053,"byte_end":266061,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3820},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266521,"byte_end":266529,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3820},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/pad_tail.rs","byte_start":266639,"byte_end":266647,"line_start":86,"line_end":86,"column_start":30,"column_end":38},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3820},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":267563,"byte_end":267570,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":268756,"byte_end":268763,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3831},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":269090,"byte_end":269097,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3831},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peek_nth.rs","byte_start":269156,"byte_end":269163,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3831},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":269901,"byte_end":269909,"line_start":14,"line_end":14,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":7559},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270215,"byte_end":270223,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":2,"index":42407},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270543,"byte_end":270550,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2869},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":270969,"byte_end":270977,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3927},"to":{"krate":0,"index":1803}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/peeking_take_while.rs","byte_start":271910,"byte_end":271926,"line_start":96,"line_end":96,"column_start":29,"column_end":45},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1818},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274247,"byte_end":274259,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1848},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":274834,"byte_end":274846,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1848},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":275712,"byte_end":275724,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1848},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":278397,"byte_end":278409,"line_start":170,"line_end":170,"column_start":9,"column_end":21},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/permutations.rs","byte_start":279621,"byte_end":279634,"line_start":208,"line_end":208,"column_start":6,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282438,"byte_end":282446,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282566,"byte_end":282574,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":282940,"byte_end":282948,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/powerset.rs","byte_start":284195,"byte_end":284203,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/process_results_impl.rs","byte_start":284683,"byte_end":284697,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3916},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287422,"byte_end":287430,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3927},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/put_back_n_impl.rs","byte_start":287932,"byte_end":287940,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3927},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289914,"byte_end":289920,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3937},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":289994,"byte_end":290000,"line_start":58,"line_end":58,"column_start":25,"column_end":31},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3937},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":290544,"byte_end":290550,"line_start":76,"line_end":76,"column_start":33,"column_end":39},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3937},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/rciter_impl.rs","byte_start":290996,"byte_end":291002,"line_start":98,"line_end":98,"column_start":30,"column_end":36},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3937},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":291636,"byte_end":291643,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3944},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292033,"byte_end":292040,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3944},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292190,"byte_end":292197,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3944},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/repeatn.rs","byte_start":292250,"byte_end":292257,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3944},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":295628,"byte_end":295638,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3954},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":296479,"byte_end":296489,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3954},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298152,"byte_end":298158,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3962},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":298541,"byte_end":298547,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3962},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299082,"byte_end":299089,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3971},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/sources.rs","byte_start":299192,"byte_end":299199,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3971},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":300895,"byte_end":300898,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3991},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tee.rs","byte_start":301998,"byte_end":302001,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3991},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302583,"byte_end":302595,"line_start":16,"line_end":16,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":2171},"to":{"krate":0,"index":2122}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302643,"byte_end":302644,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2124},"to":{"krate":0,"index":2122}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":302906,"byte_end":302917,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303089,"byte_end":303100,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3998},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":303778,"byte_end":303789,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3998},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304454,"byte_end":304460,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4008},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":304685,"byte_end":304691,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":306292,"byte_end":306304,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4017},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":306848,"byte_end":306860,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4017},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":307963,"byte_end":307983,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4030},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/tuple_impl.rs","byte_start":308224,"byte_end":308229,"line_start":239,"line_end":239,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":2171}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311347,"byte_end":311359,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4219},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":311560,"byte_end":311572,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":312036,"byte_end":312040,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":312918,"byte_end":312930,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4219},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314041,"byte_end":314053,"line_start":100,"line_end":100,"column_start":45,"column_end":57},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4219},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314678,"byte_end":314682,"line_start":121,"line_end":121,"column_start":33,"column_end":37},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":2226}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":314983,"byte_end":314987,"line_start":131,"line_end":131,"column_start":39,"column_end":43},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2237},"to":{"krate":0,"index":2226}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315575,"byte_end":315583,"line_start":151,"line_end":151,"column_start":38,"column_end":46},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2253},"to":{"krate":0,"index":2247}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/duplicates_impl.rs","byte_start":315845,"byte_end":315854,"line_start":164,"line_end":164,"column_start":35,"column_end":44},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2265},"to":{"krate":0,"index":2247}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":317528,"byte_end":317536,"line_start":20,"line_end":20,"column_start":30,"column_end":38},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4241},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":318325,"byte_end":318333,"line_start":51,"line_end":51,"column_start":28,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4241},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319070,"byte_end":319078,"line_start":80,"line_end":80,"column_start":39,"column_end":47},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4241},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319485,"byte_end":319493,"line_start":96,"line_end":96,"column_start":33,"column_end":41},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4241},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":319614,"byte_end":319620,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4254},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320351,"byte_end":320357,"line_start":130,"line_end":130,"column_start":33,"column_end":39},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4254},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":320798,"byte_end":320804,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4254},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/unique_impl.rs","byte_start":321195,"byte_end":321201,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4254},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322011,"byte_end":322023,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":322836,"byte_end":322844,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":323123,"byte_end":323135,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":324371,"byte_end":324383,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/with_position.rs","byte_start":324460,"byte_end":324472,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325381,"byte_end":325386,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4290},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_eq_impl.rs","byte_start":325964,"byte_end":325969,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4290},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":326901,"byte_end":326911,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4303},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":327533,"byte_end":327543,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4303},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":328364,"byte_end":328374,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4303},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/zip_longest.rs","byte_start":328477,"byte_end":328487,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4303},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":12652,"byte_end":12660,"line_start":427,"line_end":427,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":7559},"to":{"krate":0,"index":2449}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":116696,"byte_end":116697,"line_start":3406,"line_end":3406,"column_start":31,"column_end":32},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2757},"to":{"krate":0,"index":2449}},{"span":{"file_name":"/home/gustavo/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.1/src/lib.rs","byte_start":120209,"byte_end":120218,"line_start":3524,"line_end":3524,"column_start":9,"column_end":18},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4745},"to":{"krate":4294967295,"index":4294967295}}]}